[
  {
    "objectID": "api/result_network.ResultLocation.html",
    "href": "api/result_network.ResultLocation.html",
    "title": "result_network.ResultLocation",
    "section": "",
    "text": "result_network.ResultLocation(self)\nA base class for a network location (node, reach) or a catchment wrapper class.\n\n\n\n\n\nName\nDescription\n\n\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngroup\nThe TimeSeriesIdGroup assosciated with this location.\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that this location belongs to.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_query\nAdd a query to ResultNetwork.queries list.\n\n\nget_m1d_dataset\nGet IRes1DDataSet object associated with ResultLocation.\n\n\nget_query\nCreate a query for given data item.\n\n\nread\nRead the time series data for all quantities at this location into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\nresult_network.ResultLocation.add_query(data_item)\nAdd a query to ResultNetwork.queries list.\n\n\n\nresult_network.ResultLocation.get_m1d_dataset(m1d_dataitem=None)\nGet IRes1DDataSet object associated with ResultLocation.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm1d_dataitem\nIDataItem\nUsually ignored, except for ResultReach.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nIRes1DDataSet\nIRes1DDataSet object associated with ResultLocation.\n\n\n\n\n\n\n\nresult_network.ResultLocation.get_query(data_item)\nCreate a query for given data item.\n\n\n\nresult_network.ResultLocation.read(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultLocation.to_dataframe(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone"
  },
  {
    "objectID": "api/result_network.ResultLocation.html#attributes",
    "href": "api/result_network.ResultLocation.html#attributes",
    "title": "result_network.ResultLocation",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngroup\nThe TimeSeriesIdGroup assosciated with this location.\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that this location belongs to."
  },
  {
    "objectID": "api/result_network.ResultLocation.html#methods",
    "href": "api/result_network.ResultLocation.html#methods",
    "title": "result_network.ResultLocation",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd_query\nAdd a query to ResultNetwork.queries list.\n\n\nget_m1d_dataset\nGet IRes1DDataSet object associated with ResultLocation.\n\n\nget_query\nCreate a query for given data item.\n\n\nread\nRead the time series data for all quantities at this location into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\nresult_network.ResultLocation.add_query(data_item)\nAdd a query to ResultNetwork.queries list.\n\n\n\nresult_network.ResultLocation.get_m1d_dataset(m1d_dataitem=None)\nGet IRes1DDataSet object associated with ResultLocation.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm1d_dataitem\nIDataItem\nUsually ignored, except for ResultReach.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nIRes1DDataSet\nIRes1DDataSet object associated with ResultLocation.\n\n\n\n\n\n\n\nresult_network.ResultLocation.get_query(data_item)\nCreate a query for given data item.\n\n\n\nresult_network.ResultLocation.read(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultLocation.to_dataframe(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone"
  },
  {
    "objectID": "api/result_network.ResultReach.html",
    "href": "api/result_network.ResultReach.html",
    "title": "result_network.ResultReach",
    "section": "",
    "text": "result_network.ResultReach(self, reaches, res1d)\nClass for wrapping a list of ResultData reaches having the same reach name.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nreaches\nList[IRes1DReach]\nA list of MIKE 1D IRes1DReach objects having the same reach name.\nrequired\n\n\nres1d\nRes1D\nRes1D object the reach belongs to.\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nchainages\nList of chainages for the reach.\n\n\nderived_quantities\nA list of available derived quantities.\n\n\nend_chainage\nEnd chainage of the reach.\n\n\nend_node\nEnd node of the reach.\n\n\nfull_flow_discharge\nFull flow discharge of the reach.\n\n\ngeometry\nA geometric representation of the reach. Requires shapely.\n\n\ngridpoints\nList of gridpoints for the reach.\n\n\ngroup\nThe TimeSeriesIdGroup assosciated with this location.\n\n\nheight\nHeight of the reach.\n\n\nlength\nLength of the reach.\n\n\nn_gridpoints\nNumber of gridpoints in the reach.\n\n\nname\nName of the reach.\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that this location belongs to.\n\n\nres1d_reaches\nList of DHI.Mike1D.ResultDataAccess.IRes1DReach corresponding to this result location.\n\n\nstart_chainage\nStart chainage of the reach.\n\n\nstart_node\nStart node of the reach.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_query\nAdd a query to ResultNetwork.queries list.\n\n\nget_m1d_dataset\nGet IRes1DDataSet object associated with ResultReach.\n\n\nget_query\nGet a query for a data item.\n\n\ninterpolate_reach_critical_level\nInterpolate the critical level at a given chainage by linear interpolation from the bounding node critical levels.\n\n\ninterpolate_reach_ground_level\nInterpolate the ground level at a given chainage by linear interpolation from the bounding node ground levels.\n\n\nread\nRead the time series data for all quantities at this location into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\nresult_network.ResultReach.add_query(data_item)\nAdd a query to ResultNetwork.queries list.\n\n\n\nresult_network.ResultReach.get_m1d_dataset(m1d_dataitem=None)\nGet IRes1DDataSet object associated with ResultReach.\nA ResultReach may consist of several IRes1DDataSet objects. Therefore, a IRes1DDataItem must be provided to identify the correct IRes1DDataSet.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm1d_dataitem\nIDataItem\nThe IRes1DDataItem associated with the returned IRes1DDataSet.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nIRes1DDataSet\nIRes1DDataSet object associated with ResultReach.\n\n\n\n\n\n\n\nresult_network.ResultReach.get_query(data_item)\nGet a query for a data item.\n\n\n\nresult_network.ResultReach.interpolate_reach_critical_level(chainage)\nInterpolate the critical level at a given chainage by linear interpolation from the bounding node critical levels.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nchainage\nfloat\nChainage for which to interpolate the critical level.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat\nInterpolated critical level.\n\n\n\n\n\n\n\nresult_network.ResultReach.interpolate_reach_ground_level(chainage)\nInterpolate the ground level at a given chainage by linear interpolation from the bounding node ground levels.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nchainage\nfloat\nChainage for which to interpolate the ground level.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat\nInterpolated ground level.\n\n\n\n\n\n\n\nresult_network.ResultReach.read(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultReach.to_dataframe(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone"
  },
  {
    "objectID": "api/result_network.ResultReach.html#parameters",
    "href": "api/result_network.ResultReach.html#parameters",
    "title": "result_network.ResultReach",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nreaches\nList[IRes1DReach]\nA list of MIKE 1D IRes1DReach objects having the same reach name.\nrequired\n\n\nres1d\nRes1D\nRes1D object the reach belongs to.\nrequired"
  },
  {
    "objectID": "api/result_network.ResultReach.html#attributes",
    "href": "api/result_network.ResultReach.html#attributes",
    "title": "result_network.ResultReach",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nchainages\nList of chainages for the reach.\n\n\nderived_quantities\nA list of available derived quantities.\n\n\nend_chainage\nEnd chainage of the reach.\n\n\nend_node\nEnd node of the reach.\n\n\nfull_flow_discharge\nFull flow discharge of the reach.\n\n\ngeometry\nA geometric representation of the reach. Requires shapely.\n\n\ngridpoints\nList of gridpoints for the reach.\n\n\ngroup\nThe TimeSeriesIdGroup assosciated with this location.\n\n\nheight\nHeight of the reach.\n\n\nlength\nLength of the reach.\n\n\nn_gridpoints\nNumber of gridpoints in the reach.\n\n\nname\nName of the reach.\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that this location belongs to.\n\n\nres1d_reaches\nList of DHI.Mike1D.ResultDataAccess.IRes1DReach corresponding to this result location.\n\n\nstart_chainage\nStart chainage of the reach.\n\n\nstart_node\nStart node of the reach."
  },
  {
    "objectID": "api/result_network.ResultReach.html#methods",
    "href": "api/result_network.ResultReach.html#methods",
    "title": "result_network.ResultReach",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd_query\nAdd a query to ResultNetwork.queries list.\n\n\nget_m1d_dataset\nGet IRes1DDataSet object associated with ResultReach.\n\n\nget_query\nGet a query for a data item.\n\n\ninterpolate_reach_critical_level\nInterpolate the critical level at a given chainage by linear interpolation from the bounding node critical levels.\n\n\ninterpolate_reach_ground_level\nInterpolate the ground level at a given chainage by linear interpolation from the bounding node ground levels.\n\n\nread\nRead the time series data for all quantities at this location into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\nresult_network.ResultReach.add_query(data_item)\nAdd a query to ResultNetwork.queries list.\n\n\n\nresult_network.ResultReach.get_m1d_dataset(m1d_dataitem=None)\nGet IRes1DDataSet object associated with ResultReach.\nA ResultReach may consist of several IRes1DDataSet objects. Therefore, a IRes1DDataItem must be provided to identify the correct IRes1DDataSet.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm1d_dataitem\nIDataItem\nThe IRes1DDataItem associated with the returned IRes1DDataSet.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nIRes1DDataSet\nIRes1DDataSet object associated with ResultReach.\n\n\n\n\n\n\n\nresult_network.ResultReach.get_query(data_item)\nGet a query for a data item.\n\n\n\nresult_network.ResultReach.interpolate_reach_critical_level(chainage)\nInterpolate the critical level at a given chainage by linear interpolation from the bounding node critical levels.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nchainage\nfloat\nChainage for which to interpolate the critical level.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat\nInterpolated critical level.\n\n\n\n\n\n\n\nresult_network.ResultReach.interpolate_reach_ground_level(chainage)\nInterpolate the ground level at a given chainage by linear interpolation from the bounding node ground levels.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nchainage\nfloat\nChainage for which to interpolate the ground level.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat\nInterpolated ground level.\n\n\n\n\n\n\n\nresult_network.ResultReach.read(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultReach.to_dataframe(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone"
  },
  {
    "objectID": "api/open.html",
    "href": "api/open.html",
    "title": "open",
    "section": "",
    "text": "open(file_name, **kwargs)\nOpen a file type supported by MIKE IO 1D file.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfile_name\nstr or Path\nPath to the file to read.\nrequired\n\n\n**kwargs\n\nAdditional keyword arguments to pass to the relevant constructor.\n{}\n\n\n\n\n\n\nmikeio1d.Res1D mikeio1d.Xns11\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nRes1D or Xns11\nThe object representing the 1D file.\n\n\n\n\n\n\n&gt;&gt;&gt; import mikeio1d\n&gt;&gt;&gt; res = mikeio1d.open(\"results.res1d\")\n&gt;&gt;&gt; res.nodes.read()\n&gt;&gt;&gt; xs = mikeio1d.open(\"cross_section.xns11\")\n&gt;&gt;&gt; xs"
  },
  {
    "objectID": "api/open.html#parameters",
    "href": "api/open.html#parameters",
    "title": "open",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nfile_name\nstr or Path\nPath to the file to read.\nrequired\n\n\n**kwargs\n\nAdditional keyword arguments to pass to the relevant constructor.\n{}"
  },
  {
    "objectID": "api/open.html#see-also",
    "href": "api/open.html#see-also",
    "title": "open",
    "section": "",
    "text": "mikeio1d.Res1D mikeio1d.Xns11"
  },
  {
    "objectID": "api/open.html#returns",
    "href": "api/open.html#returns",
    "title": "open",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nRes1D or Xns11\nThe object representing the 1D file."
  },
  {
    "objectID": "api/open.html#examples",
    "href": "api/open.html#examples",
    "title": "open",
    "section": "",
    "text": "&gt;&gt;&gt; import mikeio1d\n&gt;&gt;&gt; res = mikeio1d.open(\"results.res1d\")\n&gt;&gt;&gt; res.nodes.read()\n&gt;&gt;&gt; xs = mikeio1d.open(\"cross_section.xns11\")\n&gt;&gt;&gt; xs"
  },
  {
    "objectID": "api/Res1D.html",
    "href": "api/Res1D.html",
    "title": "Res1D",
    "section": "",
    "text": "Res1D(\n    self,\n    file_path=None,\n    reaches=None,\n    nodes=None,\n    catchments=None,\n    time=None,\n    step_every=None,\n    quantities=None,\n    derived_quantities=None,\n    **kwargs,\n)\nClass for reading data from 1D network result files.\nCurrently supported formats are:\n\nMIKE 1D network and catchment res1d files\nMIKE 1D Long Term Statistics (LTS) res1d files\nEPANET res, resx, and whr files generated by MIKE+\nSWMM out files\nMOUSE legacy prf, crf, and xrf files\nMIKE 11 res11 files\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfile_path\nstr | Path\nFile path of the result file.\nNone\n\n\nreaches\nlist[str] | None\nReach IDs to include when pre-loading dynamic results. None includes all.\nNone\n\n\nnodes\nlist[str] | None\nNode IDs to include when pre-loading dynamic results. None includes all.\nNone\n\n\ncatchments\nlist[str] | None\nCatchment IDs to include when pre-loading dynamic results. None includes all.\nNone\n\n\ntime\nUnion[tuple[str], list[str], slice, None]\nStart and end time of the data to read. Using None will read all data.\nNone\n\n\nstep_every\nint | None\nNumber specifying the time step frequency to output. None outputs all time steps.\nNone\n\n\nquantities\nlist[str] | None\nQuantities to filter by (e.g. ‘WaterLevel’, ‘Discharge’). None includes all.\nNone\n\n\nderived_quantities\nlist[str] | None\nDerived quantities to include when pre-loading dynamic results. None includes all.\nNone\n\n\n\n\n\n\nRead all data from a res1d file into a Pandas DataFrame:\n&gt;&gt;&gt; res = Res1D(\"results.res1d\")\n&gt;&gt;&gt; res.read()\nRead all available data for nodes:\n&gt;&gt;&gt; res1d.nodes.read()\nRead data for a specific node:\n&gt;&gt;&gt; res.nodes['node1'].read()\nRead data for a specific quantity:\n&gt;&gt;&gt; res.nodes['node1'].WaterLevel.read()\nFilter which data is pre-loaded, typically used for large files:\n&gt;&gt;&gt; nodes = ['node1', 'node2']\n&gt;&gt;&gt; reaches = ['reach1', 'reach2']\n&gt;&gt;&gt; times = slice('2020-01-01', '2020-01-02')\n&gt;&gt;&gt; res1d = Res1D('MyRes1D.res1d', nodes=nodes, reaches=reaches, time=times)\n&gt;&gt;&gt; res1d.read()\nOnly read every second time step:\n&gt;&gt;&gt; res1d = Res1D('MyRes1D.res1d', step_every=2)\n&gt;&gt;&gt; res1d.read()\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncatchments\nCatchments of the result file. See ResultCatchments.\n\n\ndata\n.NET object ResultData with the loaded res1d data.\n\n\nderived_quantities\nDerived quantities available for res1d file.\n\n\nend_time\nEnd time of the result file.\n\n\nfile_path\nFile path of the result file.\n\n\nglobal_data\nGlobal data of the result file. See ResultGlobalDatas.\n\n\nnodes\nNodes of the result file. See ResultNodes.\n\n\nnumber_of_time_steps\nNumber of time steps in the result file.\n\n\nprojection_string\nProjection string of the result file.\n\n\nquantities\nQuantities in res1d file.\n\n\nquery\n.NET object ResultDataQuery to use for querying the loaded res1d data.\n\n\nreaches\nReaches of the result file. See ResultReaches.\n\n\nresult_data\n.NET object ResultData with the loaded res1d data.\n\n\nresult_type\nSpecifies what type of result file Res1D is.\n\n\nsearcher\n.NET object ResultDataSearcher to use for searching res1d data items on network.\n\n\nstart_time\nStart time of the result file.\n\n\nstructures\nStructures of the result file. See ResultStructures.\n\n\ntime_index\npandas.DatetimeIndex of the time index.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_derived_quantity\nAdd a derived quantity to the Res1D object, propogating changes to the network.\n\n\nextract\nExtract given queries to provided file.\n\n\nget_supported_file_extensions\nGet supported file extensions for Res1D.\n\n\ninfo\nPrint information about the result file.\n\n\nmerge\nMerge res1d files.\n\n\nmodify\nModify the result data.\n\n\nread\nRead result data into a pandas DataFrame.\n\n\nremove_derived_quantity\nRemove a derived quantity from the Res1D object, propogating changes to the network.\n\n\nsave\nSave the ResultData to a new res1d file.\n\n\nto_csv\nExtract to csv file.\n\n\nto_dataframe\nRead result data into a pandas DataFrame.\n\n\nto_dfs0\nExtract to dfs0 file.\n\n\nto_txt\nExtract to txt file.\n\n\n\n\n\nRes1D.add_derived_quantity(derived_quantity)\nAdd a derived quantity to the Res1D object, propogating changes to the network.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nderived_quantity\nType[DerivedQuantity]\nDerived quantity to be added\nrequired\n\n\n\n\n\n\n\nRes1D.extract(file_path, queries=None, time_step_skipping_number=1, ext=None)\nExtract given queries to provided file.\nFile type is determined from file_path extension. The supported formats are:\n\ncsv\ndfs0\ntxt\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfile_path\nstr\nOutput file path.\nrequired\n\n\nqueries\nOptional[List[QueryData] | QueryData | List[TimeSeriesId] | TimeSeriesId]\nA list of queries to read. If None, all data is read.\nNone\n\n\ntime_step_skipping_number\nint\nNumber specifying the time step frequency to output.\n1\n\n\next\nstr\nOutput file type to use instead of determining it from extension. Can be ‘csv’, ‘dfs0’, ‘txt’.\nNone\n\n\n\n\n\n\nThe queries parameter exists for historical reasons where queries were built manually. Now, this is handled automatically e.g. res.nodes['node1'].WaterLevel.read(). It may still be useful so it has been kept for now.\n\n\n\n\nRes1D.get_supported_file_extensions()\nGet supported file extensions for Res1D.\n\n\n\nRes1D.info()\nPrint information about the result file.\n\n\n\nRes1D.merge(file_names, merged_file_name)\nMerge res1d files.\nIt is possible to merge three kinds of result files:\n\nRegular res1d (HD, RR, etc.)\nLTS extreme statistics\nLTS chronological statistics\n\nFor regular res1d files the requirement is that the simulation start time of the first file matches the simulation end time of the second file (the same principle for subsequent files).\nFor LTS result files, meaningful merged result file is obtained when simulation periods for the files do not overlap.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfile_names\nlist of str or Res1D objects\nList of res1d file names to merge.\nrequired\n\n\nmerged_file_name\nstr\nFile name of the res1d file to store the merged data.\nrequired\n\n\n\n\n\n\n\nRes1D.modify(data_frame, file_path=None)\nModify the result data.\nNote that this only modifies the data in memory, not the original file. To save the modified data to a new file, use save. Alternatively, use file_path to save the modified data to a new file.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata_frame\npandas.DataFrame\npandas.DataFrame with the new data, with columns matching data generated by read.\nrequired\n\n\nfile_path\nstr\nFile path for the new res1d file. Optional.\nNone\n\n\n\n\n\n\nThis modifies the .NET ResutlData’s TimeData object.\n\n\n\n&gt;&gt;&gt; res = Res1D('results.res1d')\n&gt;&gt;&gt; data = res.read()\n&gt;&gt;&gt; data += 100\n&gt;&gt;&gt; res.modify(data)\n\n\n\n\nRes1D.read(queries=None, column_mode=None)\nRead result data into a pandas DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nqueries\nOptional[list[TimeSeriesId] | TimeSeriesId | list[QueryData] | QueryData]\nA list of queries to read. If None, all data is read.\nNone\n\n\ncolumn_mode\n('str', 'timeseries', 'compact', 'all')\nSpecifies the type of column index of returned DataFrame.\n'str'\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npd.DataFrame\n\n\n\n\n\n\n\nThe queries parameter exists for historical reasons where queries were built manually. Now, this is handled automatically e.g. res.nodes['node1'].WaterLevel.read(). It may still be useful so it has been kept for now.\n\n\n\n&gt;&gt;&gt; res = Res1D('results.res1d')\n&gt;&gt;&gt; res.read()\n\n\n\n\nRes1D.remove_derived_quantity(derived_quantity)\nRemove a derived quantity from the Res1D object, propogating changes to the network.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nderived_quantity\nDerivedQuantity | str\nDerived quantity to be removed. Either DerivedQuantity class or its name.\nrequired\n\n\n\n\n\n\n\nRes1D.save(file_path)\nSave the ResultData to a new res1d file.\nUseful for persisting modified data, as well as converting supported result file types (e.g. res11) into res1d.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfile_path\nstr | Path\nFile path for the new res1d file.\nrequired\n\n\n\n\n\n\n&gt;&gt;&gt; res11_data = Res1D('results.res11')\n&gt;&gt;&gt; res11_data.save('results.res1d')\n\n\n\n\nRes1D.to_csv(file_path, queries=None, time_step_skipping_number=1)\nExtract to csv file.\nSame as extract but with ext set to ‘csv’.\n\n\n\nRes1D.to_dataframe(queries=None, column_mode=None)\nRead result data into a pandas DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nqueries\nOptional[list[TimeSeriesId] | TimeSeriesId | list[QueryData] | QueryData]\nA list of queries to read. If None, all data is read.\nNone\n\n\ncolumn_mode\n('str', 'timeseries', 'compact', 'all')\nSpecifies the type of column index of returned DataFrame.\n'str'\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npd.DataFrame\n\n\n\n\n\n\n\n\nRes1D.to_dfs0(file_path, queries=None, time_step_skipping_number=1)\nExtract to dfs0 file.\nSame as extract but with ext set to ‘dfs0’.\n\n\n\nRes1D.to_txt(file_path, queries=None, time_step_skipping_number=1)\nExtract to txt file.\nSame as extract but with ext set to ‘txt’."
  },
  {
    "objectID": "api/Res1D.html#parameters",
    "href": "api/Res1D.html#parameters",
    "title": "Res1D",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nfile_path\nstr | Path\nFile path of the result file.\nNone\n\n\nreaches\nlist[str] | None\nReach IDs to include when pre-loading dynamic results. None includes all.\nNone\n\n\nnodes\nlist[str] | None\nNode IDs to include when pre-loading dynamic results. None includes all.\nNone\n\n\ncatchments\nlist[str] | None\nCatchment IDs to include when pre-loading dynamic results. None includes all.\nNone\n\n\ntime\nUnion[tuple[str], list[str], slice, None]\nStart and end time of the data to read. Using None will read all data.\nNone\n\n\nstep_every\nint | None\nNumber specifying the time step frequency to output. None outputs all time steps.\nNone\n\n\nquantities\nlist[str] | None\nQuantities to filter by (e.g. ‘WaterLevel’, ‘Discharge’). None includes all.\nNone\n\n\nderived_quantities\nlist[str] | None\nDerived quantities to include when pre-loading dynamic results. None includes all.\nNone"
  },
  {
    "objectID": "api/Res1D.html#examples",
    "href": "api/Res1D.html#examples",
    "title": "Res1D",
    "section": "",
    "text": "Read all data from a res1d file into a Pandas DataFrame:\n&gt;&gt;&gt; res = Res1D(\"results.res1d\")\n&gt;&gt;&gt; res.read()\nRead all available data for nodes:\n&gt;&gt;&gt; res1d.nodes.read()\nRead data for a specific node:\n&gt;&gt;&gt; res.nodes['node1'].read()\nRead data for a specific quantity:\n&gt;&gt;&gt; res.nodes['node1'].WaterLevel.read()\nFilter which data is pre-loaded, typically used for large files:\n&gt;&gt;&gt; nodes = ['node1', 'node2']\n&gt;&gt;&gt; reaches = ['reach1', 'reach2']\n&gt;&gt;&gt; times = slice('2020-01-01', '2020-01-02')\n&gt;&gt;&gt; res1d = Res1D('MyRes1D.res1d', nodes=nodes, reaches=reaches, time=times)\n&gt;&gt;&gt; res1d.read()\nOnly read every second time step:\n&gt;&gt;&gt; res1d = Res1D('MyRes1D.res1d', step_every=2)\n&gt;&gt;&gt; res1d.read()"
  },
  {
    "objectID": "api/Res1D.html#attributes",
    "href": "api/Res1D.html#attributes",
    "title": "Res1D",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncatchments\nCatchments of the result file. See ResultCatchments.\n\n\ndata\n.NET object ResultData with the loaded res1d data.\n\n\nderived_quantities\nDerived quantities available for res1d file.\n\n\nend_time\nEnd time of the result file.\n\n\nfile_path\nFile path of the result file.\n\n\nglobal_data\nGlobal data of the result file. See ResultGlobalDatas.\n\n\nnodes\nNodes of the result file. See ResultNodes.\n\n\nnumber_of_time_steps\nNumber of time steps in the result file.\n\n\nprojection_string\nProjection string of the result file.\n\n\nquantities\nQuantities in res1d file.\n\n\nquery\n.NET object ResultDataQuery to use for querying the loaded res1d data.\n\n\nreaches\nReaches of the result file. See ResultReaches.\n\n\nresult_data\n.NET object ResultData with the loaded res1d data.\n\n\nresult_type\nSpecifies what type of result file Res1D is.\n\n\nsearcher\n.NET object ResultDataSearcher to use for searching res1d data items on network.\n\n\nstart_time\nStart time of the result file.\n\n\nstructures\nStructures of the result file. See ResultStructures.\n\n\ntime_index\npandas.DatetimeIndex of the time index."
  },
  {
    "objectID": "api/Res1D.html#methods",
    "href": "api/Res1D.html#methods",
    "title": "Res1D",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd_derived_quantity\nAdd a derived quantity to the Res1D object, propogating changes to the network.\n\n\nextract\nExtract given queries to provided file.\n\n\nget_supported_file_extensions\nGet supported file extensions for Res1D.\n\n\ninfo\nPrint information about the result file.\n\n\nmerge\nMerge res1d files.\n\n\nmodify\nModify the result data.\n\n\nread\nRead result data into a pandas DataFrame.\n\n\nremove_derived_quantity\nRemove a derived quantity from the Res1D object, propogating changes to the network.\n\n\nsave\nSave the ResultData to a new res1d file.\n\n\nto_csv\nExtract to csv file.\n\n\nto_dataframe\nRead result data into a pandas DataFrame.\n\n\nto_dfs0\nExtract to dfs0 file.\n\n\nto_txt\nExtract to txt file.\n\n\n\n\n\nRes1D.add_derived_quantity(derived_quantity)\nAdd a derived quantity to the Res1D object, propogating changes to the network.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nderived_quantity\nType[DerivedQuantity]\nDerived quantity to be added\nrequired\n\n\n\n\n\n\n\nRes1D.extract(file_path, queries=None, time_step_skipping_number=1, ext=None)\nExtract given queries to provided file.\nFile type is determined from file_path extension. The supported formats are:\n\ncsv\ndfs0\ntxt\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfile_path\nstr\nOutput file path.\nrequired\n\n\nqueries\nOptional[List[QueryData] | QueryData | List[TimeSeriesId] | TimeSeriesId]\nA list of queries to read. If None, all data is read.\nNone\n\n\ntime_step_skipping_number\nint\nNumber specifying the time step frequency to output.\n1\n\n\next\nstr\nOutput file type to use instead of determining it from extension. Can be ‘csv’, ‘dfs0’, ‘txt’.\nNone\n\n\n\n\n\n\nThe queries parameter exists for historical reasons where queries were built manually. Now, this is handled automatically e.g. res.nodes['node1'].WaterLevel.read(). It may still be useful so it has been kept for now.\n\n\n\n\nRes1D.get_supported_file_extensions()\nGet supported file extensions for Res1D.\n\n\n\nRes1D.info()\nPrint information about the result file.\n\n\n\nRes1D.merge(file_names, merged_file_name)\nMerge res1d files.\nIt is possible to merge three kinds of result files:\n\nRegular res1d (HD, RR, etc.)\nLTS extreme statistics\nLTS chronological statistics\n\nFor regular res1d files the requirement is that the simulation start time of the first file matches the simulation end time of the second file (the same principle for subsequent files).\nFor LTS result files, meaningful merged result file is obtained when simulation periods for the files do not overlap.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfile_names\nlist of str or Res1D objects\nList of res1d file names to merge.\nrequired\n\n\nmerged_file_name\nstr\nFile name of the res1d file to store the merged data.\nrequired\n\n\n\n\n\n\n\nRes1D.modify(data_frame, file_path=None)\nModify the result data.\nNote that this only modifies the data in memory, not the original file. To save the modified data to a new file, use save. Alternatively, use file_path to save the modified data to a new file.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata_frame\npandas.DataFrame\npandas.DataFrame with the new data, with columns matching data generated by read.\nrequired\n\n\nfile_path\nstr\nFile path for the new res1d file. Optional.\nNone\n\n\n\n\n\n\nThis modifies the .NET ResutlData’s TimeData object.\n\n\n\n&gt;&gt;&gt; res = Res1D('results.res1d')\n&gt;&gt;&gt; data = res.read()\n&gt;&gt;&gt; data += 100\n&gt;&gt;&gt; res.modify(data)\n\n\n\n\nRes1D.read(queries=None, column_mode=None)\nRead result data into a pandas DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nqueries\nOptional[list[TimeSeriesId] | TimeSeriesId | list[QueryData] | QueryData]\nA list of queries to read. If None, all data is read.\nNone\n\n\ncolumn_mode\n('str', 'timeseries', 'compact', 'all')\nSpecifies the type of column index of returned DataFrame.\n'str'\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npd.DataFrame\n\n\n\n\n\n\n\nThe queries parameter exists for historical reasons where queries were built manually. Now, this is handled automatically e.g. res.nodes['node1'].WaterLevel.read(). It may still be useful so it has been kept for now.\n\n\n\n&gt;&gt;&gt; res = Res1D('results.res1d')\n&gt;&gt;&gt; res.read()\n\n\n\n\nRes1D.remove_derived_quantity(derived_quantity)\nRemove a derived quantity from the Res1D object, propogating changes to the network.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nderived_quantity\nDerivedQuantity | str\nDerived quantity to be removed. Either DerivedQuantity class or its name.\nrequired\n\n\n\n\n\n\n\nRes1D.save(file_path)\nSave the ResultData to a new res1d file.\nUseful for persisting modified data, as well as converting supported result file types (e.g. res11) into res1d.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfile_path\nstr | Path\nFile path for the new res1d file.\nrequired\n\n\n\n\n\n\n&gt;&gt;&gt; res11_data = Res1D('results.res11')\n&gt;&gt;&gt; res11_data.save('results.res1d')\n\n\n\n\nRes1D.to_csv(file_path, queries=None, time_step_skipping_number=1)\nExtract to csv file.\nSame as extract but with ext set to ‘csv’.\n\n\n\nRes1D.to_dataframe(queries=None, column_mode=None)\nRead result data into a pandas DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nqueries\nOptional[list[TimeSeriesId] | TimeSeriesId | list[QueryData] | QueryData]\nA list of queries to read. If None, all data is read.\nNone\n\n\ncolumn_mode\n('str', 'timeseries', 'compact', 'all')\nSpecifies the type of column index of returned DataFrame.\n'str'\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\npd.DataFrame\n\n\n\n\n\n\n\n\nRes1D.to_dfs0(file_path, queries=None, time_step_skipping_number=1)\nExtract to dfs0 file.\nSame as extract but with ext set to ‘dfs0’.\n\n\n\nRes1D.to_txt(file_path, queries=None, time_step_skipping_number=1)\nExtract to txt file.\nSame as extract but with ext set to ‘txt’."
  },
  {
    "objectID": "api/result_network.ResultReaches.html",
    "href": "api/result_network.ResultReaches.html",
    "title": "result_network.ResultReaches",
    "section": "",
    "text": "result_network.ResultReaches(self, res1d)\nClass for wrapping ResultData reaches.\nBy itself it is also a dict, which contains mapping between reach name and IRes1DReach object or a list of IRes1DReach objects.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nres1d\nRes1D\nRes1D object the reaches belong to.\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngroup\nThe TimeSeriesIdGroup associated with these locations.\n\n\nlocations\nA list of location objects (e.g. ).\n\n\nnames\nA list of location names (e.g. MUIDs).\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that these locations belong to.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nread\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\nto_geopandas\nConvert reaches to a geopandas.GeoDataFrame object.\n\n\n\n\n\nresult_network.ResultReaches.read(column_mode=None, include_derived=False)\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse\n\n\n\n\n\n\n\nresult_network.ResultReaches.to_dataframe(\n    column_mode=None,\n    include_derived=False,\n)\nRead the time series data for all quantities at these locations into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse\n\n\n\n\n\n\n\nresult_network.ResultReaches.to_geopandas(\n    agg=None,\n    agg_kwargs={},\n    segmented=True,\n    include_derived=False,\n)\nConvert reaches to a geopandas.GeoDataFrame object.\nBy default, quantities are not included. To include quantities, use the agg and agg_kwargs parameters.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nagg\nstr or callable\nDefines how to aggregate the quantities in time and space. Accepts any str or callable that is accepted by pandas.DataFrame.agg.\nNone\n\n\n\n\n\n\n- 'mean'  : mean value of all quantities\n- 'max'   : maximum value of all quantities\n-  np.max : maximum value of all quantities\nagg_kwargs : dict, default {} Aggregation function for specific column levels (e.g. {time=‘min’, chainage=‘first’}). segmented : bool, (default=True) True - one LineString per IRes1DReach object. False - one LineString per reach name. include_derived : bool, default False Include derived quantities.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ngdf\ngeopandas.GeoDataFrame\nA GeoDataFrame object with reaches as LineString geometries."
  },
  {
    "objectID": "api/result_network.ResultReaches.html#parameters",
    "href": "api/result_network.ResultReaches.html#parameters",
    "title": "result_network.ResultReaches",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nres1d\nRes1D\nRes1D object the reaches belong to.\nrequired"
  },
  {
    "objectID": "api/result_network.ResultReaches.html#attributes",
    "href": "api/result_network.ResultReaches.html#attributes",
    "title": "result_network.ResultReaches",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngroup\nThe TimeSeriesIdGroup associated with these locations.\n\n\nlocations\nA list of location objects (e.g. ).\n\n\nnames\nA list of location names (e.g. MUIDs).\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that these locations belong to."
  },
  {
    "objectID": "api/result_network.ResultReaches.html#methods",
    "href": "api/result_network.ResultReaches.html#methods",
    "title": "result_network.ResultReaches",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nread\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\nto_geopandas\nConvert reaches to a geopandas.GeoDataFrame object.\n\n\n\n\n\nresult_network.ResultReaches.read(column_mode=None, include_derived=False)\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse\n\n\n\n\n\n\n\nresult_network.ResultReaches.to_dataframe(\n    column_mode=None,\n    include_derived=False,\n)\nRead the time series data for all quantities at these locations into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse\n\n\n\n\n\n\n\nresult_network.ResultReaches.to_geopandas(\n    agg=None,\n    agg_kwargs={},\n    segmented=True,\n    include_derived=False,\n)\nConvert reaches to a geopandas.GeoDataFrame object.\nBy default, quantities are not included. To include quantities, use the agg and agg_kwargs parameters.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nagg\nstr or callable\nDefines how to aggregate the quantities in time and space. Accepts any str or callable that is accepted by pandas.DataFrame.agg.\nNone\n\n\n\n\n\n\n- 'mean'  : mean value of all quantities\n- 'max'   : maximum value of all quantities\n-  np.max : maximum value of all quantities\nagg_kwargs : dict, default {} Aggregation function for specific column levels (e.g. {time=‘min’, chainage=‘first’}). segmented : bool, (default=True) True - one LineString per IRes1DReach object. False - one LineString per reach name. include_derived : bool, default False Include derived quantities.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ngdf\ngeopandas.GeoDataFrame\nA GeoDataFrame object with reaches as LineString geometries."
  },
  {
    "objectID": "api/result_network.ResultGlobalDatas.html",
    "href": "api/result_network.ResultGlobalDatas.html",
    "title": "result_network.ResultGlobalDatas",
    "section": "",
    "text": "result_network.ResultGlobalDatas(self, res1d)\nClass for wrapping ResultData global data items.\nBy itself it is also a dict, which contains mapping between global data item quantity ID and IDataItem object.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nres1d\nRes1D\nRes1D object the catchments belong to.\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngroup\nThe TimeSeriesIdGroup associated with these locations.\n\n\nlocations\nA list of location objects (e.g. ).\n\n\nnames\nA list of location names (e.g. MUIDs).\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that these locations belong to.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nread\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\n\n\n\nresult_network.ResultGlobalDatas.read(column_mode=None, include_derived=False)\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse\n\n\n\n\n\n\n\nresult_network.ResultGlobalDatas.to_dataframe(\n    column_mode=None,\n    include_derived=False,\n)\nRead the time series data for all quantities at these locations into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse"
  },
  {
    "objectID": "api/result_network.ResultGlobalDatas.html#parameters",
    "href": "api/result_network.ResultGlobalDatas.html#parameters",
    "title": "result_network.ResultGlobalDatas",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nres1d\nRes1D\nRes1D object the catchments belong to.\nrequired"
  },
  {
    "objectID": "api/result_network.ResultGlobalDatas.html#attributes",
    "href": "api/result_network.ResultGlobalDatas.html#attributes",
    "title": "result_network.ResultGlobalDatas",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngroup\nThe TimeSeriesIdGroup associated with these locations.\n\n\nlocations\nA list of location objects (e.g. ).\n\n\nnames\nA list of location names (e.g. MUIDs).\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that these locations belong to."
  },
  {
    "objectID": "api/result_network.ResultGlobalDatas.html#methods",
    "href": "api/result_network.ResultGlobalDatas.html#methods",
    "title": "result_network.ResultGlobalDatas",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nread\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\n\n\n\nresult_network.ResultGlobalDatas.read(column_mode=None, include_derived=False)\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse\n\n\n\n\n\n\n\nresult_network.ResultGlobalDatas.to_dataframe(\n    column_mode=None,\n    include_derived=False,\n)\nRead the time series data for all quantities at these locations into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse"
  },
  {
    "objectID": "api/result_network.ResultGridPoint.html",
    "href": "api/result_network.ResultGridPoint.html",
    "title": "result_network.ResultGridPoint",
    "section": "",
    "text": "result_network.ResultGridPoint(\n    self,\n    reach,\n    gridpoint,\n    data_items,\n    result_reach,\n    res1d,\n    tag='',\n)\nClass for wrapping a single ResultData grid point.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nreach\nIRes1DReach\nMIKE 1D IRes1DReach object.\nrequired\n\n\ngridpoint\nIRes1DGridPoint\nMIKE 1D IRes1DGridPoint object.\nrequired\n\n\ndata_items\nlist of IDataItem objects\nA list of IDataItem objects (vector data object) the gridpoint has values defined on.\nrequired\n\n\nresult_reach\nResultReach\nInstance of ResultReach that this ResultGridPoint belongs to.\nrequired\n\n\nres1d\nRes1D\nRes1D object the grid point belongs to.\nrequired\n\n\ntag\nstr\nTag for reach location span where grid point belongs to.\n''\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nbottom_level\nBottom level of the gridpoint.\n\n\nchainage\nChainage of the gridpoint.\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngridpoint\nIRes1DGridPoint corresponding to this result location.\n\n\ngroup\nThe TimeSeriesIdGroup assosciated with this location.\n\n\nquantities\nA list of available quantities.\n\n\nreach\nInstance of ResultReach that this ResultGridPoint belongs to.\n\n\nreach_name\nName of reach the gridpoint is on.\n\n\nres1d\nThe Res1D instance that this location belongs to.\n\n\nres1d_gridpoint\nDHI.Mike1D.ResultDataAccess.IRes1DGridPoint corresponding to this result location.\n\n\nres1d_reach\nDHI.Mike1D.ResultDataAccess.IRes1DReach corresponding to this result location.\n\n\nresult_reach\nInstance of ResultReach that this ResultGridPoint belongs to.\n\n\nxcoord\nX coordinate of the gridpoint.\n\n\nycoord\nY coordinate of the gridpoint.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_query\nAdd a query to ResultNetwork.queries list.\n\n\nget_m1d_dataset\nGet IRes1DDataSet object associated with ResultGridPoint.\n\n\nget_query\nGet a QueryDataReach for given data item.\n\n\nread\nRead the time series data for all quantities at this location into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\nresult_network.ResultGridPoint.add_query(data_item)\nAdd a query to ResultNetwork.queries list.\n\n\n\nresult_network.ResultGridPoint.get_m1d_dataset(m1d_dataitem=None)\nGet IRes1DDataSet object associated with ResultGridPoint.\nThis is the reach IRes1DDataSet object because grid points do not have a corresponding IRes1DDataSet object.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm1d_dataitem\nIDataItem\nIgnored for ResultGridPoint.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nIRes1DDataSet\nIRes1DDataSet object associated with ResultGridPoint.\n\n\n\n\n\n\n\nresult_network.ResultGridPoint.get_query(data_item)\nGet a QueryDataReach for given data item.\n\n\n\nresult_network.ResultGridPoint.read(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultGridPoint.to_dataframe(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone"
  },
  {
    "objectID": "api/result_network.ResultGridPoint.html#parameters",
    "href": "api/result_network.ResultGridPoint.html#parameters",
    "title": "result_network.ResultGridPoint",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nreach\nIRes1DReach\nMIKE 1D IRes1DReach object.\nrequired\n\n\ngridpoint\nIRes1DGridPoint\nMIKE 1D IRes1DGridPoint object.\nrequired\n\n\ndata_items\nlist of IDataItem objects\nA list of IDataItem objects (vector data object) the gridpoint has values defined on.\nrequired\n\n\nresult_reach\nResultReach\nInstance of ResultReach that this ResultGridPoint belongs to.\nrequired\n\n\nres1d\nRes1D\nRes1D object the grid point belongs to.\nrequired\n\n\ntag\nstr\nTag for reach location span where grid point belongs to.\n''"
  },
  {
    "objectID": "api/result_network.ResultGridPoint.html#attributes",
    "href": "api/result_network.ResultGridPoint.html#attributes",
    "title": "result_network.ResultGridPoint",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nbottom_level\nBottom level of the gridpoint.\n\n\nchainage\nChainage of the gridpoint.\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngridpoint\nIRes1DGridPoint corresponding to this result location.\n\n\ngroup\nThe TimeSeriesIdGroup assosciated with this location.\n\n\nquantities\nA list of available quantities.\n\n\nreach\nInstance of ResultReach that this ResultGridPoint belongs to.\n\n\nreach_name\nName of reach the gridpoint is on.\n\n\nres1d\nThe Res1D instance that this location belongs to.\n\n\nres1d_gridpoint\nDHI.Mike1D.ResultDataAccess.IRes1DGridPoint corresponding to this result location.\n\n\nres1d_reach\nDHI.Mike1D.ResultDataAccess.IRes1DReach corresponding to this result location.\n\n\nresult_reach\nInstance of ResultReach that this ResultGridPoint belongs to.\n\n\nxcoord\nX coordinate of the gridpoint.\n\n\nycoord\nY coordinate of the gridpoint."
  },
  {
    "objectID": "api/result_network.ResultGridPoint.html#methods",
    "href": "api/result_network.ResultGridPoint.html#methods",
    "title": "result_network.ResultGridPoint",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd_query\nAdd a query to ResultNetwork.queries list.\n\n\nget_m1d_dataset\nGet IRes1DDataSet object associated with ResultGridPoint.\n\n\nget_query\nGet a QueryDataReach for given data item.\n\n\nread\nRead the time series data for all quantities at this location into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\nresult_network.ResultGridPoint.add_query(data_item)\nAdd a query to ResultNetwork.queries list.\n\n\n\nresult_network.ResultGridPoint.get_m1d_dataset(m1d_dataitem=None)\nGet IRes1DDataSet object associated with ResultGridPoint.\nThis is the reach IRes1DDataSet object because grid points do not have a corresponding IRes1DDataSet object.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm1d_dataitem\nIDataItem\nIgnored for ResultGridPoint.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nIRes1DDataSet\nIRes1DDataSet object associated with ResultGridPoint.\n\n\n\n\n\n\n\nresult_network.ResultGridPoint.get_query(data_item)\nGet a QueryDataReach for given data item.\n\n\n\nresult_network.ResultGridPoint.read(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultGridPoint.to_dataframe(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone"
  },
  {
    "objectID": "api/result_network.ResultNodes.html",
    "href": "api/result_network.ResultNodes.html",
    "title": "result_network.ResultNodes",
    "section": "",
    "text": "result_network.ResultNodes(self, res1d)\nClass for wrapping ResultData nodes.\nBy itself it is also a dict, which contains mapping between node ID and IRes1DNode object.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nres1d\nRes1D\nRes1D object the nodes belong to.\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngroup\nThe TimeSeriesIdGroup associated with these locations.\n\n\nlocations\nA list of location objects (e.g. ).\n\n\nnames\nA list of location names (e.g. MUIDs).\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that these locations belong to.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nread\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\nto_geopandas\nConvert nodes to a geopandas.GeoDataFrame, optionally with quantities.\n\n\n\n\n\nresult_network.ResultNodes.read(column_mode=None, include_derived=False)\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse\n\n\n\n\n\n\n\nresult_network.ResultNodes.to_dataframe(column_mode=None, include_derived=False)\nRead the time series data for all quantities at these locations into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse\n\n\n\n\n\n\n\nresult_network.ResultNodes.to_geopandas(\n    agg=None,\n    agg_kwargs={},\n    include_derived=False,\n)\nConvert nodes to a geopandas.GeoDataFrame, optionally with quantities.\nBy default, quantities are not included. To include quantities, use the agg and agg_kwargs parameters.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nagg\nstr or callable\nDefines how to aggregate the quantities in time and space. Accepts any str or callable that is accepted by pandas.DataFrame.agg.\nNone\n\n\n\n\n\n\n- 'mean'  : mean value of all quantities\n- 'max'   : maximum value of all quantities\n-  np.max : maximum value of all quantities\nagg_kwargs : dict, default {} Aggregation function for specific column levels (e.g. {time=‘min’, chainage=‘first’}). include_derived: bool, default False Include derived quantities.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ngdf\ngeopandas.GeoDataFrame\nA GeoDataFrame object with nodes as Point geometries."
  },
  {
    "objectID": "api/result_network.ResultNodes.html#parameters",
    "href": "api/result_network.ResultNodes.html#parameters",
    "title": "result_network.ResultNodes",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nres1d\nRes1D\nRes1D object the nodes belong to.\nrequired"
  },
  {
    "objectID": "api/result_network.ResultNodes.html#attributes",
    "href": "api/result_network.ResultNodes.html#attributes",
    "title": "result_network.ResultNodes",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngroup\nThe TimeSeriesIdGroup associated with these locations.\n\n\nlocations\nA list of location objects (e.g. ).\n\n\nnames\nA list of location names (e.g. MUIDs).\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that these locations belong to."
  },
  {
    "objectID": "api/result_network.ResultNodes.html#methods",
    "href": "api/result_network.ResultNodes.html#methods",
    "title": "result_network.ResultNodes",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nread\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\nto_geopandas\nConvert nodes to a geopandas.GeoDataFrame, optionally with quantities.\n\n\n\n\n\nresult_network.ResultNodes.read(column_mode=None, include_derived=False)\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse\n\n\n\n\n\n\n\nresult_network.ResultNodes.to_dataframe(column_mode=None, include_derived=False)\nRead the time series data for all quantities at these locations into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse\n\n\n\n\n\n\n\nresult_network.ResultNodes.to_geopandas(\n    agg=None,\n    agg_kwargs={},\n    include_derived=False,\n)\nConvert nodes to a geopandas.GeoDataFrame, optionally with quantities.\nBy default, quantities are not included. To include quantities, use the agg and agg_kwargs parameters.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nagg\nstr or callable\nDefines how to aggregate the quantities in time and space. Accepts any str or callable that is accepted by pandas.DataFrame.agg.\nNone\n\n\n\n\n\n\n- 'mean'  : mean value of all quantities\n- 'max'   : maximum value of all quantities\n-  np.max : maximum value of all quantities\nagg_kwargs : dict, default {} Aggregation function for specific column levels (e.g. {time=‘min’, chainage=‘first’}). include_derived: bool, default False Include derived quantities.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ngdf\ngeopandas.GeoDataFrame\nA GeoDataFrame object with nodes as Point geometries."
  },
  {
    "objectID": "api/cross_sections.CrossSection.html",
    "href": "api/cross_sections.CrossSection.html",
    "title": "cross_sections.CrossSection",
    "section": "",
    "text": "cross_sections.CrossSection(self, m1d_cross_section)\nA cross section in MIKE 1D, uniquely identified by a location ID, chainage, and topo ID.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm1d_cross_section\nICrossSection\nThe MIKE 1D cross section object.\nrequired\n\n\n\n\n\n\nSupport is currently limited to open cross sections with raw data.\n\n\n\n&gt;&gt;&gt; from mikeio1d.cross_sections import CrossSection\n&gt;&gt;&gt; x = [0, 10, 20, 30, 40, 50]\n&gt;&gt;&gt; z = [0, 2, 3, 4, 3, 0]\n&gt;&gt;&gt; cs = CrossSection.from_xz(x, z, location_id=\"loc1\", chainage=100, topo_id=\"topo1\")\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nbottom_level\nBottom level of the cross section.\n\n\nchainage\nChainage of the cross section.\n\n\ncoords\nGet the geographical coordinates of the cross section line.\n\n\ngeometry\nThe geographical geometry of the cross section line.\n\n\nheight\nHeight of the cross section.\n\n\ninterpolated\nIs the cross section interpolated? (i.e. not measured).\n\n\nis_open\nIs the cross section open? (i.e. not closed).\n\n\nlocation\nLocation of the cross section (DHI.Mike1D.Generic.ZLocation object).\n\n\nlocation_id\nLocation ID of the cross section.\n\n\nm1d_cross_section\nThe DHI.Mike1D.CrossSectionModule.ICrossSection object that CrossSection wraps.\n\n\nmarkers\npandas.DataFrame: The markers of the cross section as a pandas DataFrame.\n\n\nmax_width\nMaximum width of the cross section.\n\n\nmin_water_depth\nMinimum water depth of the cross section.\n\n\nnumber_of_processing_levels\nint: The number of levels used in the processed data.\n\n\nprocessed\npandas.DataFrame: The processed cross section data as a pandas DataFrame.\n\n\nprocessed_allow_recompute\nbool: Whether the processed data can be recomputed (e.g. if the raw data has changed).\n\n\nprocessing_levels\ntuple[float]: A tuple of the level elevations used in the processed data.\n\n\nprocessing_levels_method\nint, ProcessLevelMethod: The method used to generate processing levels.\n\n\nradius_type\nint, RadiusType: The type of hydraulic radius used in the cross section.\n\n\nraw\npandas.DataFrame: The raw cross section data as a pandas DataFrame.\n\n\nresistance_distribution\nint, ResistanceDistribution: The distribution of resistance used in the cross section.\n\n\nresistance_left_high_flow\nfloat: Resistance for the left high flow zone.\n\n\nresistance_low_flow\nfloat: Resistance for the low flow zone.\n\n\nresistance_right_high_flow\nfloat: Resistance for the right high flow zone.\n\n\nresistance_type\nint, ResistanceType: The type of resistance used by the cross section.\n\n\ntopo_id\nTopo ID of the cross section.\n\n\nzmax\nMaximum elevation of the cross section.\n\n\nzmin\nMinimum elevation of the cross section.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nfrom_xz\nCreate an open cross section from xz data.\n\n\nplot\nPlot the cross section.\n\n\nrecompute_processed\nRecompute the processed data.\n\n\nset_marker\nSet a marker at the point nearest to the specified x, z coordinates.\n\n\nunset_marker\nRemove the specified marker from the cross section.\n\n\n\n\n\ncross_sections.CrossSection.from_xz(\n    x,\n    z,\n    location_id,\n    chainage,\n    topo_id,\n    default_markers=True,\n)\nCreate an open cross section from xz data.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nIterable[float]\nThe x coordinates of the cross section.\nrequired\n\n\nz\nIterable[float]\nThe z coordinates of the cross section.\nrequired\n\n\nlocation_id\nstr\nLocation ID of the cross section.\nrequired\n\n\nchainage\nfloat\nChainage of the cross section.\nrequired\n\n\ntopo_id\nstr\nTopo ID of the cross section.\nrequired\n\n\ndefault_markers\nbool\nIf True, default markers will be added to the cross section.\nTrue\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ncross_section\nCrossSection\n\n\n\n\n\n\n\n\ncross_sections.CrossSection.plot(\n    ax=None,\n    with_markers=True,\n    with_marker_labels=True,\n    **kwargs,\n)\nPlot the cross section.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nax\nmatplotlib.axes.Axes\nThe axes to plot to. If not provided, a new figure will be created.\nNone\n\n\nwith_markers\nbool\nIf True, markers will be plotted.\nTrue\n\n\nwith_marker_labels\nbool\nIf True, marker labels will be plotted. Ignored if with_markers is False.\nTrue\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nax\nmatplotlib.axes.Axes\nThe axes that was plotted to.\n\n\n\n\n\n\n\ncross_sections.CrossSection.recompute_processed()\nRecompute the processed data.\n\n\nIn most cases this is not necessary as it will be done automatically when the raw data changes. If processed_allow_recompute is set to False, then this will do nothing.\n\n\n\n\ncross_sections.CrossSection.set_marker(marker, x, z=None)\nSet a marker at the point nearest to the specified x, z coordinates.\nNote: if z is not provided, the nearest point in the x direction will be found.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmarker\nint | Marker\nThe marker to set.\nrequired\n\n\nx\nfloat\nThe x coordinate of the point.\nrequired\n\n\nz\nfloat (default: None)\nThe z coordinate of the point.\nNone\n\n\n\n\n\n\n&gt;&gt;&gt; from mikeio1d.cross_sections import Marker\n&gt;&gt;&gt; cs.set_marker(Marker.LEFT_LEVEE_BANK, 10)\n# The LEFT_LEVEE_BANK marker has been set at the point nearest to x=10.\n&gt;&gt;&gt; cs.set_marker(99, 10, 5)\n# A user-defined marker (99) has been set at the point nearest to x=10, z=5.\n\n\n\n\ncross_sections.CrossSection.unset_marker(marker)\nRemove the specified marker from the cross section.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmarker\nint | Marker\nThe marker to remove.\nrequired\n\n\n\n\n\n\n&gt;&gt;&gt; cs.unset_marker(99)\n# The user-defined marker (99) has been removed from the cross section.\n&gt;&gt;&gt; cs.unset_marker(Marker.LEFT_LEVEE_BANK)\n# The LEFT_LEVEE_BANK marker has been removed from the cross section."
  },
  {
    "objectID": "api/cross_sections.CrossSection.html#parameters",
    "href": "api/cross_sections.CrossSection.html#parameters",
    "title": "cross_sections.CrossSection",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nm1d_cross_section\nICrossSection\nThe MIKE 1D cross section object.\nrequired"
  },
  {
    "objectID": "api/cross_sections.CrossSection.html#notes",
    "href": "api/cross_sections.CrossSection.html#notes",
    "title": "cross_sections.CrossSection",
    "section": "",
    "text": "Support is currently limited to open cross sections with raw data."
  },
  {
    "objectID": "api/cross_sections.CrossSection.html#examples",
    "href": "api/cross_sections.CrossSection.html#examples",
    "title": "cross_sections.CrossSection",
    "section": "",
    "text": "&gt;&gt;&gt; from mikeio1d.cross_sections import CrossSection\n&gt;&gt;&gt; x = [0, 10, 20, 30, 40, 50]\n&gt;&gt;&gt; z = [0, 2, 3, 4, 3, 0]\n&gt;&gt;&gt; cs = CrossSection.from_xz(x, z, location_id=\"loc1\", chainage=100, topo_id=\"topo1\")"
  },
  {
    "objectID": "api/cross_sections.CrossSection.html#attributes",
    "href": "api/cross_sections.CrossSection.html#attributes",
    "title": "cross_sections.CrossSection",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nbottom_level\nBottom level of the cross section.\n\n\nchainage\nChainage of the cross section.\n\n\ncoords\nGet the geographical coordinates of the cross section line.\n\n\ngeometry\nThe geographical geometry of the cross section line.\n\n\nheight\nHeight of the cross section.\n\n\ninterpolated\nIs the cross section interpolated? (i.e. not measured).\n\n\nis_open\nIs the cross section open? (i.e. not closed).\n\n\nlocation\nLocation of the cross section (DHI.Mike1D.Generic.ZLocation object).\n\n\nlocation_id\nLocation ID of the cross section.\n\n\nm1d_cross_section\nThe DHI.Mike1D.CrossSectionModule.ICrossSection object that CrossSection wraps.\n\n\nmarkers\npandas.DataFrame: The markers of the cross section as a pandas DataFrame.\n\n\nmax_width\nMaximum width of the cross section.\n\n\nmin_water_depth\nMinimum water depth of the cross section.\n\n\nnumber_of_processing_levels\nint: The number of levels used in the processed data.\n\n\nprocessed\npandas.DataFrame: The processed cross section data as a pandas DataFrame.\n\n\nprocessed_allow_recompute\nbool: Whether the processed data can be recomputed (e.g. if the raw data has changed).\n\n\nprocessing_levels\ntuple[float]: A tuple of the level elevations used in the processed data.\n\n\nprocessing_levels_method\nint, ProcessLevelMethod: The method used to generate processing levels.\n\n\nradius_type\nint, RadiusType: The type of hydraulic radius used in the cross section.\n\n\nraw\npandas.DataFrame: The raw cross section data as a pandas DataFrame.\n\n\nresistance_distribution\nint, ResistanceDistribution: The distribution of resistance used in the cross section.\n\n\nresistance_left_high_flow\nfloat: Resistance for the left high flow zone.\n\n\nresistance_low_flow\nfloat: Resistance for the low flow zone.\n\n\nresistance_right_high_flow\nfloat: Resistance for the right high flow zone.\n\n\nresistance_type\nint, ResistanceType: The type of resistance used by the cross section.\n\n\ntopo_id\nTopo ID of the cross section.\n\n\nzmax\nMaximum elevation of the cross section.\n\n\nzmin\nMinimum elevation of the cross section."
  },
  {
    "objectID": "api/cross_sections.CrossSection.html#methods",
    "href": "api/cross_sections.CrossSection.html#methods",
    "title": "cross_sections.CrossSection",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nfrom_xz\nCreate an open cross section from xz data.\n\n\nplot\nPlot the cross section.\n\n\nrecompute_processed\nRecompute the processed data.\n\n\nset_marker\nSet a marker at the point nearest to the specified x, z coordinates.\n\n\nunset_marker\nRemove the specified marker from the cross section.\n\n\n\n\n\ncross_sections.CrossSection.from_xz(\n    x,\n    z,\n    location_id,\n    chainage,\n    topo_id,\n    default_markers=True,\n)\nCreate an open cross section from xz data.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nIterable[float]\nThe x coordinates of the cross section.\nrequired\n\n\nz\nIterable[float]\nThe z coordinates of the cross section.\nrequired\n\n\nlocation_id\nstr\nLocation ID of the cross section.\nrequired\n\n\nchainage\nfloat\nChainage of the cross section.\nrequired\n\n\ntopo_id\nstr\nTopo ID of the cross section.\nrequired\n\n\ndefault_markers\nbool\nIf True, default markers will be added to the cross section.\nTrue\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ncross_section\nCrossSection\n\n\n\n\n\n\n\n\ncross_sections.CrossSection.plot(\n    ax=None,\n    with_markers=True,\n    with_marker_labels=True,\n    **kwargs,\n)\nPlot the cross section.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nax\nmatplotlib.axes.Axes\nThe axes to plot to. If not provided, a new figure will be created.\nNone\n\n\nwith_markers\nbool\nIf True, markers will be plotted.\nTrue\n\n\nwith_marker_labels\nbool\nIf True, marker labels will be plotted. Ignored if with_markers is False.\nTrue\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nax\nmatplotlib.axes.Axes\nThe axes that was plotted to.\n\n\n\n\n\n\n\ncross_sections.CrossSection.recompute_processed()\nRecompute the processed data.\n\n\nIn most cases this is not necessary as it will be done automatically when the raw data changes. If processed_allow_recompute is set to False, then this will do nothing.\n\n\n\n\ncross_sections.CrossSection.set_marker(marker, x, z=None)\nSet a marker at the point nearest to the specified x, z coordinates.\nNote: if z is not provided, the nearest point in the x direction will be found.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmarker\nint | Marker\nThe marker to set.\nrequired\n\n\nx\nfloat\nThe x coordinate of the point.\nrequired\n\n\nz\nfloat (default: None)\nThe z coordinate of the point.\nNone\n\n\n\n\n\n\n&gt;&gt;&gt; from mikeio1d.cross_sections import Marker\n&gt;&gt;&gt; cs.set_marker(Marker.LEFT_LEVEE_BANK, 10)\n# The LEFT_LEVEE_BANK marker has been set at the point nearest to x=10.\n&gt;&gt;&gt; cs.set_marker(99, 10, 5)\n# A user-defined marker (99) has been set at the point nearest to x=10, z=5.\n\n\n\n\ncross_sections.CrossSection.unset_marker(marker)\nRemove the specified marker from the cross section.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmarker\nint | Marker\nThe marker to remove.\nrequired\n\n\n\n\n\n\n&gt;&gt;&gt; cs.unset_marker(99)\n# The user-defined marker (99) has been removed from the cross section.\n&gt;&gt;&gt; cs.unset_marker(Marker.LEFT_LEVEE_BANK)\n# The LEFT_LEVEE_BANK marker has been removed from the cross section."
  },
  {
    "objectID": "api/result_network.ResultGlobalData.html",
    "href": "api/result_network.ResultGlobalData.html",
    "title": "result_network.ResultGlobalData",
    "section": "",
    "text": "result_network.ResultGlobalData(self, data_item, global_datas, res1d)\nClass for wrapping ResultData global data items.\nBy itself it is also a dict, which contains mapping between data item quantity ID and IDataItem object.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata_item\nIDataItem\nMIKE 1D IDataItem object for a global data item.\nrequired\n\n\nglobal_datas\nResultGlobalDatas object.\nA wrapper object for all global data items.\nrequired\n\n\nres1d\nRes1D\nRes1D object the global data belongs to.\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngroup\nThe TimeSeriesIdGroup assosciated with this location.\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that this location belongs to.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_query\nAdd a query to ResultNetwork.queries list.\n\n\nget_m1d_dataset\nGet IRes1DDataSet object associated with ResultGlobalData.\n\n\nget_query\nGet a QueryDataGlobal for given data item.\n\n\nread\nRead the time series data for all quantities at this location into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\nresult_network.ResultGlobalData.add_query(data_item)\nAdd a query to ResultNetwork.queries list.\n\n\n\nresult_network.ResultGlobalData.get_m1d_dataset(m1d_dataitem=None)\nGet IRes1DDataSet object associated with ResultGlobalData.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm1d_dataitem\nIDataItem\nIgnored for ResultGlobalData.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nIRes1DDataSet\nIRes1DDataSet object associated with ResultGlobalData.\n\n\n\n\n\n\n\nresult_network.ResultGlobalData.get_query(data_item)\nGet a QueryDataGlobal for given data item.\n\n\n\nresult_network.ResultGlobalData.read(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultGlobalData.to_dataframe(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone"
  },
  {
    "objectID": "api/result_network.ResultGlobalData.html#parameters",
    "href": "api/result_network.ResultGlobalData.html#parameters",
    "title": "result_network.ResultGlobalData",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndata_item\nIDataItem\nMIKE 1D IDataItem object for a global data item.\nrequired\n\n\nglobal_datas\nResultGlobalDatas object.\nA wrapper object for all global data items.\nrequired\n\n\nres1d\nRes1D\nRes1D object the global data belongs to.\nrequired"
  },
  {
    "objectID": "api/result_network.ResultGlobalData.html#attributes",
    "href": "api/result_network.ResultGlobalData.html#attributes",
    "title": "result_network.ResultGlobalData",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngroup\nThe TimeSeriesIdGroup assosciated with this location.\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that this location belongs to."
  },
  {
    "objectID": "api/result_network.ResultGlobalData.html#methods",
    "href": "api/result_network.ResultGlobalData.html#methods",
    "title": "result_network.ResultGlobalData",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd_query\nAdd a query to ResultNetwork.queries list.\n\n\nget_m1d_dataset\nGet IRes1DDataSet object associated with ResultGlobalData.\n\n\nget_query\nGet a QueryDataGlobal for given data item.\n\n\nread\nRead the time series data for all quantities at this location into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\nresult_network.ResultGlobalData.add_query(data_item)\nAdd a query to ResultNetwork.queries list.\n\n\n\nresult_network.ResultGlobalData.get_m1d_dataset(m1d_dataitem=None)\nGet IRes1DDataSet object associated with ResultGlobalData.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm1d_dataitem\nIDataItem\nIgnored for ResultGlobalData.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nIRes1DDataSet\nIRes1DDataSet object associated with ResultGlobalData.\n\n\n\n\n\n\n\nresult_network.ResultGlobalData.get_query(data_item)\nGet a QueryDataGlobal for given data item.\n\n\n\nresult_network.ResultGlobalData.read(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultGlobalData.to_dataframe(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone"
  },
  {
    "objectID": "examples/xns11_basic.html",
    "href": "examples/xns11_basic.html",
    "title": "Xns11 - basic",
    "section": "",
    "text": "import mikeio1d\nxns = mikeio1d.open(\"../data/mikep_cs_demo.xns11\")\nxns\n\n&lt;mikeio1d.Xns11 (103)&gt;\n\n\n\nxns.to_dataframe().head()\n\n\n\n\n\n\n\n\n\n\ncross_section\n\n\nlocation_id\nchainage\ntopo_id\n\n\n\n\n\nbasin_left1\n2.004\n1\n&lt;CrossSection: basin_left1, 2.004, 1&gt;\n\n\n33.774\n1\n&lt;CrossSection: basin_left1, 33.774, 1&gt;\n\n\n80.945\n1\n&lt;CrossSection: basin_left1, 80.945, 1&gt;\n\n\n122.042\n1\n&lt;CrossSection: basin_left1, 122.042, 1&gt;\n\n\n166.107\n1\n&lt;CrossSection: basin_left1, 166.107, 1&gt;",
    "crumbs": [
      "Home",
      "Examples",
      "Xns11 - basic"
    ]
  },
  {
    "objectID": "examples/xns11_basic.html#overview",
    "href": "examples/xns11_basic.html#overview",
    "title": "Xns11 - basic",
    "section": "",
    "text": "import mikeio1d\nxns = mikeio1d.open(\"../data/mikep_cs_demo.xns11\")\nxns\n\n&lt;mikeio1d.Xns11 (103)&gt;\n\n\n\nxns.to_dataframe().head()\n\n\n\n\n\n\n\n\n\n\ncross_section\n\n\nlocation_id\nchainage\ntopo_id\n\n\n\n\n\nbasin_left1\n2.004\n1\n&lt;CrossSection: basin_left1, 2.004, 1&gt;\n\n\n33.774\n1\n&lt;CrossSection: basin_left1, 33.774, 1&gt;\n\n\n80.945\n1\n&lt;CrossSection: basin_left1, 80.945, 1&gt;\n\n\n122.042\n1\n&lt;CrossSection: basin_left1, 122.042, 1&gt;\n\n\n166.107\n1\n&lt;CrossSection: basin_left1, 166.107, 1&gt;",
    "crumbs": [
      "Home",
      "Examples",
      "Xns11 - basic"
    ]
  },
  {
    "objectID": "examples/xns11_basic.html#plotting",
    "href": "examples/xns11_basic.html#plotting",
    "title": "Xns11 - basic",
    "section": "Plotting",
    "text": "Plotting\n\nxns['basin_left1','122.042','1'].plot()",
    "crumbs": [
      "Home",
      "Examples",
      "Xns11 - basic"
    ]
  },
  {
    "objectID": "examples/xns11_basic.html#extracting-data",
    "href": "examples/xns11_basic.html#extracting-data",
    "title": "Xns11 - basic",
    "section": "Extracting data",
    "text": "Extracting data\n\nxns['basin_left1','122.042','1'].raw.head()\n\n\n\n\n\n\n\n\nmarkers\nmarker_labels\nx\nz\nresistance\n\n\n\n\n0\n\n\n0.000\n4059.508\n25.0\n\n\n1\n\n\n2.062\n4059.624\n25.0\n\n\n2\n1\nLeft Levee Bank (1)\n4.124\n4059.754\n25.0\n\n\n3\n\n\n6.186\n4059.607\n25.0\n\n\n4\n\n\n14.435\n4058.882\n25.0\n\n\n\n\n\n\n\n\nxns['basin_left1','122.042','1'].markers\n\n\n\n\n\n\n\n\nmarker\nmarker_label\nx\nz\n\n\n\n\n0\n1\nLeft Levee Bank (1)\n4.124\n4059.754\n\n\n1\n2\nLowest Point (2)\n72.914\n4052.803\n\n\n2\n3\nRight Levee Bank (3)\n195.897\n4057.989\n\n\n3\n4\nLeft Low Flow Bank (4)\n71.119\n4053.263\n\n\n4\n5\nRight Low Flow Bank (5)\n74.003\n4053.357\n\n\n\n\n\n\n\n\nxns['basin_left1','122.042','1'].processed.head()\n\n\n\n\n\n\n\n\nlevel\nflow_area\nradius\nstorage_width\nadditional_storage_area\nresistance\nconveyance_factor\n\n\n\n\n0\n4052.803000\n0.000000\n0.000000\n0.000000\n0.0\n25.0\n0.000000\n\n\n1\n4052.944857\n0.160191\n0.075978\n2.743476\n0.0\n25.0\n0.718409\n\n\n2\n4053.086714\n0.790062\n0.165315\n6.136873\n0.0\n25.0\n5.949433\n\n\n3\n4053.228571\n3.633195\n0.172199\n29.866016\n0.0\n25.0\n28.113531\n\n\n4\n4053.370429\n9.264321\n0.251109\n50.128968\n0.0\n25.0\n92.185348",
    "crumbs": [
      "Home",
      "Examples",
      "Xns11 - basic"
    ]
  },
  {
    "objectID": "examples/xns11_basic.html#selecting-cross-sections",
    "href": "examples/xns11_basic.html#selecting-cross-sections",
    "title": "Xns11 - basic",
    "section": "Selecting cross sections",
    "text": "Selecting cross sections\n\nxns['basin_left1','122.042','1']\n\n&lt;CrossSection: basin_left1, 122.042, 1&gt;\n\n\n\nxns.sel(location_id='basin_left1', chainage=122.042, topo_id='1')\n\n&lt;CrossSection: basin_left1, 122.042, 1&gt;\n\n\n\n# Use ':' or '...' as a wildcard to return a list of sections\nxns['basin_left1', :, '1']\n\n[&lt;CrossSection: basin_left1, 2.004, 1&gt;,\n &lt;CrossSection: basin_left1, 33.774, 1&gt;,\n &lt;CrossSection: basin_left1, 80.945, 1&gt;,\n &lt;CrossSection: basin_left1, 122.042, 1&gt;,\n &lt;CrossSection: basin_left1, 166.107, 1&gt;,\n &lt;CrossSection: basin_left1, 184.886, 1&gt;,\n &lt;CrossSection: basin_left1, 210.212, 1&gt;,\n &lt;CrossSection: basin_left1, 264.614, 1&gt;,\n &lt;CrossSection: basin_left1, 284.638, 1&gt;,\n &lt;CrossSection: basin_left1, 341.152, 1&gt;,\n &lt;CrossSection: basin_left1, 413.617, 1&gt;,\n &lt;CrossSection: basin_left1, 481.451, 1&gt;]\n\n\n\n# Similar to above, but using the 'sel' method.\nxns.sel(location_id='basin_left1')\n\n[&lt;CrossSection: basin_left1, 2.004, 1&gt;,\n &lt;CrossSection: basin_left1, 33.774, 1&gt;,\n &lt;CrossSection: basin_left1, 80.945, 1&gt;,\n &lt;CrossSection: basin_left1, 122.042, 1&gt;,\n &lt;CrossSection: basin_left1, 166.107, 1&gt;,\n &lt;CrossSection: basin_left1, 184.886, 1&gt;,\n &lt;CrossSection: basin_left1, 210.212, 1&gt;,\n &lt;CrossSection: basin_left1, 264.614, 1&gt;,\n &lt;CrossSection: basin_left1, 284.638, 1&gt;,\n &lt;CrossSection: basin_left1, 341.152, 1&gt;,\n &lt;CrossSection: basin_left1, 413.617, 1&gt;,\n &lt;CrossSection: basin_left1, 481.451, 1&gt;]\n\n\n\n# Combine multiple cross sections into one plot.\nfrom mikeio1d import Xns11\n\ncross_sections = [*xns['basin_left1','481.451', ...], *xns['basin_left1','166.107', ...]]\ncross_sections = Xns11(cross_sections)\ncross_sections.plot()",
    "crumbs": [
      "Home",
      "Examples",
      "Xns11 - basic"
    ]
  },
  {
    "objectID": "examples/xns11_basic.html#creating-cross-sections",
    "href": "examples/xns11_basic.html#creating-cross-sections",
    "title": "Xns11 - basic",
    "section": "Creating cross sections",
    "text": "Creating cross sections\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom mikeio1d.xns11 import CrossSection\n\n\nn_points = 11\nx = np.linspace(0, 100, n_points)\nz = 10**-3 * (x-50)**2\nplt.grid(True)\nplt.plot(x, z)\n\n\n\n\n\n\n\n\n\nlocation_id = \"my_reach\"\nchainage = 100.0\ntopo_id = \"my_topo\"\n\nxs = CrossSection.from_xz(x, z, location_id, chainage, topo_id)\nxs.plot()",
    "crumbs": [
      "Home",
      "Examples",
      "Xns11 - basic"
    ]
  },
  {
    "objectID": "examples/xns11_basic.html#writing-xns11-files",
    "href": "examples/xns11_basic.html#writing-xns11-files",
    "title": "Xns11 - basic",
    "section": "Writing Xns11 files",
    "text": "Writing Xns11 files\n\nxns_custom = Xns11()\nxns_custom.add(xs)\nxns_custom.write(\"my_custom.xns11\")\nxns_custom.to_dataframe()\n\n\n\n\n\n\n\n\n\n\ncross_section\n\n\nlocation_id\nchainage\ntopo_id\n\n\n\n\n\nmy_reach\n100.000\nmy_topo\n&lt;CrossSection: my_reach, 100.000, my_topo&gt;\n\n\n\n\n\n\n\n\n# Subset an existing Xns11 file\nsubset = xns.sel(location_id='basin_left1')\nxns_subset = Xns11(subset)\nxns_subset.write(\"my_subset.xns11\")\nxns_subset.to_dataframe()\n\n\n\n\n\n\n\n\n\n\ncross_section\n\n\nlocation_id\nchainage\ntopo_id\n\n\n\n\n\nbasin_left1\n2.004\n1\n&lt;CrossSection: basin_left1, 2.004, 1&gt;\n\n\n33.774\n1\n&lt;CrossSection: basin_left1, 33.774, 1&gt;\n\n\n80.945\n1\n&lt;CrossSection: basin_left1, 80.945, 1&gt;\n\n\n122.042\n1\n&lt;CrossSection: basin_left1, 122.042, 1&gt;\n\n\n166.107\n1\n&lt;CrossSection: basin_left1, 166.107, 1&gt;\n\n\n184.886\n1\n&lt;CrossSection: basin_left1, 184.886, 1&gt;\n\n\n210.212\n1\n&lt;CrossSection: basin_left1, 210.212, 1&gt;\n\n\n264.614\n1\n&lt;CrossSection: basin_left1, 264.614, 1&gt;\n\n\n284.638\n1\n&lt;CrossSection: basin_left1, 284.638, 1&gt;\n\n\n341.152\n1\n&lt;CrossSection: basin_left1, 341.152, 1&gt;\n\n\n413.617\n1\n&lt;CrossSection: basin_left1, 413.617, 1&gt;\n\n\n481.451\n1\n&lt;CrossSection: basin_left1, 481.451, 1&gt;\n\n\n\n\n\n\n\n\n\n# Clean up\nimport os\nos.remove(\"my_custom.xns11\")\nos.remove(\"my_subset.xns11\")",
    "crumbs": [
      "Home",
      "Examples",
      "Xns11 - basic"
    ]
  },
  {
    "objectID": "examples/xns11_basic.html#modifying-cross-sections",
    "href": "examples/xns11_basic.html#modifying-cross-sections",
    "title": "Xns11 - basic",
    "section": "Modifying cross sections",
    "text": "Modifying cross sections\n\nxs = xns['basin_left1','122.042','1']\nraw_copy = xs.raw.copy()\nraw_copy.head()\n\n\n\n\n\n\n\n\nmarkers\nmarker_labels\nx\nz\nresistance\n\n\n\n\n0\n\n\n0.000\n4059.508\n25.0\n\n\n1\n\n\n2.062\n4059.624\n25.0\n\n\n2\n1\nLeft Levee Bank (1)\n4.124\n4059.754\n25.0\n\n\n3\n\n\n6.186\n4059.607\n25.0\n\n\n4\n\n\n14.435\n4058.882\n25.0\n\n\n\n\n\n\n\n\nraw_copy['z'] = raw_copy['z'] + 1000\nraw_copy.head()\n\n\n\n\n\n\n\n\nmarkers\nmarker_labels\nx\nz\nresistance\n\n\n\n\n0\n\n\n0.000\n5059.508\n25.0\n\n\n1\n\n\n2.062\n5059.624\n25.0\n\n\n2\n1\nLeft Levee Bank (1)\n4.124\n5059.754\n25.0\n\n\n3\n\n\n6.186\n5059.607\n25.0\n\n\n4\n\n\n14.435\n5058.882\n25.0\n\n\n\n\n\n\n\n\nxs.raw = raw_copy\nxs.plot()\n\n\n\n\n\n\n\n\n\nfrom mikeio1d.cross_sections import Marker\n\nxs.set_marker(Marker.LEFT_LOW_FLOW_BANK, x=70)\nxs.set_marker(Marker.RIGHT_LOW_FLOW_BANK, x=74)\nxs.markers\n\n\n\n\n\n\n\n\nmarker\nmarker_label\nx\nz\n\n\n\n\n0\n1\nLeft Levee Bank (1)\n4.124\n5059.754\n\n\n1\n2\nLowest Point (2)\n72.914\n5052.803\n\n\n2\n3\nRight Levee Bank (3)\n195.897\n5057.989\n\n\n3\n4\nLeft Low Flow Bank (4)\n71.119\n5053.263\n\n\n4\n5\nRight Low Flow Bank (5)\n74.003\n5053.357\n\n\n\n\n\n\n\n\nxs.plot(with_marker_labels=False)\n\n\n\n\n\n\n\n\n\n# Write the modified cross section back to the Xns11 file.\nxns.write()",
    "crumbs": [
      "Home",
      "Examples",
      "Xns11 - basic"
    ]
  },
  {
    "objectID": "examples/xns11_basic.html#geopandas",
    "href": "examples/xns11_basic.html#geopandas",
    "title": "Xns11 - basic",
    "section": "GeoPandas",
    "text": "GeoPandas\n\ngdf = xns.to_geopandas()\ngdf.plot()\n\n\n\n\n\n\n\n\n\ngdf = xns.to_geopandas()\ngdf.plot(column='topo_id', legend=True, legend_kwds={'title': 'Topo'})\n\n\n\n\n\n\n\n\n\n# Plot all of the markers.\nxns.to_geopandas(mode='markers').plot(\"marker_label\", legend=True)\n\n\n\n\n\n\n\n\n\n# Plot markers on top of cross sections.\n\ngdf1 = xns.to_geopandas(mode='sections')\ngdf2 = xns.to_geopandas(mode='markers')\n\nax = gdf1.plot()\n\ngdf2.plot(ax=ax, column=\"marker_label\", markersize=10, zorder=10, legend=True)",
    "crumbs": [
      "Home",
      "Examples",
      "Xns11 - basic"
    ]
  },
  {
    "objectID": "examples/epanet_basic.html",
    "href": "examples/epanet_basic.html",
    "title": "EPANET - basic",
    "section": "",
    "text": "Tip\n\n\n\nMIKE IO 1D treats EPANET (.res/.resx) and Res1D results in the same way, so you may also refer to Res1D examples.\n\n\n\nimport mikeio1d\n\n\n\n\n\n\n\nCaution\n\n\n\nReading ‘.res’ files requires the accompanying ‘.inp’ file having the same name.\n\n\n\nres = mikeio1d.open(\"../data/epanet.res\")\nres.info()\n\nStart time: 2022-10-13 00:00:00\nEnd time: 2022-10-14 00:00:00\n# Timesteps: 25\n# Catchments: 0\n# Nodes: 11\n# Reaches: 13\n# Globals: 0\n0 - Water Demand (l/s)\n1 - Head (m)\n2 - Pressure (m)\n3 - Water Quality (-)\n4 - Flow (l/s)\n5 - Velocity (m/s)\n6 - Headloss Per 1000Unit (m)\n7 - Average Water Quality (-)\n8 - Status Code (-)\n9 - Setting (-)\n10 - Reactor Rate (-)\n11 - Friction Factor (-)",
    "crumbs": [
      "Home",
      "Examples",
      "EPANET - basic"
    ]
  },
  {
    "objectID": "examples/epanet_basic.html#overview",
    "href": "examples/epanet_basic.html#overview",
    "title": "EPANET - basic",
    "section": "",
    "text": "Tip\n\n\n\nMIKE IO 1D treats EPANET (.res/.resx) and Res1D results in the same way, so you may also refer to Res1D examples.\n\n\n\nimport mikeio1d\n\n\n\n\n\n\n\nCaution\n\n\n\nReading ‘.res’ files requires the accompanying ‘.inp’ file having the same name.\n\n\n\nres = mikeio1d.open(\"../data/epanet.res\")\nres.info()\n\nStart time: 2022-10-13 00:00:00\nEnd time: 2022-10-14 00:00:00\n# Timesteps: 25\n# Catchments: 0\n# Nodes: 11\n# Reaches: 13\n# Globals: 0\n0 - Water Demand (l/s)\n1 - Head (m)\n2 - Pressure (m)\n3 - Water Quality (-)\n4 - Flow (l/s)\n5 - Velocity (m/s)\n6 - Headloss Per 1000Unit (m)\n7 - Average Water Quality (-)\n8 - Status Code (-)\n9 - Setting (-)\n10 - Reactor Rate (-)\n11 - Friction Factor (-)",
    "crumbs": [
      "Home",
      "Examples",
      "EPANET - basic"
    ]
  },
  {
    "objectID": "examples/epanet_basic.html#plot-network",
    "href": "examples/epanet_basic.html#plot-network",
    "title": "EPANET - basic",
    "section": "Plot network",
    "text": "Plot network\n\nres.network.to_geopandas().plot()",
    "crumbs": [
      "Home",
      "Examples",
      "EPANET - basic"
    ]
  },
  {
    "objectID": "examples/epanet_basic.html#explore-network",
    "href": "examples/epanet_basic.html#explore-network",
    "title": "EPANET - basic",
    "section": "Explore network",
    "text": "Explore network\n\nres.reaches\n\n&lt;ResultReaches&gt; (13)\n    \n    Quantities (8)Flow (l/s)Velocity (m/s)Headloss Per 1000Unit (m)Average Water Quality (-)Status Code (-)Setting (-)Reactor Rate (-)Friction Factor (-)Derived Quantities (0)\n\n\n\nres.nodes\n\n&lt;ResultNodes&gt; (11)\n    \n    Quantities (4)Water Demand (l/s)Head (m)Pressure (m)Water Quality (-)Derived Quantities (0)",
    "crumbs": [
      "Home",
      "Examples",
      "EPANET - basic"
    ]
  },
  {
    "objectID": "examples/epanet_basic.html#extract-results-to-a-dataframe",
    "href": "examples/epanet_basic.html#extract-results-to-a-dataframe",
    "title": "EPANET - basic",
    "section": "Extract results to a DataFrame",
    "text": "Extract results to a DataFrame\n\ndf = res.read()\ndf.head()\n\n\n\n\n\n\n\n\nDemand:10\nHead:10\nPressure:10\nWaterQuality:10\nDemand:11\nHead:11\nPressure:11\nWaterQuality:11\nDemand:12\nHead:12\n...\nReactorRate:31\nFrictionFactor:31\nFlow:9\nVelocity:9\nHeadlossPer1000Unit:9\nAvgWaterQuality:9\nStatusCode:9\nSetting:9\nReactorRate:9\nFrictionFactor:9\n\n\n\n\n2022-10-13 00:00:00\n0.0\n306.125000\n89.716995\n0.5\n9.463531\n300.298187\n83.890175\n0.5\n9.463531\n295.677277\n...\n0.0\n0.048410\n117.737534\n0.0\n-62.285000\n0.0\n3.0\n1.0\n0.0\n0.0\n\n\n2022-10-13 01:00:00\n0.0\n306.862823\n90.454834\n0.5\n9.463531\n301.137360\n84.729355\n0.5\n9.463531\n296.611542\n...\n0.0\n0.048470\n116.627487\n0.0\n-63.022831\n0.0\n3.0\n1.0\n0.0\n0.0\n\n\n2022-10-13 02:00:00\n0.0\n307.325562\n90.917557\n0.5\n11.356236\n301.663696\n85.255707\n0.5\n11.356236\n297.515137\n...\n0.0\n0.048168\n115.925919\n0.0\n-63.485558\n0.0\n3.0\n1.0\n0.0\n0.0\n\n\n2022-10-13 03:00:00\n0.0\n307.824982\n91.416985\n0.5\n11.356236\n302.231873\n85.823860\n0.5\n11.356236\n298.146301\n...\n0.0\n0.048195\n115.163910\n0.0\n-63.984989\n0.0\n3.0\n1.0\n0.0\n0.0\n\n\n2022-10-13 04:00:00\n0.0\n308.052460\n91.644470\n0.5\n13.248942\n302.490662\n86.082672\n0.5\n13.248942\n298.756622\n...\n0.0\n0.047632\n114.815155\n0.0\n-64.212471\n0.0\n3.0\n1.0\n0.0\n0.0\n\n\n\n\n5 rows × 148 columns\n\n\n\n\ndf = res.reaches.Flow.read()\ndf.head()\n\n\n\n\n\n\n\n\nFlow:10\nFlow:11\nFlow:110\nFlow:111\nFlow:112\nFlow:113\nFlow:12\nFlow:121\nFlow:122\nFlow:21\nFlow:22\nFlow:31\nFlow:9\n\n\n\n\n2022-10-13 00:00:00\n117.737534\n77.866478\n-48.338314\n30.407526\n11.904859\n1.850754\n8.159774\n8.883767\n3.734274\n12.060229\n7.612776\n2.574746\n117.737534\n\n\n2022-10-13 01:00:00\n116.627487\n76.997108\n-47.228264\n30.166845\n12.096551\n1.899742\n8.208762\n8.861935\n3.756105\n11.841382\n7.563788\n2.552915\n116.627487\n\n\n2022-10-13 02:00:00\n115.925919\n73.462334\n-32.646851\n31.107346\n18.547157\n3.341266\n10.912090\n10.234302\n4.907347\n9.516808\n8.014970\n2.663477\n115.925919\n\n\n2022-10-13 03:00:00\n115.163910\n72.857773\n-31.884855\n30.949911\n18.671141\n3.374713\n10.945538\n10.223918\n4.917730\n9.369758\n7.981522\n2.653094\n115.163910\n\n\n2022-10-13 04:00:00\n114.815155\n69.403328\n-17.656246\n32.162888\n24.881876\n4.783631\n13.616260\n11.704790\n5.960466\n7.209155\n8.465311\n2.872162\n114.815155",
    "crumbs": [
      "Home",
      "Examples",
      "EPANET - basic"
    ]
  },
  {
    "objectID": "examples/epanet_basic.html#plot-results",
    "href": "examples/epanet_basic.html#plot-results",
    "title": "EPANET - basic",
    "section": "Plot results",
    "text": "Plot results\n\nres.reaches['110'].Flow.plot()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(2)\nres.reaches['110'].Flow.plot(ax=ax[0])\nres.reaches['110'].Velocity.plot(ax=ax[1])\n\nplt.tight_layout()",
    "crumbs": [
      "Home",
      "Examples",
      "EPANET - basic"
    ]
  },
  {
    "objectID": "examples/res1d_export_to_shapefile.html",
    "href": "examples/res1d_export_to_shapefile.html",
    "title": "Res1D - export to shapefile",
    "section": "",
    "text": "import mikeio1d\n\n\nres = mikeio1d.open(\"../data/network.res1d\")\ngdf = res.network.to_geopandas()\ngdf.plot()\n\n\n\n\n\n\n\n\n\nres = mikeio1d.open(\"../data/network.res1d\")\ngdf = res.network.to_geopandas()\ngdf.head()\n\n\n\n\n\n\n\n\ngroup\nname\ngeometry\ntag\n\n\n\n\n0\nNode\n1\nPOINT (-687934.6 -1056500.699)\nNaN\n\n\n1\nNode\n2\nPOINT (-687914.8 -1056556.399)\nNaN\n\n\n2\nNode\n3\nPOINT (-687907.899 -1056507)\nNaN\n\n\n3\nNode\n4\nPOINT (-687918.199 -1056576.199)\nNaN\n\n\n4\nNode\n5\nPOINT (-687835.5 -1056565.2)\nNaN",
    "crumbs": [
      "Home",
      "Examples",
      "Res1D - export to shapefile"
    ]
  },
  {
    "objectID": "examples/res1d_export_to_shapefile.html#export-to-geodataframe",
    "href": "examples/res1d_export_to_shapefile.html#export-to-geodataframe",
    "title": "Res1D - export to shapefile",
    "section": "",
    "text": "import mikeio1d\n\n\nres = mikeio1d.open(\"../data/network.res1d\")\ngdf = res.network.to_geopandas()\ngdf.plot()\n\n\n\n\n\n\n\n\n\nres = mikeio1d.open(\"../data/network.res1d\")\ngdf = res.network.to_geopandas()\ngdf.head()\n\n\n\n\n\n\n\n\ngroup\nname\ngeometry\ntag\n\n\n\n\n0\nNode\n1\nPOINT (-687934.6 -1056500.699)\nNaN\n\n\n1\nNode\n2\nPOINT (-687914.8 -1056556.399)\nNaN\n\n\n2\nNode\n3\nPOINT (-687907.899 -1056507)\nNaN\n\n\n3\nNode\n4\nPOINT (-687918.199 -1056576.199)\nNaN\n\n\n4\nNode\n5\nPOINT (-687835.5 -1056565.2)\nNaN",
    "crumbs": [
      "Home",
      "Examples",
      "Res1D - export to shapefile"
    ]
  },
  {
    "objectID": "examples/res1d_export_to_shapefile.html#plotting-results",
    "href": "examples/res1d_export_to_shapefile.html#plotting-results",
    "title": "Res1D - export to shapefile",
    "section": "Plotting results",
    "text": "Plotting results\n\ndf_reaches = res.reaches.to_geopandas(agg='max')\ndf_reaches.plot(column='max_Discharge', cmap=\"RdYlGn_r\", legend=True)\n\n\n\n\n\n\n\n\n\ndf_nodes = res.nodes.to_geopandas(agg='max')\nax = df_reaches.plot(color=\"gray\", zorder=-1)\ndf_nodes.plot(ax=ax, column='max_WaterLevel', legend=True)\n\n\n\n\n\n\n\n\n\nres = mikeio1d.open(\"../data/catchments.res1d\")\ndf_catchments = res.catchments.to_geopandas('max')\ndf_catchments.plot(column='max_TotalRunOff', cmap='Blues', legend=True, alpha=0.75)",
    "crumbs": [
      "Home",
      "Examples",
      "Res1D - export to shapefile"
    ]
  },
  {
    "objectID": "examples/res1d_export_to_shapefile.html#interactive-maps",
    "href": "examples/res1d_export_to_shapefile.html#interactive-maps",
    "title": "Res1D - export to shapefile",
    "section": "Interactive maps",
    "text": "Interactive maps\n\nmap = df_reaches.explore(column=\"max_Discharge\", legend=True, tiles=\"cartodb positron\", tooltip=[\"name\", \"max_Discharge\"], popup=True)\nmap\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n# save a distributable html map\nmap.save(\"results.html\")",
    "crumbs": [
      "Home",
      "Examples",
      "Res1D - export to shapefile"
    ]
  },
  {
    "objectID": "examples/res1d_export_to_shapefile.html#export-to-shapefile",
    "href": "examples/res1d_export_to_shapefile.html#export-to-shapefile",
    "title": "Res1D - export to shapefile",
    "section": "Export to shapefile",
    "text": "Export to shapefile\n\nfor df in [df_reaches, df_nodes, df_catchments]:\n    df.columns = [col[:10] for col in df.columns]\n\ndf_reaches.to_file(\"reaches.shp\")\ndf_nodes.to_file(\"nodes.shp\")\ndf_catchments.to_file(\"catchments.shp\")\n\n\n\nfrom pathlib import Path\n\nfiles_to_delete = []\nfor p in (\"results.html\", \"reaches*\", \"nodes*\", \"catchments*\"):\n    files_to_delete = [*files_to_delete, *Path.glob(Path.cwd(), p)]\n\nfor f in files_to_delete:\n    f.unlink()",
    "crumbs": [
      "Home",
      "Examples",
      "Res1D - export to shapefile"
    ]
  },
  {
    "objectID": "examples/index.html",
    "href": "examples/index.html",
    "title": "Examples",
    "section": "",
    "text": "Example data\n\n\n\n\n\nIf you want to try one of the examples you need to first download some data files.\nThe files are stored on GitHub in the MIKE IO 1D repo.\nThe easiest way is to the download the repo as a zip file and extract the files you need.\nIn the zip file you find the files in tests/testdata/ folder.\n\n\n\n\n\n\n\n\n\nAdditional examples on GitHub\n\n\n\n\n\nThere’s additional notebooks available on GitHub.\n\n\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nEPANET - basic\n\n\nExtract EPANET results for a water distribution system to a pandas DataFrame.\n\n\n\n\nRes1D - basic\n\n\nExtract res1d results for a collection system or river to a pandas DataFrame.\n\n\n\n\nRes1D - export to shapefile\n\n\nExport res1d results to shapefiles.\n\n\n\n\nRes1D - long term statistics (LTS)\n\n\nRead and plot LTS results.\n\n\n\n\nSWMM - basic\n\n\nExtract SWMM results for a collection system to a pandas DataFrame.\n\n\n\n\nXns11 - basic\n\n\nExtract cross sections to a pandas DataFrame and plot them.\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Home",
      "Examples"
    ]
  },
  {
    "objectID": "user-guide/overview.html",
    "href": "user-guide/overview.html",
    "title": "Overview",
    "section": "",
    "text": "Res1D is the main interface for accessing data on a Network.\n\nimport mikeio1d\nres = mikeio1d.open('../data/network.res1d')\nres\n\n&lt;mikeio1d.Res1D&gt;",
    "crumbs": [
      "Home",
      "User Guide"
    ]
  },
  {
    "objectID": "user-guide/overview.html#res1d",
    "href": "user-guide/overview.html#res1d",
    "title": "Overview",
    "section": "",
    "text": "Res1D is the main interface for accessing data on a Network.\n\nimport mikeio1d\nres = mikeio1d.open('../data/network.res1d')\nres\n\n&lt;mikeio1d.Res1D&gt;",
    "crumbs": [
      "Home",
      "User Guide"
    ]
  },
  {
    "objectID": "user-guide/overview.html#locations",
    "href": "user-guide/overview.html#locations",
    "title": "Overview",
    "section": " Locations",
    "text": "Locations\nLocations are where model results exist in the network. The main location types are nodes, reaches, and catchments. Each of these location types are accessible via a Res1D object.\n\nres.nodes\n\n&lt;ResultNodes&gt; (119)\n    \n    Quantities (1)Water level (m)Derived Quantities (3)NodeFloodingNodeWaterDepthNodeWaterLevelAboveCritical\n\n\nSpecific locations are accessible via their unique ID.\n\nres.nodes['101']\n\n&lt;Manhole: 101&gt;\n    \n    Attributes (8)id: 101type: Manholexcoord: -687859.5004882812ycoord: -1056308.700012207ground_level: 196.67999267578125bottom_level: 195.92999267578125critical_level: infdiameter: 1.0Quantities (1)Water level (m)Derived Quantities (3)NodeFloodingNodeWaterDepthNodeWaterLevelAboveCritical",
    "crumbs": [
      "Home",
      "User Guide"
    ]
  },
  {
    "objectID": "user-guide/overview.html#quantities",
    "href": "user-guide/overview.html#quantities",
    "title": "Overview",
    "section": " Quantities",
    "text": "Quantities\nQuantities are the actual model results, which can be read into a DataFrame or plotted directly.\n\ndf = res.nodes['101'].WaterLevel.read()\ndf.head()\n\n\n\n\n\n\n\n\nWaterLevel:101\n\n\n\n\n1994-08-07 16:35:00.000\n195.931503\n\n\n1994-08-07 16:36:01.870\n195.931595\n\n\n1994-08-07 16:37:07.560\n195.931625\n\n\n1994-08-07 16:38:55.828\n195.931656\n\n\n1994-08-07 16:39:55.828\n195.931656\n\n\n\n\n\n\n\n\nres.nodes['101'].WaterLevel.plot()\n\n\n\n\n\n\n\n\nQuantity collections enable reading a specific quantity for many locations at once.\n\ndf = res.reaches.Discharge.read()\ndf.describe().T.head()\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\n\n\nDischarge:100l1:23.8414\n110.0\n0.014078\n0.026875\n0.000006\n0.000636\n0.001032\n0.005988\n0.099751\n\n\nDischarge:101l1:33.218\n110.0\n-0.000034\n0.005649\n-0.022655\n0.000004\n0.000005\n0.000022\n0.019202\n\n\nDischarge:102l1:5.46832\n110.0\n0.069058\n0.100331\n-0.011316\n0.003062\n0.017987\n0.096062\n0.326383\n\n\nDischarge:103l1:13.0327\n110.0\n-0.000011\n0.001084\n-0.006748\n0.000002\n0.000017\n0.000337\n0.001056\n\n\nDischarge:104l1:17.2065\n110.0\n0.000005\n0.000002\n0.000003\n0.000005\n0.000005\n0.000005\n0.000025",
    "crumbs": [
      "Home",
      "User Guide"
    ]
  },
  {
    "objectID": "user-guide/overview.html#xns11",
    "href": "user-guide/overview.html#xns11",
    "title": "Overview",
    "section": " Xns11",
    "text": "Xns11\nXns11 is the main interface for accessing cross section data.\n\nxns = mikeio1d.open('../data/mikep_cs_demo.xns11')\nxns['basin_left1','122.042','1'].plot(with_marker_labels=False)\n\n\n\n\n\n\n\n\nAccess a cross section’s raw info as a DataFrame.\n\ndf = xns['basin_left1','122.042','1'].raw\ndf.head()\n\n\n\n\n\n\n\n\nmarkers\nmarker_labels\nx\nz\nresistance\n\n\n\n\n0\n\n\n0.000\n4059.508\n25.0\n\n\n1\n\n\n2.062\n4059.624\n25.0\n\n\n2\n1\nLeft Levee Bank (1)\n4.124\n4059.754\n25.0\n\n\n3\n\n\n6.186\n4059.607\n25.0\n\n\n4\n\n\n14.435\n4058.882\n25.0\n\n\n\n\n\n\n\nAccess a cross section’s processed info as a DataFrame.\n\ndf = xns['basin_left1','122.042','1'].processed\ndf.head()\n\n\n\n\n\n\n\n\nlevel\nflow_area\nradius\nstorage_width\nadditional_storage_area\nresistance\nconveyance_factor\n\n\n\n\n0\n4052.803000\n0.000000\n0.000000\n0.000000\n0.0\n25.0\n0.000000\n\n\n1\n4052.944857\n0.160191\n0.075978\n2.743476\n0.0\n25.0\n0.718409\n\n\n2\n4053.086714\n0.790062\n0.165315\n6.136873\n0.0\n25.0\n5.949433\n\n\n3\n4053.228571\n3.633195\n0.172199\n29.866016\n0.0\n25.0\n28.113531\n\n\n4\n4053.370429\n9.264321\n0.251109\n50.128968\n0.0\n25.0\n92.185348",
    "crumbs": [
      "Home",
      "User Guide"
    ]
  },
  {
    "objectID": "user-guide/overview.html#additional-resources",
    "href": "user-guide/overview.html#additional-resources",
    "title": "Overview",
    "section": " Additional resources",
    "text": "Additional resources\n\nExample notebooks\nUnit tests\nMIKE 1D API",
    "crumbs": [
      "Home",
      "User Guide"
    ]
  },
  {
    "objectID": "user-guide/xns11.html",
    "href": "user-guide/xns11.html",
    "title": "Xns11",
    "section": "",
    "text": "Xns11 is the main interface for accessing cross section data.",
    "crumbs": [
      "Home",
      "User Guide",
      "Xns11"
    ]
  },
  {
    "objectID": "user-guide/xns11.html#opening-files",
    "href": "user-guide/xns11.html#opening-files",
    "title": "Xns11",
    "section": "Opening files",
    "text": "Opening files\n\nfrom mikeio1d import Xns11\nxns = Xns11('../data/mikep_cs_demo.xns11')\nxns\n\n&lt;mikeio1d.Xns11 (103)&gt;",
    "crumbs": [
      "Home",
      "User Guide",
      "Xns11"
    ]
  },
  {
    "objectID": "user-guide/xns11.html#cross-section-collections",
    "href": "user-guide/xns11.html#cross-section-collections",
    "title": "Xns11",
    "section": "Cross section collections",
    "text": "Cross section collections\nEach Xns11 object is a collection of cross sections (CrossSectionCollection) with a file path.\n\nfrom mikeio1d.cross_sections import CrossSectionCollection\n\nprint(xns.file_path)\n\nisinstance(xns, CrossSectionCollection)\n\n../data/mikep_cs_demo.xns11\n\n\nTrue\n\n\n\nOverview\nAn overview of a cross section collection can be obtained by calling the to_dataframe method.\n\nxns.to_dataframe()\n\n\n\n\n\n\n\n\n\n\ncross_section\n\n\nlocation_id\nchainage\ntopo_id\n\n\n\n\n\nbasin_left1\n2.004\n1\n&lt;CrossSection: basin_left1, 2.004, 1&gt;\n\n\n33.774\n1\n&lt;CrossSection: basin_left1, 33.774, 1&gt;\n\n\n80.945\n1\n&lt;CrossSection: basin_left1, 80.945, 1&gt;\n\n\n122.042\n1\n&lt;CrossSection: basin_left1, 122.042, 1&gt;\n\n\n166.107\n1\n&lt;CrossSection: basin_left1, 166.107, 1&gt;\n\n\n...\n...\n...\n...\n\n\ntributary\n250.000\ntributary\n&lt;CrossSection: tributary, 250.000, tributary&gt;\n\n\n300.000\ntributary\n&lt;CrossSection: tributary, 300.000, tributary&gt;\n\n\n400.000\ntributary\n&lt;CrossSection: tributary, 400.000, tributary&gt;\n\n\n450.000\ntributary\n&lt;CrossSection: tributary, 450.000, tributary&gt;\n\n\n500.000\ntributary\n&lt;CrossSection: tributary, 500.000, tributary&gt;\n\n\n\n\n103 rows × 1 columns\n\n\n\n\n\nIndexing\nCross section collections are dict-like and can be indexed by a tuple of location ID, chainage, and topo ID. The values are CrossSection objects.\n\nxns['basin_left1', '122.042', '1']\n\n&lt;CrossSection: basin_left1, 122.042, 1&gt;\n\n\nAlternatively, the location ID, chainage, and topo ID can be explicitly expressed with the sel method.\n\nxns.sel(location_id='basin_left1', chainage='122.042', topo_id='1')\n\n&lt;CrossSection: basin_left1, 122.042, 1&gt;\n\n\n\n\nSlicing\nCross section collections can be sliced by location ID, chainage, or topo ID. This returns a list of CrossSection objects.\n\nxns['basin_left1'] # all cross sections at location 'basin_left1'\n\n[&lt;CrossSection: basin_left1, 2.004, 1&gt;,\n &lt;CrossSection: basin_left1, 33.774, 1&gt;,\n &lt;CrossSection: basin_left1, 80.945, 1&gt;,\n &lt;CrossSection: basin_left1, 122.042, 1&gt;,\n &lt;CrossSection: basin_left1, 166.107, 1&gt;,\n &lt;CrossSection: basin_left1, 184.886, 1&gt;,\n &lt;CrossSection: basin_left1, 210.212, 1&gt;,\n &lt;CrossSection: basin_left1, 264.614, 1&gt;,\n &lt;CrossSection: basin_left1, 284.638, 1&gt;,\n &lt;CrossSection: basin_left1, 341.152, 1&gt;,\n &lt;CrossSection: basin_left1, 413.617, 1&gt;,\n &lt;CrossSection: basin_left1, 481.451, 1&gt;]\n\n\n\nxns[:, '122.042'] # all cross sections at chainage '122.042'\n\n[&lt;CrossSection: basin_left1, 122.042, 1&gt;]\n\n\n\nxns[:,:,'1'] # all cross sections with topo ID '1'\n\n[&lt;CrossSection: basin_left1, 2.004, 1&gt;,\n &lt;CrossSection: basin_left1, 33.774, 1&gt;,\n &lt;CrossSection: basin_left1, 80.945, 1&gt;,\n &lt;CrossSection: basin_left1, 122.042, 1&gt;,\n &lt;CrossSection: basin_left1, 166.107, 1&gt;,\n &lt;CrossSection: basin_left1, 184.886, 1&gt;,\n &lt;CrossSection: basin_left1, 210.212, 1&gt;,\n &lt;CrossSection: basin_left1, 264.614, 1&gt;,\n &lt;CrossSection: basin_left1, 284.638, 1&gt;,\n &lt;CrossSection: basin_left1, 341.152, 1&gt;,\n &lt;CrossSection: basin_left1, 413.617, 1&gt;,\n &lt;CrossSection: basin_left1, 481.451, 1&gt;,\n &lt;CrossSection: basin_left2, 29.194, 1&gt;,\n &lt;CrossSection: basin_left2, 94.137, 1&gt;,\n &lt;CrossSection: basin_left2, 159.062, 1&gt;,\n &lt;CrossSection: basin_left2, 214.431, 1&gt;,\n &lt;CrossSection: basin_left2, 281.473, 1&gt;,\n &lt;CrossSection: basin_left2, 341.557, 1&gt;,\n &lt;CrossSection: basin_left2, 398.991, 1&gt;,\n &lt;CrossSection: basin_left2, 434.188, 1&gt;,\n &lt;CrossSection: basin_right, 0.000, 1&gt;,\n &lt;CrossSection: basin_right, 69.014, 1&gt;,\n &lt;CrossSection: basin_right, 122.513, 1&gt;,\n &lt;CrossSection: basin_right, 182.271, 1&gt;,\n &lt;CrossSection: basin_right, 238.800, 1&gt;,\n &lt;CrossSection: basin_right, 343.386, 1&gt;,\n &lt;CrossSection: basin_right, 403.762, 1&gt;,\n &lt;CrossSection: basin_right, 436.489, 1&gt;,\n &lt;CrossSection: basin_right, 520.410, 1&gt;,\n &lt;CrossSection: basin_right, 563.294, 1&gt;,\n &lt;CrossSection: basin_right, 567.166, 1&gt;,\n &lt;CrossSection: basin_right, 636.389, 1&gt;,\n &lt;CrossSection: basin_right, 662.699, 1&gt;,\n &lt;CrossSection: basin_right, 712.468, 1&gt;,\n &lt;CrossSection: link_basin_left, 0.000, 1&gt;,\n &lt;CrossSection: link_basin_left, 30.000, 1&gt;,\n &lt;CrossSection: link_basin_left, 46.000, 1&gt;,\n &lt;CrossSection: link_basin_left, 64.000, 1&gt;,\n &lt;CrossSection: link_basin_right, 0.000, 1&gt;,\n &lt;CrossSection: link_basin_right, 18.000, 1&gt;,\n &lt;CrossSection: link_basin_right, 28.000, 1&gt;,\n &lt;CrossSection: link_basin_right, 41.930, 1&gt;,\n &lt;CrossSection: link_basin_right, 70.870, 1&gt;,\n &lt;CrossSection: link_basin_right, 80.400, 1&gt;]\n\n\n\n\nCombining\nCross section collections can be combined into a new collection.\n\nsections = [*xns['basin_left1', '2.004'], *xns['basin_left1', '210.212']]\nnew_collection = Xns11(sections)\nnew_collection.to_dataframe()\n\n\n\n\n\n\n\n\n\n\ncross_section\n\n\nlocation_id\nchainage\ntopo_id\n\n\n\n\n\nbasin_left1\n2.004\n1\n&lt;CrossSection: basin_left1, 2.004, 1&gt;\n\n\n210.212\n1\n&lt;CrossSection: basin_left1, 210.212, 1&gt;\n\n\n\n\n\n\n\n\n\nAdding a cross section\nA new cross section can be added to a collection with the add method.\n\nxs_to_add = xns.sel(location_id='basin_left1', chainage='33.774', topo_id='1')\nnew_collection.add(xs_to_add)\nnew_collection.to_dataframe()\n\n\n\n\n\n\n\n\n\n\ncross_section\n\n\nlocation_id\nchainage\ntopo_id\n\n\n\n\n\nbasin_left1\n2.004\n1\n&lt;CrossSection: basin_left1, 2.004, 1&gt;\n\n\n210.212\n1\n&lt;CrossSection: basin_left1, 210.212, 1&gt;\n\n\n33.774\n1\n&lt;CrossSection: basin_left1, 33.774, 1&gt;",
    "crumbs": [
      "Home",
      "User Guide",
      "Xns11"
    ]
  },
  {
    "objectID": "user-guide/xns11.html#cross-sections",
    "href": "user-guide/xns11.html#cross-sections",
    "title": "Xns11",
    "section": "Cross sections",
    "text": "Cross sections\nA cross section is uniquely identified by its location ID, chainage, and topo ID.\n\nxs = xns['basin_left1', '122.042', '1']\nxs\n\n&lt;CrossSection: basin_left1, 122.042, 1&gt;\n\n\n\nPlotting\nCross sections can be plotted directly with the plot method.\n\nxs.plot()\n\n\n\n\n\n\n\n\n\n\nRaw data\nThe raw data of a cross section can be accessed via the raw attribute.\n\ndf = xs.raw\ndf.head()\n\n\n\n\n\n\n\n\nmarkers\nmarker_labels\nx\nz\nresistance\n\n\n\n\n0\n\n\n0.000\n4059.508\n25.0\n\n\n1\n\n\n2.062\n4059.624\n25.0\n\n\n2\n1\nLeft Levee Bank (1)\n4.124\n4059.754\n25.0\n\n\n3\n\n\n6.186\n4059.607\n25.0\n\n\n4\n\n\n14.435\n4058.882\n25.0\n\n\n\n\n\n\n\nRaw data is modifiable by setting the raw attribute with a new DataFrame of the same column names.\n\ndf_modified = xs.raw\ndf_modified['z'] = df_modified['z'] + 1000\nxs.raw = df_modified\nxs.plot()\n\n\n\n\n\n\n\n\n\n\nMarkers\nMarkers can be viewed with the markers attribute.\n\nxs.markers\n\n\n\n\n\n\n\n\nmarker\nmarker_label\nx\nz\n\n\n\n\n0\n1\nLeft Levee Bank (1)\n4.124\n5059.754\n\n\n1\n2\nLowest Point (2)\n72.914\n5052.803\n\n\n2\n3\nRight Levee Bank (3)\n195.897\n5057.989\n\n\n3\n4\nLeft Low Flow Bank (4)\n71.119\n5053.263\n\n\n4\n5\nRight Low Flow Bank (5)\n74.003\n5053.357\n\n\n\n\n\n\n\nSet and unset markers with the set_marker and unset_marker methods. Alternatively, reassign a modified marker DataFrame like is done for raw data.\n\nxs.set_marker(42, 50) # set a user-defined marker '42' at the closest point to x=50\nxs.plot()\n\n\n\n\n\n\n\n\n\nxs.unset_marker(42) # unset the user-defined marker '42'\nxs.plot()\n\n\n\n\n\n\n\n\n\n\nProcessed data\nProcessed data is accessible via the processed attribute.\n\ndf = xs.processed\ndf.head()\n\n\n\n\n\n\n\n\nlevel\nflow_area\nradius\nstorage_width\nadditional_storage_area\nresistance\nconveyance_factor\n\n\n\n\n0\n5052.803000\n0.000000\n0.000000\n0.000000\n0.0\n25.0\n0.000000\n\n\n1\n5052.944857\n0.160191\n0.075978\n2.743476\n0.0\n25.0\n0.718409\n\n\n2\n5053.086714\n0.790062\n0.165315\n6.136873\n0.0\n25.0\n5.949433\n\n\n3\n5053.228571\n3.633195\n0.172199\n29.866016\n0.0\n25.0\n28.113531\n\n\n4\n5053.370429\n9.264321\n0.251109\n50.128968\n0.0\n25.0\n92.185348\n\n\n\n\n\n\n\nProcessed data is modifiable by setting the processed attribute with a new DataFrame of the same column names.\n\ndf_modified = xs.processed\ndf_modified['level'] = df_modified['level'] -500\nxs.processed = df_modified\nxs.processed.head()\n\n\n\n\n\n\n\n\nlevel\nflow_area\nradius\nstorage_width\nadditional_storage_area\nresistance\nconveyance_factor\n\n\n\n\n0\n4552.803000\n0.000000\n0.000000\n0.000000\n0.0\n25.0\n0.000000\n\n\n1\n4552.944857\n0.160191\n0.075978\n2.743476\n0.0\n25.0\n0.718409\n\n\n2\n4553.086714\n0.790062\n0.165315\n6.136873\n0.0\n25.0\n5.949433\n\n\n3\n4553.228571\n3.633195\n0.172199\n29.866016\n0.0\n25.0\n28.113531\n\n\n4\n4553.370429\n9.264321\n0.251109\n50.128968\n0.0\n25.0\n92.185348\n\n\n\n\n\n\n\nTo recalculate processed datd based on the raw data, call the recompute_processed method.\n\nxs.processed_allow_recompute = True\nxs.recompute_processed()\nxs.processed.head()\n\n\n\n\n\n\n\n\nlevel\nflow_area\nradius\nstorage_width\nadditional_storage_area\nresistance\nconveyance_factor\n\n\n\n\n0\n5052.803000\n0.000000\n0.000000\n0.000000\n0.0\n25.0\n0.000000\n\n\n1\n5052.944857\n0.160191\n0.075978\n2.743476\n0.0\n25.0\n0.718409\n\n\n2\n5053.086714\n0.790062\n0.165315\n6.136873\n0.0\n25.0\n5.949433\n\n\n3\n5053.228571\n3.633195\n0.172199\n29.866016\n0.0\n25.0\n28.113531\n\n\n4\n5053.370429\n9.264321\n0.251109\n50.128968\n0.0\n25.0\n92.185348",
    "crumbs": [
      "Home",
      "User Guide",
      "Xns11"
    ]
  },
  {
    "objectID": "user-guide/xns11.html#geodataframes",
    "href": "user-guide/xns11.html#geodataframes",
    "title": "Xns11",
    "section": "GeoDataFrames",
    "text": "GeoDataFrames\nCross section collections can be extracted into a GeoDataFrame with to_geopandas.\n\ngdf = xns.to_geopandas()\ngdf.head()\n\n\n\n\n\n\n\n\nlocation_id\nchainage\ntopo_id\ngeometry\n\n\n\n\n0\nbasin_left1\n2.004\n1\nLINESTRING (385926.349 5715923.327, 385967.914...\n\n\n1\nbasin_left1\n33.774\n1\nLINESTRING (385918.718 5715879.808, 386007.086...\n\n\n2\nbasin_left1\n80.945\n1\nLINESTRING (385947.01 5715843.133, 386074.498 ...\n\n\n3\nbasin_left1\n122.042\n1\nLINESTRING (385970.062 5715808.903, 386134.575...\n\n\n4\nbasin_left1\n166.107\n1\nLINESTRING (385997.773 5715775.281, 386176.257...\n\n\n\n\n\n\n\n\ngdf.plot(column='location_id', cmap='tab20', legend=True)\n\n\n\n\n\n\n\n\nIt is also possible to extract cross section markers as GeoDataFrames.\n\ngdf = xns.to_geopandas(mode='markers')\ngdf.head()\n\n\n\n\n\n\n\n\nlocation_id\nchainage\ntopo_id\nmarker\nmarker_label\ngeometry\n\n\n\n\n0\nbasin_left1\n2.004\n1\n1\nLeft Levee Bank (1)\nPOINT (385926.349 5715923.327)\n\n\n1\nbasin_left1\n2.004\n1\n2\nLowest Point (2)\nPOINT (385955.309 5715945.473)\n\n\n2\nbasin_left1\n2.004\n1\n3\nRight Levee Bank (3)\nPOINT (385967.914 5715955.112)\n\n\n3\nbasin_left1\n33.774\n1\n1\nLeft Levee Bank (1)\nPOINT (385924.812 5715884.216)\n\n\n4\nbasin_left1\n33.774\n1\n2\nLowest Point (2)\nPOINT (385973.567 5715919.482)\n\n\n\n\n\n\n\n\nax = xns.to_geopandas().plot()\nxns.to_geopandas(mode='markers').plot(ax=ax, column='marker', markersize=9, legend=True)",
    "crumbs": [
      "Home",
      "User Guide",
      "Xns11"
    ]
  },
  {
    "objectID": "user-guide/xns11.html#examples",
    "href": "user-guide/xns11.html#examples",
    "title": "Xns11",
    "section": "Examples",
    "text": "Examples\n\nXns11 Basics\n\n\n\n\n\n\n\nTip\n\n\n\nThere are also several notebook examples available on our GitHub repositoryhttps://github.com/DHI/mikeio1d/tree/main/notebooks.",
    "crumbs": [
      "Home",
      "User Guide",
      "Xns11"
    ]
  },
  {
    "objectID": "user-guide/quantities.html",
    "href": "user-guide/quantities.html",
    "title": "Quantities",
    "section": "",
    "text": "from mikeio1d import Res1D\nres = Res1D('../data/network.res1d')\nres_catchments = Res1D('../data/catchments.res1d')\nQuantities are the actual model results, which can be read into a pandas DataFrame or plotted directly.",
    "crumbs": [
      "Home",
      "User Guide",
      "Quantities"
    ]
  },
  {
    "objectID": "user-guide/quantities.html#data-structures",
    "href": "user-guide/quantities.html#data-structures",
    "title": "Quantities",
    "section": "Data structures",
    "text": "Data structures\nTwo main quantity structures exist: quantities and quantity collections.\n\nQuantity\nA quantity is a single quantity at a specific location. Quantities are accessed from a location object.\n\nres.nodes['101'].WaterLevel # single quantity (i.e. water level) at a single location (i.e. node 101)\n\n&lt;Quantity: Water level (m)&gt;\n\n\n\n\nQuantity Collection\nA quantity collection is a single quantity at multiple locations. Quantity collections are accessed from a location collection.\n\nres.nodes.WaterLevel # single quantity (i.e. water level) at multiple locations (i.e. all nodes)\n\n&lt;QuantityCollection (119): Water level (m)&gt;",
    "crumbs": [
      "Home",
      "User Guide",
      "Quantities"
    ]
  },
  {
    "objectID": "user-guide/quantities.html#reading-data",
    "href": "user-guide/quantities.html#reading-data",
    "title": "Quantities",
    "section": "Reading data",
    "text": "Reading data\nQuantities and quantity collections can be read into a pandas DataFrame with their read method.\n\ndf = res.nodes['101'].WaterLevel.read()\ndf.head()\n\n\n\n\n\n\n\n\nWaterLevel:101\n\n\n\n\n1994-08-07 16:35:00.000\n195.931503\n\n\n1994-08-07 16:36:01.870\n195.931595\n\n\n1994-08-07 16:37:07.560\n195.931625\n\n\n1994-08-07 16:38:55.828\n195.931656\n\n\n1994-08-07 16:39:55.828\n195.931656\n\n\n\n\n\n\n\n\ndf = res.nodes.WaterLevel.read()\ndf.head()\n\n\n\n\n\n\n\n\nWaterLevel:1\nWaterLevel:2\nWaterLevel:3\nWaterLevel:4\nWaterLevel:5\nWaterLevel:6\nWaterLevel:7\nWaterLevel:8\nWaterLevel:9\nWaterLevel:10\n...\nWaterLevel:46\nWaterLevel:55\nWaterLevel:58\nWaterLevel:116\nWaterLevel:117\nWaterLevel:118\nWaterLevel:115\nWaterLevel:119\nWaterLevel:120\nWaterLevel:Weir Outlet:119w1\n\n\n\n\n1994-08-07 16:35:00.000\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.625000\n193.675003\n193.764999\n193.774994\n193.804993\n...\n194.074997\n195.005005\n193.554993\n193.550003\n193.585007\n193.585007\n193.304993\n193.550003\n193.550003\n193.779999\n\n\n1994-08-07 16:36:01.870\n195.052994\n195.821701\n195.8815\n193.604996\n193.615005\n193.625320\n193.675110\n193.765060\n193.775116\n193.804993\n...\n194.074997\n195.005005\n193.555023\n193.550064\n193.585831\n193.586807\n193.306061\n193.550003\n193.550003\n188.479996\n\n\n1994-08-07 16:37:07.560\n195.052994\n195.821640\n195.8815\n193.604996\n193.615005\n193.625671\n193.675369\n193.765106\n193.775513\n193.804993\n...\n194.074997\n195.005005\n193.555084\n193.550110\n193.586426\n193.588196\n193.307144\n193.550034\n193.550003\n188.479996\n\n\n1994-08-07 16:38:55.828\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.626236\n193.675751\n193.765228\n193.776077\n193.804993\n...\n194.074997\n195.005005\n193.555191\n193.550156\n193.586960\n193.589706\n193.308884\n193.550079\n193.550003\n188.479996\n\n\n1994-08-07 16:39:55.828\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.626556\n193.675949\n193.765335\n193.776352\n193.804993\n...\n194.074997\n195.005005\n193.555267\n193.550171\n193.587112\n193.590317\n193.309860\n193.550095\n193.550003\n188.479996\n\n\n\n\n5 rows × 119 columns",
    "crumbs": [
      "Home",
      "User Guide",
      "Quantities"
    ]
  },
  {
    "objectID": "user-guide/quantities.html#plotting-data",
    "href": "user-guide/quantities.html#plotting-data",
    "title": "Quantities",
    "section": "Plotting data",
    "text": "Plotting data\nQuantities and quantity collections can be plotted directly with their plot method.\n\nres.nodes['101'].WaterLevel.plot()\n\n\n\n\n\n\n\n\n\nres.nodes.WaterLevel.plot(legend=False)",
    "crumbs": [
      "Home",
      "User Guide",
      "Quantities"
    ]
  },
  {
    "objectID": "user-guide/quantities.html#dynamic-selections",
    "href": "user-guide/quantities.html#dynamic-selections",
    "title": "Quantities",
    "section": "Dynamic selections",
    "text": "Dynamic selections\nQuantities or quantity collections can be conveniently combined into a single DataFrame with the ‘add’ method.\n\nres.nodes['101'].WaterLevel.add()\nres.nodes['100'].WaterLevel.add()\ndf = res.read()\ndf.head()\n\n\n\n\n\n\n\n\nWaterLevel:101\nWaterLevel:100\n\n\n\n\n1994-08-07 16:35:00.000\n195.931503\n195.441498\n\n\n1994-08-07 16:36:01.870\n195.931595\n195.441605\n\n\n1994-08-07 16:37:07.560\n195.931625\n195.441620\n\n\n1994-08-07 16:38:55.828\n195.931656\n195.441605\n\n\n1994-08-07 16:39:55.828\n195.931656\n195.441605\n\n\n\n\n\n\n\n\nres.nodes.WaterLevel.add()\nres.reaches.WaterLevel.add()\ndf = res.read()\ndf.head()\n\n\n\n\n\n\n\n\nWaterLevel:1\nWaterLevel:2\nWaterLevel:3\nWaterLevel:4\nWaterLevel:5\nWaterLevel:6\nWaterLevel:7\nWaterLevel:8\nWaterLevel:9\nWaterLevel:10\n...\nWaterLevel:98l1:0\nWaterLevel:98l1:16.0098\nWaterLevel:99l1:0\nWaterLevel:99l1:44.5016\nWaterLevel:9l1:0\nWaterLevel:9l1:10\nWaterLevel:Weir:119w1:0\nWaterLevel:Weir:119w1:1\nWaterLevel:Pump:115p1:0\nWaterLevel:Pump:115p1:82.4281\n\n\n\n\n1994-08-07 16:35:00.000\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.625000\n193.675003\n193.764999\n193.774994\n193.804993\n...\n194.581497\n194.511505\n194.661499\n194.581497\n193.774994\n193.764999\n193.550003\n188.479996\n193.304993\n195.005005\n\n\n1994-08-07 16:36:01.870\n195.052994\n195.821701\n195.8815\n193.604996\n193.615005\n193.625320\n193.675110\n193.765060\n193.775116\n193.804993\n...\n194.581497\n194.511841\n194.661575\n194.581497\n193.775070\n193.765060\n193.550003\n188.479996\n193.306061\n195.005005\n\n\n1994-08-07 16:37:07.560\n195.052994\n195.821640\n195.8815\n193.604996\n193.615005\n193.625671\n193.675369\n193.765106\n193.775513\n193.804993\n...\n194.581497\n194.511795\n194.661667\n194.581497\n193.775391\n193.765106\n193.550034\n188.479996\n193.307144\n195.005005\n\n\n1994-08-07 16:38:55.828\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.626236\n193.675751\n193.765228\n193.776077\n193.804993\n...\n194.581497\n194.511581\n194.661865\n194.581497\n193.775894\n193.765228\n193.550079\n188.479996\n193.308884\n195.005005\n\n\n1994-08-07 16:39:55.828\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.626556\n193.675949\n193.765335\n193.776352\n193.804993\n...\n194.581497\n194.511505\n194.661911\n194.581497\n193.776154\n193.765335\n193.550095\n188.479996\n193.309860\n195.005005\n\n\n\n\n5 rows × 366 columns\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe name ‘add’ indicates the quantity is added to a list of quantities to be read. The ‘read’ method reads all quantities in the list.",
    "crumbs": [
      "Home",
      "User Guide",
      "Quantities"
    ]
  },
  {
    "objectID": "user-guide/quantities.html#examples",
    "href": "user-guide/quantities.html#examples",
    "title": "Quantities",
    "section": "Examples",
    "text": "Examples\n\nRes1D Basics\n\n\n\n\n\n\n\nTip\n\n\n\nThere are also several notebook examples available on our GitHub repositoryhttps://github.com/DHI/mikeio1d/tree/main/notebooks.",
    "crumbs": [
      "Home",
      "User Guide",
      "Quantities"
    ]
  },
  {
    "objectID": "user-guide/network.html",
    "href": "user-guide/network.html",
    "title": "Network",
    "section": "",
    "text": "A fundamental concept of MIKE IO 1D is the structure of a Network. Understanding its basic components is essential for working with the library.",
    "crumbs": [
      "Home",
      "User Guide",
      "Network"
    ]
  },
  {
    "objectID": "user-guide/network.html#overview",
    "href": "user-guide/network.html#overview",
    "title": "Network",
    "section": "Overview",
    "text": "Overview\nNetworks consist of several elements: reaches, grid points, nodes, and catchments.",
    "crumbs": [
      "Home",
      "User Guide",
      "Network"
    ]
  },
  {
    "objectID": "user-guide/network.html#reaches",
    "href": "user-guide/network.html#reaches",
    "title": "Network",
    "section": "Reaches",
    "text": "Reaches\nReaches have many synonyms within different domain applications. In collection systems they are often called links or pipes. In river models they are called branches, streams, canals or channels. In graph and network theory they are called links or edges. Reaches contains several ‘grid points’ along their path, and are bounded by nodes.",
    "crumbs": [
      "Home",
      "User Guide",
      "Network"
    ]
  },
  {
    "objectID": "user-guide/network.html#grid-points",
    "href": "user-guide/network.html#grid-points",
    "title": "Network",
    "section": "Grid Points",
    "text": "Grid Points\nGrid points are the computational points along a reach. A flow model has different types of grid points:\n\nH grid point: contains water level and an associated cross section.\nQ grid point: contains discharge or flow velocity.\nStructure grid point: calculates discharge over a structure depending on the water levels on each side of the structure.",
    "crumbs": [
      "Home",
      "User Guide",
      "Network"
    ]
  },
  {
    "objectID": "user-guide/network.html#nodes",
    "href": "user-guide/network.html#nodes",
    "title": "Network",
    "section": "Nodes",
    "text": "Nodes\nNodes are connected together by reaches. Nodes can represent different entities: manholes, basins, outlets, and junction nodes. They may or may not have a volume.",
    "crumbs": [
      "Home",
      "User Guide",
      "Network"
    ]
  },
  {
    "objectID": "user-guide/network.html#catchments",
    "href": "user-guide/network.html#catchments",
    "title": "Network",
    "section": "Catchments",
    "text": "Catchments\nCatchments are areas connected to either nodes or grid points, and act as boundary conditions for inputting loads to the network.",
    "crumbs": [
      "Home",
      "User Guide",
      "Network"
    ]
  },
  {
    "objectID": "user-guide/network.html#additional-resources",
    "href": "user-guide/network.html#additional-resources",
    "title": "Network",
    "section": "Additional resources",
    "text": "Additional resources\n\nMIKE 1D API",
    "crumbs": [
      "Home",
      "User Guide",
      "Network"
    ]
  },
  {
    "objectID": "user-guide/locations.html",
    "href": "user-guide/locations.html",
    "title": "Locations",
    "section": "",
    "text": "Locations are where model results exist in the Network. The main location types are nodes, reaches, and catchments",
    "crumbs": [
      "Home",
      "User Guide",
      "Locations"
    ]
  },
  {
    "objectID": "user-guide/locations.html#data-structures",
    "href": "user-guide/locations.html#data-structures",
    "title": "Locations",
    "section": "Data structures",
    "text": "Data structures\nThere are two main data structures for locations: location collections (ResultLocations) and single locations (ResultLocation).\n\nLocation collections\nAccess location collections from a Res1D object. Each collection shows available quantities and location IDs.\n\nres.nodes\n\n&lt;ResultNodes&gt; (119)\n    \n    Quantities (1)Water level (m)Derived Quantities (3)NodeFloodingNodeWaterDepthNodeWaterLevelAboveCritical\n\n\n\nres.reaches\n\n&lt;ResultReaches&gt; (118)\n    \n    Quantities (2)Water level (m)Discharge (m^3/s)Derived Quantities (6)ReachAbsoluteDischargeReachFillingReachFloodingReachQQManningReachWaterDepthReachWaterLevelAboveCritical\n\n\n\nres_catchments.catchments\n\n&lt;ResultCatchments&gt; (31)\n    \n    Quantities (5)Total Runoff (m^3/s)Actual Rainfall (m/s)Zink, Load, RR (kg/s)Zink, Mass, Accumulated, RR (kg)Zink, RR (mg/l)Derived Quantities (0)\n\n\n\n\n\n\n\n\nNote\n\n\n\nGridpoints only exist as single locations on a reach, and have no collection.\n\n\n\n\nSingle locations\nAccess a single location by indexing its respective collection with its unique ID. Each location shows available quantities and static properties.\n\nres.nodes['1']\n\n&lt;Manhole: 1&gt;\n    \n    Attributes (8)id: 1type: Manholexcoord: -687934.6000976562ycoord: -1056500.69921875ground_level: 197.07000732421875bottom_level: 195.0500030517578critical_level: infdiameter: 1.0Quantities (1)Water level (m)Derived Quantities (3)NodeFloodingNodeWaterDepthNodeWaterLevelAboveCritical\n\n\n\nres.reaches['100l1']\n\n&lt;Reach: 100l1&gt;\n    \n    Attributes (9)name: 100l1length: 47.6827148432828start_chainage: 0.0end_chainage: 47.6827148432828n_gridpoints: 3start_node: 100end_node: 99height: 0.30000001192092896full_flow_discharge: 0.12058743359507902Quantities (2)Water level (m)Discharge (m^3/s)Derived Quantities (6)ReachAbsoluteDischargeReachFillingReachFloodingReachQQManningReachWaterDepthReachWaterLevelAboveCritical\n\n\n\n# gridpoint on reach 100l1 at chainage 23.841\nres.reaches['100l1']['23.841']\n\n&lt;ResultGridPoint&gt;\n    \n    Attributes (5)reach_name: 100l1chainage: 23.8413574216414xcoord: -687897.8000488281ycoord: -1056390.4503479004bottom_level: 195.0500030517578Quantities (1)Discharge (m^3/s)Derived Quantities (0)\n\n\n\n\n\n\n\n\nTip\n\n\n\nGridpoints can also be indexed by number instead of chainage. For example:\n\nres.reaches['100l1'][0]  # first gridpoint\nres.reaches['100l1'][-1] # last gridpoint\n\n\n\n\nres_catchments.catchments['100_16_16']\n\n&lt;Catchment: 100_16_16&gt;\n    \n    Attributes (3)id: 100_16_16area: 22800.0type: Kinematic WaveQuantities (5)Total Runoff (m^3/s)Actual Rainfall (m/s)Zink, Load, RR (kg/s)Zink, Mass, Accumulated, RR (kg)Zink, RR (mg/l)Derived Quantities (0)",
    "crumbs": [
      "Home",
      "User Guide",
      "Locations"
    ]
  },
  {
    "objectID": "user-guide/locations.html#quantities",
    "href": "user-guide/locations.html#quantities",
    "title": "Locations",
    "section": "Quantities",
    "text": "Quantities\nQuantities are the actual model results. Each single location or location collection has associated quantities.\n\nres.nodes.WaterLevel\n\n&lt;QuantityCollection (119): Water level (m)&gt;\n\n\n\nres.nodes['1'].WaterLevel\n\n&lt;Quantity: Water level (m)&gt;\n\n\n\n\n\n\n\n\nCan’t find a which location a quantity belongs to?\n\n\n\n\n\nThe Network structure is generic and applies across different domains (e.g. collection systems, water distribution, rivers). Sometimes this can be challenging to find a particular result. Here are some examples of result types mapped onto this structure.\n\n\n\nLocation\nExample quantities\n\n\n\n\nNodes\nWater level (e.g. manhole, basin, outlet, junction)\n\n\n\nPump discharge in structure\n\n\nReaches\nDischarge (e.g. pipes, pumps, weirs)\n\n\n\nWater level (e.g. at specific chainges)\n\n\nCatchments\nCatchment discharge\n\n\n\nTotal runoff\n\n\nGlobal\nWater balance\n\n\n\nUser defined variable types\n\n\n\n\n\n\nRefer to the Quantities page for more information on how to read and plot the returned quantities.",
    "crumbs": [
      "Home",
      "User Guide",
      "Locations"
    ]
  },
  {
    "objectID": "user-guide/locations.html#static-attributes",
    "href": "user-guide/locations.html#static-attributes",
    "title": "Locations",
    "section": "Static attributes",
    "text": "Static attributes\nEach location has a set of static attributes.\n\nres.nodes['1'].ground_level\n\n197.07000732421875",
    "crumbs": [
      "Home",
      "User Guide",
      "Locations"
    ]
  },
  {
    "objectID": "user-guide/locations.html#reading-data",
    "href": "user-guide/locations.html#reading-data",
    "title": "Locations",
    "section": "Reading data",
    "text": "Reading data\nAll result data for a single location or location collection can be read into a pandas DataFrame.\n\ndf = res.reaches['100l1'].read()\ndf.head()\n\n\n\n\n\n\n\n\nWaterLevel:100l1:0\nWaterLevel:100l1:47.6827\nDischarge:100l1:23.8414\n\n\n\n\n1994-08-07 16:35:00.000\n195.441498\n194.661499\n0.000006\n\n\n1994-08-07 16:36:01.870\n195.441498\n194.661621\n0.000006\n\n\n1994-08-07 16:37:07.560\n195.441498\n194.661728\n0.000006\n\n\n1994-08-07 16:38:55.828\n195.441498\n194.661804\n0.000006\n\n\n1994-08-07 16:39:55.828\n195.441498\n194.661972\n0.000006\n\n\n\n\n\n\n\n\ndf = res.reaches.read()\ndf.head()\n\n\n\n\n\n\n\n\nWaterLevel:100l1:0\nWaterLevel:100l1:47.6827\nWaterLevel:101l1:0\nWaterLevel:101l1:66.4361\nWaterLevel:102l1:0\nWaterLevel:102l1:10.9366\nWaterLevel:103l1:0\nWaterLevel:103l1:26.0653\nWaterLevel:104l1:0\nWaterLevel:104l1:34.4131\n...\nDischarge:93l1:24.5832\nDischarge:94l1:21.2852\nDischarge:95l1:21.9487\nDischarge:96l1:14.9257\nDischarge:97l1:5.71207\nDischarge:98l1:8.00489\nDischarge:99l1:22.2508\nDischarge:9l1:5\nDischarge:Weir:119w1:0.5\nDischarge:Pump:115p1:41.214\n\n\n\n\n1994-08-07 16:35:00.000\n195.441498\n194.661499\n195.931503\n195.441498\n193.550003\n193.550003\n195.801498\n195.701508\n197.072006\n196.962006\n...\n0.000004\n0.000003\n0.000001\n0.000005\n0.000013\n0.000003\n0.000002\n0.000031\n0.0\n0.0\n\n\n1994-08-07 16:36:01.870\n195.441498\n194.661621\n195.931503\n195.441605\n193.550140\n193.550064\n195.801498\n195.703171\n197.072006\n196.962051\n...\n0.000004\n0.000003\n0.000001\n0.000005\n0.000010\n0.000003\n0.000002\n0.000031\n0.0\n0.0\n\n\n1994-08-07 16:37:07.560\n195.441498\n194.661728\n195.931503\n195.441620\n193.550232\n193.550156\n195.801498\n195.703400\n197.072006\n196.962082\n...\n0.000004\n0.000003\n0.000001\n0.000005\n0.000010\n0.000003\n0.000002\n0.000033\n0.0\n0.0\n\n\n1994-08-07 16:38:55.828\n195.441498\n194.661804\n195.931503\n195.441605\n193.550369\n193.550308\n195.801498\n195.703690\n197.072006\n196.962112\n...\n0.000004\n0.000003\n0.000001\n0.000005\n0.000009\n0.000003\n0.000002\n0.000037\n0.0\n0.0\n\n\n1994-08-07 16:39:55.828\n195.441498\n194.661972\n195.931503\n195.441605\n193.550430\n193.550369\n195.801498\n195.703827\n197.072006\n196.962128\n...\n0.000004\n0.000003\n0.000001\n0.000005\n0.000009\n0.000003\n0.000002\n0.000039\n0.0\n0.0\n\n\n\n\n5 rows × 376 columns",
    "crumbs": [
      "Home",
      "User Guide",
      "Locations"
    ]
  },
  {
    "objectID": "user-guide/locations.html#geodataframes",
    "href": "user-guide/locations.html#geodataframes",
    "title": "Locations",
    "section": "GeoDataFrames",
    "text": "GeoDataFrames\nLocations collections can be extracted into a GeoDataFrame, both with and without quantities.\n\ngdf = res.reaches.to_geopandas()\ngdf.plot()\n\n\n\n\n\n\n\n\n\ngdf = res.reaches.to_geopandas(agg='max')\ngdf.plot(column='max_Discharge', linewidth=3, cmap='RdYlGn_r', legend=True)",
    "crumbs": [
      "Home",
      "User Guide",
      "Locations"
    ]
  },
  {
    "objectID": "user-guide/locations.html#examples",
    "href": "user-guide/locations.html#examples",
    "title": "Locations",
    "section": "Examples",
    "text": "Examples\n\nRes1D Basics\nRes1D Export to shapefile\n\n\n\n\n\n\n\nTip\n\n\n\nThere are also several notebook examples available on our GitHub repositoryhttps://github.com/DHI/mikeio1d/tree/main/notebooks.",
    "crumbs": [
      "Home",
      "User Guide",
      "Locations"
    ]
  },
  {
    "objectID": "user-guide/res1d.html",
    "href": "user-guide/res1d.html",
    "title": "Res1D",
    "section": "",
    "text": "Res1D is the main interface for accessing data on a Network. Create a Res1D object by providing the path to a supported file type.",
    "crumbs": [
      "Home",
      "User Guide",
      "Res1D"
    ]
  },
  {
    "objectID": "user-guide/res1d.html#supported-file-types",
    "href": "user-guide/res1d.html#supported-file-types",
    "title": "Res1D",
    "section": "Supported file types",
    "text": "Supported file types\nSupport is provided for MIKE collection system, water distribution, and river modelling result files. Specific file extensions supported include:\n\nMIKE 1D network and catchment res1d files\nMIKE 1D Long Term Statistics (LTS) res1d files\nEPANET res, resx, and whr files generated by MIKE+\nSWMM out files\nMOUSE legacy prf, crf, and xrf files\nMIKE 11 res11 files\n\n\n\n\n\n\n\nNote\n\n\n\nAll file types use the Res1D object despite their different file extensions. Behind the scenes, they are converted into the common Res1D format.",
    "crumbs": [
      "Home",
      "User Guide",
      "Res1D"
    ]
  },
  {
    "objectID": "user-guide/res1d.html#opening-files",
    "href": "user-guide/res1d.html#opening-files",
    "title": "Res1D",
    "section": "Opening files",
    "text": "Opening files\nNetwork result files can be opened with mikeio1d.open.\n\nimport mikeio1d\nres = mikeio1d.open('../data/network.res1d')\nres\n\n&lt;mikeio1d.Res1D&gt;\n\n\nAlternatively, you can explicitly create an instance of Res1D:\n\nfrom mikeio1d import Res1D\nres = Res1D('../data/network.res1d')\nres\n\n&lt;mikeio1d.Res1D&gt;",
    "crumbs": [
      "Home",
      "User Guide",
      "Res1D"
    ]
  },
  {
    "objectID": "user-guide/res1d.html#exploring-contents",
    "href": "user-guide/res1d.html#exploring-contents",
    "title": "Res1D",
    "section": "Exploring contents",
    "text": "Exploring contents\nAn overview of the file contents can be obtained by calling the info method.\n\nres.info()\n\nStart time: 1994-08-07 16:35:00\nEnd time: 1994-08-07 18:35:00\n# Timesteps: 110\n# Catchments: 0\n# Nodes: 119\n# Reaches: 118\n# Globals: 0\n0 - Water level (m)\n1 - Discharge (m^3/s)\n\n\nThe unique quantity IDs are accessible via the quantities attribute.\n\nres.quantities\n\n['WaterLevel', 'Discharge']\n\n\nAll results share a common time index, which can be accessed via the quantities attribute.\n\nres.time_index\n\nDatetimeIndex([       '1994-08-07 16:35:00', '1994-08-07 16:36:01.870000',\n               '1994-08-07 16:37:07.560000', '1994-08-07 16:38:55.828000',\n               '1994-08-07 16:39:55.828000', '1994-08-07 16:40:55.828000',\n               '1994-08-07 16:41:55.828000', '1994-08-07 16:42:55.828000',\n               '1994-08-07 16:43:55.828000', '1994-08-07 16:44:55.828000',\n               ...\n               '1994-08-07 18:25:07.967000', '1994-08-07 18:26:07.967000',\n               '1994-08-07 18:27:07.967000', '1994-08-07 18:28:07.967000',\n               '1994-08-07 18:29:07.967000', '1994-08-07 18:30:07.967000',\n               '1994-08-07 18:31:07.967000', '1994-08-07 18:32:07.967000',\n               '1994-08-07 18:33:07.967000',        '1994-08-07 18:35:00'],\n              dtype='datetime64[ns]', length=110, freq=None)",
    "crumbs": [
      "Home",
      "User Guide",
      "Res1D"
    ]
  },
  {
    "objectID": "user-guide/res1d.html#reading-all-data",
    "href": "user-guide/res1d.html#reading-all-data",
    "title": "Res1D",
    "section": "Reading all data",
    "text": "Reading all data\nAll data can be read into a DataFrame by calling the mikeio1d.Res1D.read method.\n\ndf = res.read()\ndf.head()\n\n\n\n\n\n\n\n\nWaterLevel:1\nWaterLevel:2\nWaterLevel:3\nWaterLevel:4\nWaterLevel:5\nWaterLevel:6\nWaterLevel:7\nWaterLevel:8\nWaterLevel:9\nWaterLevel:10\n...\nDischarge:99l1:22.2508\nWaterLevel:9l1:0\nWaterLevel:9l1:10\nDischarge:9l1:5\nWaterLevel:Weir:119w1:0\nWaterLevel:Weir:119w1:1\nDischarge:Weir:119w1:0.5\nWaterLevel:Pump:115p1:0\nWaterLevel:Pump:115p1:82.4281\nDischarge:Pump:115p1:41.214\n\n\n\n\n1994-08-07 16:35:00.000\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.625000\n193.675003\n193.764999\n193.774994\n193.804993\n...\n0.000002\n193.774994\n193.764999\n0.000031\n193.550003\n188.479996\n0.0\n193.304993\n195.005005\n0.0\n\n\n1994-08-07 16:36:01.870\n195.052994\n195.821701\n195.8815\n193.604996\n193.615005\n193.625320\n193.675110\n193.765060\n193.775116\n193.804993\n...\n0.000002\n193.775070\n193.765060\n0.000031\n193.550003\n188.479996\n0.0\n193.306061\n195.005005\n0.0\n\n\n1994-08-07 16:37:07.560\n195.052994\n195.821640\n195.8815\n193.604996\n193.615005\n193.625671\n193.675369\n193.765106\n193.775513\n193.804993\n...\n0.000002\n193.775391\n193.765106\n0.000033\n193.550034\n188.479996\n0.0\n193.307144\n195.005005\n0.0\n\n\n1994-08-07 16:38:55.828\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.626236\n193.675751\n193.765228\n193.776077\n193.804993\n...\n0.000002\n193.775894\n193.765228\n0.000037\n193.550079\n188.479996\n0.0\n193.308884\n195.005005\n0.0\n\n\n1994-08-07 16:39:55.828\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.626556\n193.675949\n193.765335\n193.776352\n193.804993\n...\n0.000002\n193.776154\n193.765335\n0.000039\n193.550095\n188.479996\n0.0\n193.309860\n195.005005\n0.0\n\n\n\n\n5 rows × 495 columns",
    "crumbs": [
      "Home",
      "User Guide",
      "Res1D"
    ]
  },
  {
    "objectID": "user-guide/res1d.html#accessing-locations",
    "href": "user-guide/res1d.html#accessing-locations",
    "title": "Res1D",
    "section": "Accessing locations",
    "text": "Accessing locations\nLocations are where model results exist in the network. The main location types are nodes, reaches, and catchments.\n\nres.reaches\n\n&lt;ResultReaches&gt; (118)\n    \n    Quantities (2)Water level (m)Discharge (m^3/s)Derived Quantities (6)ReachAbsoluteDischargeReachFillingReachFloodingReachQQManningReachWaterDepthReachWaterLevelAboveCritical\n\n\n\nres.nodes\n\n&lt;ResultNodes&gt; (119)\n    \n    Quantities (1)Water level (m)Derived Quantities (3)NodeFloodingNodeWaterDepthNodeWaterLevelAboveCritical\n\n\n\nres_cat = mikeio1d.open('../data/catchments.res1d')\nres_cat.catchments\n\n&lt;ResultCatchments&gt; (31)\n    \n    Quantities (5)Total Runoff (m^3/s)Actual Rainfall (m/s)Zink, Load, RR (kg/s)Zink, Mass, Accumulated, RR (kg)Zink, RR (mg/l)Derived Quantities (0)",
    "crumbs": [
      "Home",
      "User Guide",
      "Res1D"
    ]
  },
  {
    "objectID": "user-guide/res1d.html#modifying-data",
    "href": "user-guide/res1d.html#modifying-data",
    "title": "Res1D",
    "section": "Modifying data",
    "text": "Modifying data\nLimited functionality is provided for modifying result data. A common use case for this is hotstart files. Modifying static network data is not supported.\n\n# Add 1m to the water level of the node with ID '1'.\ndf = res.read(column_mode='timeseries')\ndf_modified = df.copy()\nindex_to_mod = res.nodes['1'].WaterLevel.timeseries_id\ndf_modified[index_to_mod] = df_modified[index_to_mod] + 1\nres.modify(df_modified, file_path='modified.res1d')\n\n\n\nimport os\nos.remove('modified.res1d')",
    "crumbs": [
      "Home",
      "User Guide",
      "Res1D"
    ]
  },
  {
    "objectID": "user-guide/res1d.html#examples",
    "href": "user-guide/res1d.html#examples",
    "title": "Res1D",
    "section": "Examples",
    "text": "Examples\n\nRes1D Basics\nRes1D LTS\nRes1D Export to shapefile\nSWMM Basics\nEPANET Basics\n\n\n\n\n\n\n\nTip\n\n\n\nThere are also several notebook examples available on our GitHub repositoryhttps://github.com/DHI/mikeio1d/tree/main/notebooks.",
    "crumbs": [
      "Home",
      "User Guide",
      "Res1D"
    ]
  },
  {
    "objectID": "examples/res1d_LTS.html",
    "href": "examples/res1d_LTS.html",
    "title": "Res1D - long term statistics (LTS)",
    "section": "",
    "text": "import mikeio1d",
    "crumbs": [
      "Home",
      "Examples",
      "Res1D - long term statistics (LTS)"
    ]
  },
  {
    "objectID": "examples/res1d_LTS.html#event-statistics",
    "href": "examples/res1d_LTS.html#event-statistics",
    "title": "Res1D - long term statistics (LTS)",
    "section": "Event statistics",
    "text": "Event statistics\n\nres = mikeio1d.open(\"../data/lts_event_statistics.res1d\")\nres.info()\n\nStart time: 1957-01-01 00:00:00\nEnd time: 1963-01-01 00:00:00\n# Timesteps: 10\n# Catchments: 0\n# Nodes: 16\n# Reaches: 17\n# Globals: 0\n0 - Water level, Maximum (m)\n1 - Water level, Maximum, Time (sec)\n2 - Discharge, Integrated (m^3)\n3 - Discharge, Integrated, Time (sec)\n4 - Discharge, Maximum (m^3/s)\n5 - Discharge, Maximum, Time (sec)\n6 - Discharge, Duration (h)\n7 - Discharge, Duration, Time (sec)\n8 - Component_1, Maximum (kg/m^3)\n9 - Component_1, Maximum, Time (sec)\n10 - Component_2, Maximum (kg/m^3)\n11 - Component_2, Maximum, Time (sec)\n12 - Component_1, Transport, Integrated (kg)\n13 - Component_1, Transport, Integrated, Time (sec)\n14 - Component_2, Transport, Integrated (kg)\n15 - Component_2, Transport, Integrated, Time (sec)\n16 - Surcharge, Maximum (m^3/s)\n17 - Surcharge, Maximum, Time (sec)\n18 - Surcharge, Integrated (m^3)\n19 - Surcharge, Integrated, Time (sec)\n20 - Surcharge, Duration (h)\n21 - Surcharge, Duration, Time (sec)\n22 - Flow velocity, Maximum (m/s)\n23 - Flow velocity, Maximum, Time (sec)\n\n\n\ndf = res.read()\ndf.head()\n\n\n\n\n\n\n\n\nWaterLevelMaximum:A0.0327\nWaterLevelMaximumTime:A0.0327\nDischargeIntegrated:A0.0327\nDischargeIntegratedTime:A0.0327\nDischargeMaximum:A0.0327\nDischargeMaximumTime:A0.0327\nDischargeDuration:A0.0327\nDischargeDurationTime:A0.0327\nComponent_1Maximum:A0.0327\nComponent_1MaximumTime:A0.0327\n...\nComponent_1MaximumTime:Pump:B4.1510p2:0\nComponent_1MaximumTime:Pump:B4.1510p2:80.0006\nComponent_2Maximum:Pump:B4.1510p2:0\nComponent_2Maximum:Pump:B4.1510p2:80.0006\nComponent_2MaximumTime:Pump:B4.1510p2:0\nComponent_2MaximumTime:Pump:B4.1510p2:80.0006\nComponent_1TransportIntegrated:Pump:B4.1510p2:40.0003\nComponent_1TransportIntegratedTime:Pump:B4.1510p2:40.0003\nComponent_2TransportIntegrated:Pump:B4.1510p2:40.0003\nComponent_2TransportIntegratedTime:Pump:B4.1510p2:40.0003\n\n\n\n\n0\n-1.000000e-35\n1957-01-01\n4684.849609\n1959-08-15 09:36:24\n1.256756\n1961-06-13 15:58:24\n9.108004\n1957-07-20 09:39:20\n-1.000000e-35\n1957-01-01\n...\n1961-09-05 15:54:40\n1957-06-11 10:27:52\n50.0\n50.0\n1961-09-05 15:54:40\n1957-06-11 10:27:52\n67.307213\n1961-09-05 14:31:28\n33.653606\n1961-09-05 14:31:28\n\n\n1\n-1.000000e-35\n1957-01-01\n4608.099609\n1961-09-05 12:17:20\n1.236605\n1961-09-05 15:02:24\n6.788862\n1957-06-11 04:12:20\n-1.000000e-35\n1957-01-01\n...\n1957-07-20 17:42:00\n1957-07-20 16:33:04\n50.0\n50.0\n1957-07-20 17:42:00\n1957-07-20 16:33:04\n45.068405\n1961-06-13 15:44:16\n22.534203\n1961-06-13 15:44:16\n\n\n2\n-1.000000e-35\n1957-01-01\n3744.287842\n1961-06-13 15:38:24\n0.958780\n1959-08-15 13:38:08\n5.560763\n1959-08-15 09:36:24\n-1.000000e-35\n1957-01-01\n...\n1958-05-26 00:36:16\n1958-05-26 00:44:24\n50.0\n50.0\n1958-05-26 00:36:16\n1958-05-26 00:44:24\n43.389675\n1958-05-25 23:16:16\n21.694838\n1958-05-25 23:16:16\n\n\n3\n-1.000000e-35\n1957-01-01\n3631.110596\n1958-05-25 21:11:20\n0.941482\n1958-05-25 23:35:16\n4.831801\n1961-09-05 12:17:20\n-1.000000e-35\n1957-01-01\n...\n1961-06-13 18:35:28\n1961-09-05 15:54:56\n50.0\n50.0\n1961-06-13 18:35:28\n1961-09-05 15:54:56\n35.251358\n1959-08-15 13:26:56\n17.625679\n1959-08-15 13:26:56\n\n\n4\n-1.000000e-35\n1957-01-01\n3070.262939\n1957-07-20 09:39:20\n0.878175\n1957-07-27 16:30:04\n4.549961\n1958-05-25 21:11:20\n-1.000000e-35\n1957-01-01\n...\n1959-08-15 16:23:04\n1959-08-15 16:04:08\n50.0\n50.0\n1959-08-15 16:23:04\n1959-08-15 16:04:08\n23.928904\n1957-06-04 15:09:51\n11.964452\n1957-06-04 15:09:51\n\n\n\n\n5 rows × 1562 columns\n\n\n\n\ndf[['WaterLevelMaximum:B4.1200', 'WaterLevelMaximumTime:B4.1200']]\n\n\n\n\n\n\n\n\nWaterLevelMaximum:B4.1200\nWaterLevelMaximumTime:B4.1200\n\n\n\n\n0\n20.357243\n1961-06-13 15:55:44\n\n\n1\n20.273409\n1961-09-05 14:48:00\n\n\n2\n20.067089\n1959-08-15 13:30:48\n\n\n3\n19.239136\n1957-07-27 16:22:48\n\n\n4\n19.165405\n1962-07-21 15:15:28\n\n\n5\n19.103199\n1961-08-22 06:40:48\n\n\n6\n18.928940\n1958-05-25 23:21:04\n\n\n7\n18.692797\n1959-07-11 19:06:48\n\n\n8\n18.399147\n1961-04-06 20:36:16\n\n\n9\n18.359352\n1959-08-15 09:56:00\n\n\n\n\n\n\n\n\nquantities = [c for c in df.columns if 'Discharge' in c and 'B4.1200l1:26.666' in c]\ndf[quantities]\n\n\n\n\n\n\n\n\nDischargeIntegrated:B4.1200l1:26.6666\nDischargeIntegratedTime:B4.1200l1:26.6666\nDischargeMaximum:B4.1200l1:26.6666\nDischargeMaximumTime:B4.1200l1:26.6666\nDischargeDuration:B4.1200l1:26.6666\nDischargeDurationTime:B4.1200l1:26.6666\n\n\n\n\n0\n1081.991333\n1961-09-05 12:17:20\n0.464411\n1961-06-13 15:44:16\n9.108004\n1957-07-20 09:39:20\n\n\n1\n1048.237183\n1959-08-15 09:36:24\n0.436320\n1959-08-15 13:27:52\n6.788862\n1957-06-11 04:12:20\n\n\n2\n908.647827\n1961-06-13 15:38:24\n0.377782\n1961-09-05 14:41:20\n5.560763\n1959-08-15 09:36:24\n\n\n3\n815.226196\n1958-05-25 21:11:20\n0.352194\n1961-08-22 06:39:12\n4.831801\n1961-09-05 12:17:20\n\n\n4\n664.019165\n1957-07-20 09:39:20\n0.328294\n1959-07-11 19:05:04\n4.549961\n1958-05-25 21:11:20\n\n\n5\n508.447784\n1957-06-04 14:28:20\n0.325543\n1957-07-27 16:21:48\n4.169593\n1958-05-24 19:07:20\n\n\n6\n501.339294\n1957-06-11 04:12:20\n0.314239\n1958-05-25 23:18:24\n4.119199\n1958-11-10 13:35:20\n\n\n7\n490.517639\n1962-07-21 13:50:24\n0.312885\n1962-07-21 15:14:56\n3.769463\n1957-09-07 22:18:20\n\n\n8\n418.507965\n1962-06-19 12:18:24\n0.298825\n1961-04-06 20:34:24\n3.661735\n1959-07-02 03:15:20\n\n\n9\n356.224335\n1957-07-27 16:09:20\n0.286779\n1961-09-25 00:51:28\n3.626211\n1962-06-19 12:18:24\n\n\n\n\n\n\n\n\ndf[\n    [\n        \"WaterLevelMaximum:B4.1200\",\n        \"WaterLevelMaximum:B4.1200l1:0\",\n        \"WaterLevelMaximum:B4.1200l1:479.999\",\n        \"WaterLevelMaximum:B4.1485\",\n    ]\n].plot()",
    "crumbs": [
      "Home",
      "Examples",
      "Res1D - long term statistics (LTS)"
    ]
  },
  {
    "objectID": "examples/res1d_LTS.html#chronological-statistics",
    "href": "examples/res1d_LTS.html#chronological-statistics",
    "title": "Res1D - long term statistics (LTS)",
    "section": "Chronological statistics",
    "text": "Chronological statistics\n\nres = mikeio1d.open(\"../data/lts_monthly_statistics.res1d\")\ndf = res.read()\ndf.head()\n\n\n\n\n\n\n\n\nDischargeIntegratedMonthly:A0.0327\nDischargeIntegratedMonthlyCount:A0.0327\nDischargeIntegratedMonthlyDuration:A0.0327\nComponent_1TransportIntegratedMonthly:A0.0327\nComponent_1TransportIntegratedMonthlyCount:A0.0327\nComponent_1TransportIntegratedMonthlyDuration:A0.0327\nComponent_2TransportIntegratedMonthly:A0.0327\nComponent_2TransportIntegratedMonthlyCount:A0.0327\nComponent_2TransportIntegratedMonthlyDuration:A0.0327\nDischargeIntegratedMonthly:B4.1200\n...\nComponent_2TransportIntegratedMonthlyDuration:Pump:B4.1510p2:40.0003\nDischargeIntegratedMonthlyOutlets\nDischargeIntegratedMonthlyWeirs\nDischargeIntegratedMonthlyTotalOutflow\nComponent_1TransportIntegratedMonthlyTotalEmission\nComponent_2TransportIntegratedMonthlyTotalEmission\nComponent_1TransportIntegratedMonthlyOutlets\nComponent_2TransportIntegratedMonthlyOutlets\nComponent_1TransportIntegratedMonthlyWeirs\nComponent_2TransportIntegratedMonthlyWeirs\n\n\n\n\n1957-01-01\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n1957-02-01\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n1957-03-01\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n1957-04-01\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n1957-05-01\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n\n\n5 rows × 759 columns\n\n\n\n\nquantities = [c for c in df.columns if 'Discharge' in c and 'B4.1200l1:26.666' in c]\ndf[quantities].head()\n\n\n\n\n\n\n\n\nDischargeIntegratedMonthly:B4.1200l1:26.6666\nDischargeIntegratedMonthlyCount:B4.1200l1:26.6666\nDischargeIntegratedMonthlyDuration:B4.1200l1:26.6666\n\n\n\n\n1957-01-01\n0.0\n0.0\n0.0\n\n\n1957-02-01\n0.0\n0.0\n0.0\n\n\n1957-03-01\n0.0\n0.0\n0.0\n\n\n1957-04-01\n0.0\n0.0\n0.0\n\n\n1957-05-01\n0.0\n0.0\n0.0\n\n\n\n\n\n\n\n\nprint(quantities[0])\ndf[quantities[0]].plot()\n\nDischargeIntegratedMonthly:B4.1200l1:26.6666\n\n\n\n\n\n\n\n\n\n\nprint(quantities[1])\ndf[quantities[1]].plot()\n\nDischargeIntegratedMonthlyCount:B4.1200l1:26.6666\n\n\n\n\n\n\n\n\n\n\nprint(quantities[2])\ndf[quantities[2]].plot()\n\nDischargeIntegratedMonthlyDuration:B4.1200l1:26.6666",
    "crumbs": [
      "Home",
      "Examples",
      "Res1D - long term statistics (LTS)"
    ]
  },
  {
    "objectID": "examples/res1d_basic.html",
    "href": "examples/res1d_basic.html",
    "title": "Res1D - basic",
    "section": "",
    "text": "import mikeio1d",
    "crumbs": [
      "Home",
      "Examples",
      "Res1D - basic"
    ]
  },
  {
    "objectID": "examples/res1d_basic.html#res1d",
    "href": "examples/res1d_basic.html#res1d",
    "title": "Res1D - basic",
    "section": "Res1D",
    "text": "Res1D\n\n# Check contents\nres = mikeio1d.open(\"../data/network.res1d\")\nres.info()\n\nStart time: 1994-08-07 16:35:00\nEnd time: 1994-08-07 18:35:00\n# Timesteps: 110\n# Catchments: 0\n# Nodes: 119\n# Reaches: 118\n# Globals: 0\n0 - Water level (m)\n1 - Discharge (m^3/s)\n\n\n\n# Extract results to a pandas DataFrame\ndf = res.read()\ndf.head()\n\n\n\n\n\n\n\n\nWaterLevel:1\nWaterLevel:2\nWaterLevel:3\nWaterLevel:4\nWaterLevel:5\nWaterLevel:6\nWaterLevel:7\nWaterLevel:8\nWaterLevel:9\nWaterLevel:10\n...\nDischarge:99l1:22.2508\nWaterLevel:9l1:0\nWaterLevel:9l1:10\nDischarge:9l1:5\nWaterLevel:Weir:119w1:0\nWaterLevel:Weir:119w1:1\nDischarge:Weir:119w1:0.5\nWaterLevel:Pump:115p1:0\nWaterLevel:Pump:115p1:82.4281\nDischarge:Pump:115p1:41.214\n\n\n\n\n1994-08-07 16:35:00.000\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.625000\n193.675003\n193.764999\n193.774994\n193.804993\n...\n0.000002\n193.774994\n193.764999\n0.000031\n193.550003\n188.479996\n0.0\n193.304993\n195.005005\n0.0\n\n\n1994-08-07 16:36:01.870\n195.052994\n195.821701\n195.8815\n193.604996\n193.615005\n193.625320\n193.675110\n193.765060\n193.775116\n193.804993\n...\n0.000002\n193.775070\n193.765060\n0.000031\n193.550003\n188.479996\n0.0\n193.306061\n195.005005\n0.0\n\n\n1994-08-07 16:37:07.560\n195.052994\n195.821640\n195.8815\n193.604996\n193.615005\n193.625671\n193.675369\n193.765106\n193.775513\n193.804993\n...\n0.000002\n193.775391\n193.765106\n0.000033\n193.550034\n188.479996\n0.0\n193.307144\n195.005005\n0.0\n\n\n1994-08-07 16:38:55.828\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.626236\n193.675751\n193.765228\n193.776077\n193.804993\n...\n0.000002\n193.775894\n193.765228\n0.000037\n193.550079\n188.479996\n0.0\n193.308884\n195.005005\n0.0\n\n\n1994-08-07 16:39:55.828\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.626556\n193.675949\n193.765335\n193.776352\n193.804993\n...\n0.000002\n193.776154\n193.765335\n0.000039\n193.550095\n188.479996\n0.0\n193.309860\n195.005005\n0.0\n\n\n\n\n5 rows × 495 columns\n\n\n\n\nReaches\n\n# See info related to nodes\nres.reaches\n\n&lt;ResultReaches&gt; (118)\n    \n    Quantities (2)Water level (m)Discharge (m^3/s)Derived Quantities (6)ReachAbsoluteDischargeReachFillingReachFloodingReachQQManningReachWaterDepthReachWaterLevelAboveCritical\n\n\n\n# Get reach water levels\ndf_reaches = res.reaches.WaterLevel.read()\ndf_reaches.head()\n\n\n\n\n\n\n\n\nWaterLevel:100l1:0\nWaterLevel:100l1:47.6827\nWaterLevel:101l1:0\nWaterLevel:101l1:66.4361\nWaterLevel:102l1:0\nWaterLevel:102l1:10.9366\nWaterLevel:103l1:0\nWaterLevel:103l1:26.0653\nWaterLevel:104l1:0\nWaterLevel:104l1:34.4131\n...\nWaterLevel:98l1:0\nWaterLevel:98l1:16.0098\nWaterLevel:99l1:0\nWaterLevel:99l1:44.5016\nWaterLevel:9l1:0\nWaterLevel:9l1:10\nWaterLevel:Weir:119w1:0\nWaterLevel:Weir:119w1:1\nWaterLevel:Pump:115p1:0\nWaterLevel:Pump:115p1:82.4281\n\n\n\n\n1994-08-07 16:35:00.000\n195.441498\n194.661499\n195.931503\n195.441498\n193.550003\n193.550003\n195.801498\n195.701508\n197.072006\n196.962006\n...\n194.581497\n194.511505\n194.661499\n194.581497\n193.774994\n193.764999\n193.550003\n188.479996\n193.304993\n195.005005\n\n\n1994-08-07 16:36:01.870\n195.441498\n194.661621\n195.931503\n195.441605\n193.550140\n193.550064\n195.801498\n195.703171\n197.072006\n196.962051\n...\n194.581497\n194.511841\n194.661575\n194.581497\n193.775070\n193.765060\n193.550003\n188.479996\n193.306061\n195.005005\n\n\n1994-08-07 16:37:07.560\n195.441498\n194.661728\n195.931503\n195.441620\n193.550232\n193.550156\n195.801498\n195.703400\n197.072006\n196.962082\n...\n194.581497\n194.511795\n194.661667\n194.581497\n193.775391\n193.765106\n193.550034\n188.479996\n193.307144\n195.005005\n\n\n1994-08-07 16:38:55.828\n195.441498\n194.661804\n195.931503\n195.441605\n193.550369\n193.550308\n195.801498\n195.703690\n197.072006\n196.962112\n...\n194.581497\n194.511581\n194.661865\n194.581497\n193.775894\n193.765228\n193.550079\n188.479996\n193.308884\n195.005005\n\n\n1994-08-07 16:39:55.828\n195.441498\n194.661972\n195.931503\n195.441605\n193.550430\n193.550369\n195.801498\n195.703827\n197.072006\n196.962128\n...\n194.581497\n194.511505\n194.661911\n194.581497\n193.776154\n193.765335\n193.550095\n188.479996\n193.309860\n195.005005\n\n\n\n\n5 rows × 247 columns\n\n\n\n\n# Plot water levels for a specific reach\nres.reaches['100l1'].WaterLevel.plot()\n\n\n\n\n\n\n\n\n\n# See info related to a specific reach\nres.reaches['100l1']\n\n&lt;Reach: 100l1&gt;\n    \n    Attributes (9)name: 100l1length: 47.6827148432828start_chainage: 0.0end_chainage: 47.6827148432828n_gridpoints: 3start_node: 100end_node: 99height: 0.30000001192092896full_flow_discharge: 0.12058743359507902Quantities (2)Water level (m)Discharge (m^3/s)Derived Quantities (6)ReachAbsoluteDischargeReachFillingReachFloodingReachQQManningReachWaterDepthReachWaterLevelAboveCritical\n\n\n\n\nGrid points\n\n# See grid point info for a reach by chainage\nres.reaches['100l1']['47.683']\n\n&lt;ResultGridPoint&gt;\n    \n    Attributes (5)reach_name: 100l1chainage: 47.6827148432828xcoord: -687907.999206543ycoord: -1056412.0bottom_level: 194.66000366210938Quantities (1)Water level (m)Derived Quantities (0)\n\n\n\n# Alternatively, index grid points by index number (e.g. '0' for first, '-1' for last, etc.).\nres.reaches['100l1'][-1]\n\n&lt;ResultGridPoint&gt;\n    \n    Attributes (5)reach_name: 100l1chainage: 47.6827148432828xcoord: -687907.999206543ycoord: -1056412.0bottom_level: 194.66000366210938Quantities (1)Water level (m)Derived Quantities (0)\n\n\n\n# Plot water level at a gridpoint\nres.reaches['100l1'][0].WaterLevel.plot()\n\n\n\n\n\n\n\n\n\n\nNodes\n\n# See info related to nodes\nres.nodes\n\n&lt;ResultNodes&gt; (119)\n    \n    Quantities (1)Water level (m)Derived Quantities (3)NodeFloodingNodeWaterDepthNodeWaterLevelAboveCritical\n\n\n\n# Get node water levels\ndf_nodes = res.nodes.WaterLevel.read()\ndf_nodes.head()\n\n\n\n\n\n\n\n\nWaterLevel:1\nWaterLevel:2\nWaterLevel:3\nWaterLevel:4\nWaterLevel:5\nWaterLevel:6\nWaterLevel:7\nWaterLevel:8\nWaterLevel:9\nWaterLevel:10\n...\nWaterLevel:46\nWaterLevel:55\nWaterLevel:58\nWaterLevel:116\nWaterLevel:117\nWaterLevel:118\nWaterLevel:115\nWaterLevel:119\nWaterLevel:120\nWaterLevel:Weir Outlet:119w1\n\n\n\n\n1994-08-07 16:35:00.000\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.625000\n193.675003\n193.764999\n193.774994\n193.804993\n...\n194.074997\n195.005005\n193.554993\n193.550003\n193.585007\n193.585007\n193.304993\n193.550003\n193.550003\n193.779999\n\n\n1994-08-07 16:36:01.870\n195.052994\n195.821701\n195.8815\n193.604996\n193.615005\n193.625320\n193.675110\n193.765060\n193.775116\n193.804993\n...\n194.074997\n195.005005\n193.555023\n193.550064\n193.585831\n193.586807\n193.306061\n193.550003\n193.550003\n188.479996\n\n\n1994-08-07 16:37:07.560\n195.052994\n195.821640\n195.8815\n193.604996\n193.615005\n193.625671\n193.675369\n193.765106\n193.775513\n193.804993\n...\n194.074997\n195.005005\n193.555084\n193.550110\n193.586426\n193.588196\n193.307144\n193.550034\n193.550003\n188.479996\n\n\n1994-08-07 16:38:55.828\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.626236\n193.675751\n193.765228\n193.776077\n193.804993\n...\n194.074997\n195.005005\n193.555191\n193.550156\n193.586960\n193.589706\n193.308884\n193.550079\n193.550003\n188.479996\n\n\n1994-08-07 16:39:55.828\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.626556\n193.675949\n193.765335\n193.776352\n193.804993\n...\n194.074997\n195.005005\n193.555267\n193.550171\n193.587112\n193.590317\n193.309860\n193.550095\n193.550003\n188.479996\n\n\n\n\n5 rows × 119 columns\n\n\n\n\n# Plot water level of specific node\nres.nodes['1'].WaterLevel.plot()\n\n\n\n\n\n\n\n\n\n# See info related to a specific node\nres.nodes['1']\n\n&lt;Manhole: 1&gt;\n    \n    Attributes (8)id: 1type: Manholexcoord: -687934.6000976562ycoord: -1056500.69921875ground_level: 197.07000732421875bottom_level: 195.0500030517578critical_level: infdiameter: 1.0Quantities (1)Water level (m)Derived Quantities (3)NodeFloodingNodeWaterDepthNodeWaterLevelAboveCritical\n\n\n\n\nCatchments\n\n# See info related to catchments\nres = mikeio1d.open(\"../data/catchments.res1d\")\nres.catchments\n\n&lt;ResultCatchments&gt; (31)\n    \n    Quantities (5)Total Runoff (m^3/s)Actual Rainfall (m/s)Zink, Load, RR (kg/s)Zink, Mass, Accumulated, RR (kg)Zink, RR (mg/l)Derived Quantities (0)\n\n\n\n# Extract runoff to a pandas DataFrame\ndf = res.catchments.TotalRunOff.read()\ndf.head()\n\n\n\n\n\n\n\n\nTotalRunOff:100_16_16\nTotalRunOff:105_1_1\nTotalRunOff:10_22_22\nTotalRunOff:113_21_21\nTotalRunOff:118_30_30\nTotalRunOff:119_32_32\nTotalRunOff:14_20_20\nTotalRunOff:20_2_2\nTotalRunOff:22_8_8\nTotalRunOff:25_26_26\n...\nTotalRunOff:64_12_12\nTotalRunOff:67_18_18\nTotalRunOff:6_25_25\nTotalRunOff:76_7_7\nTotalRunOff:79_10_10\nTotalRunOff:82_27_27\nTotalRunOff:84_15_15\nTotalRunOff:90_28_28\nTotalRunOff:94_9_9\nTotalRunOff:9_3_3\n\n\n\n\n1994-08-07 16:35:00\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n1994-08-07 16:36:00\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n1994-08-07 16:37:00\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n1994-08-07 16:38:00\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n1994-08-07 16:39:00\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n...\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n\n\n5 rows × 31 columns\n\n\n\n\n# Plot runoff for a specific catchment\ndf = res.catchments['20_2_2'].TotalRunOff.plot()",
    "crumbs": [
      "Home",
      "Examples",
      "Res1D - basic"
    ]
  },
  {
    "objectID": "examples/res1d_basic.html#dynamic-selections",
    "href": "examples/res1d_basic.html#dynamic-selections",
    "title": "Res1D - basic",
    "section": "Dynamic selections",
    "text": "Dynamic selections\n\n# Dynamically select results to extract into a pandas DataFrame.\nres = mikeio1d.open(\"../data/network.res1d\")\n\nres.reaches['100l1'].Discharge.add()\nres.reaches['101l1'].Discharge.add()\nres.nodes['1'].WaterLevel.add()\ndf = res.read()\ndf.head()\n\n\n\n\n\n\n\n\nDischarge:100l1:23.8414\nDischarge:101l1:33.218\nWaterLevel:1\n\n\n\n\n1994-08-07 16:35:00.000\n0.000006\n0.000004\n195.052994\n\n\n1994-08-07 16:36:01.870\n0.000006\n0.000004\n195.052994\n\n\n1994-08-07 16:37:07.560\n0.000006\n0.000004\n195.052994\n\n\n1994-08-07 16:38:55.828\n0.000006\n0.000004\n195.052994\n\n\n1994-08-07 16:39:55.828\n0.000006\n0.000004\n195.052994",
    "crumbs": [
      "Home",
      "Examples",
      "Res1D - basic"
    ]
  },
  {
    "objectID": "examples/swmm_basic.html",
    "href": "examples/swmm_basic.html",
    "title": "SWMM - basic",
    "section": "",
    "text": "Tip\n\n\n\nMIKE IO 1D treats SWMM and Res1D results in the same way, so you may also refer to Res1D examples.\n\n\n\nimport mikeio1d\n\n\nres = mikeio1d.open(\"../data/swmm.out\")\nres.info()\n\nStart time: 1998-01-01 01:00:00.001000\nEnd time: 1998-01-02 12:00:00.001000\n# Timesteps: 36\n# Catchments: 8\n# Nodes: 14\n# Reaches: 13\n# Globals: 15\n0 - Water depth (ft)\n1 - Hydraulic head (ft)\n2 - Volume stored & ponded (ft^3)\n3 - Lateral inflow rate (ft^3/s)\n4 - Total inflow rate (ft^3/s)\n5 - Overflow rate (ft^3/s)\n6 - TSS concentration (mu-g/l)\n7 - Discharge (ft^3/s)\n8 - Water Depth (ft)\n9 - Velocity (ft/s)\n10 - Volume (())\n11 - Capacity (())\n12 - TSS concentration (mu-g/l)\n13 - Rainfall intensity (in/h)\n14 - Snow depth (in)\n15 - Evap loss (in)\n16 - Infil loss (in/h)\n17 - Runoff flow (ft^3/s)\n18 - Groundwater flow (ft^3/s)\n19 - Elevation of saturated gw table (ft)\n20 - Soil moisture (())\n21 - TSS Washoff (mu-g/l)\n22 - Air temperature (deg F)\n23 - Rainfall intensity (in/h)\n24 - Snow depth (in)\n25 - Infil (in/h)\n26 - Runoff flow (ft^3/s)\n27 - Dry weather inflow (ft^3/s)\n28 - Ground water inflow (ft^3/s)\n29 - RDII inflow (ft^3/s)\n30 - External inflow (ft^3/s)\n31 - Total lateral inflow (ft^3/s)\n32 - Flooding outflow (ft^3/s)\n33 - Outfall outflow (ft^3/s)\n34 - Storage volume (ft^3)\n35 - Evaporation (-)\n36 - Potential ET (-)",
    "crumbs": [
      "Home",
      "Examples",
      "SWMM - basic"
    ]
  },
  {
    "objectID": "examples/swmm_basic.html#overview",
    "href": "examples/swmm_basic.html#overview",
    "title": "SWMM - basic",
    "section": "",
    "text": "Tip\n\n\n\nMIKE IO 1D treats SWMM and Res1D results in the same way, so you may also refer to Res1D examples.\n\n\n\nimport mikeio1d\n\n\nres = mikeio1d.open(\"../data/swmm.out\")\nres.info()\n\nStart time: 1998-01-01 01:00:00.001000\nEnd time: 1998-01-02 12:00:00.001000\n# Timesteps: 36\n# Catchments: 8\n# Nodes: 14\n# Reaches: 13\n# Globals: 15\n0 - Water depth (ft)\n1 - Hydraulic head (ft)\n2 - Volume stored & ponded (ft^3)\n3 - Lateral inflow rate (ft^3/s)\n4 - Total inflow rate (ft^3/s)\n5 - Overflow rate (ft^3/s)\n6 - TSS concentration (mu-g/l)\n7 - Discharge (ft^3/s)\n8 - Water Depth (ft)\n9 - Velocity (ft/s)\n10 - Volume (())\n11 - Capacity (())\n12 - TSS concentration (mu-g/l)\n13 - Rainfall intensity (in/h)\n14 - Snow depth (in)\n15 - Evap loss (in)\n16 - Infil loss (in/h)\n17 - Runoff flow (ft^3/s)\n18 - Groundwater flow (ft^3/s)\n19 - Elevation of saturated gw table (ft)\n20 - Soil moisture (())\n21 - TSS Washoff (mu-g/l)\n22 - Air temperature (deg F)\n23 - Rainfall intensity (in/h)\n24 - Snow depth (in)\n25 - Infil (in/h)\n26 - Runoff flow (ft^3/s)\n27 - Dry weather inflow (ft^3/s)\n28 - Ground water inflow (ft^3/s)\n29 - RDII inflow (ft^3/s)\n30 - External inflow (ft^3/s)\n31 - Total lateral inflow (ft^3/s)\n32 - Flooding outflow (ft^3/s)\n33 - Outfall outflow (ft^3/s)\n34 - Storage volume (ft^3)\n35 - Evaporation (-)\n36 - Potential ET (-)",
    "crumbs": [
      "Home",
      "Examples",
      "SWMM - basic"
    ]
  },
  {
    "objectID": "examples/swmm_basic.html#plot-network",
    "href": "examples/swmm_basic.html#plot-network",
    "title": "SWMM - basic",
    "section": "Plot network",
    "text": "Plot network\n\nax = res.reaches.to_geopandas().plot()\nres.nodes.to_geopandas().plot(ax=ax)\nres.catchments.to_geopandas().plot(ax=ax, alpha=0.5)",
    "crumbs": [
      "Home",
      "Examples",
      "SWMM - basic"
    ]
  },
  {
    "objectID": "examples/swmm_basic.html#explore-network",
    "href": "examples/swmm_basic.html#explore-network",
    "title": "SWMM - basic",
    "section": "Explore network",
    "text": "Explore network\n\nres.reaches\n\n&lt;ResultReaches&gt; (13)\n    \n    Quantities (6)Discharge (ft^3/s)Water Depth (ft)Velocity (ft/s)Volume (())Capacity (())TSS concentration (mu-g/l)Derived Quantities (0)\n\n\n\nres.nodes\n\n&lt;ResultNodes&gt; (14)\n    \n    Quantities (7)Water depth (ft)Hydraulic head (ft)Volume stored & ponded (ft^3)Lateral inflow rate (ft^3/s)Total inflow rate (ft^3/s)Overflow rate (ft^3/s)TSS concentration (mu-g/l)Derived Quantities (0)\n\n\n\nres.catchments\n\n&lt;ResultCatchments&gt; (8)\n    \n    Quantities (9)Rainfall intensity (in/h)Snow depth (in)Evap loss (in)Infil loss (in/h)Runoff flow (ft^3/s)Groundwater flow (ft^3/s)Elevation of saturated gw table (ft)Soil moisture (())TSS Washoff (mu-g/l)Derived Quantities (0)",
    "crumbs": [
      "Home",
      "Examples",
      "SWMM - basic"
    ]
  },
  {
    "objectID": "examples/swmm_basic.html#extract-results-to-a-dataframe",
    "href": "examples/swmm_basic.html#extract-results-to-a-dataframe",
    "title": "SWMM - basic",
    "section": "Extract results to a DataFrame",
    "text": "Extract results to a DataFrame\n\ndf = res.read()\ndf.head()\n\n\n\n\n\n\n\n\nSWMM_NODE_DEPTH:9\nSWMM_NODE_HEAD:9\nSWMM_NODE_VOLUME:9\nSWMM_NODE_LATFLOW:9\nSWMM_NODE_INFLOW:9\nSWMM_NODE_OVERFLOW:9\nSWMM_NODE_QUAL:9\nSWMM_NODE_QUAL:9\nSWMM_NODE_DEPTH:10\nSWMM_NODE_HEAD:10\n...\nSWMM_SYS_DWFLOW\nSWMM_SYS_GWFLOW\nSWMM_SYS_IIFLOW\nSWMM_SYS_EXFLOW\nSWMM_SYS_INFLOW\nSWMM_SYS_FLOODING\nSWMM_SYS_OUTFLOW\nSWMM_SYS_STORAGE\nSWMM_SYS_EVAP\nSWMM_SYS_PET\n\n\n\n\n1998-01-01 01:00:00.001\n0.000000\n1000.000000\n0.0\n0.000000\n0.000000\n0.0\n0.000000\n0.000000\n0.000000\n995.000000\n...\n0.0\n0.0\n0.0\n0.0\n0.000000\n0.000000\n0.000000\n0.000000\n0.0\n0.0\n\n\n1998-01-01 02:00:00.001\n0.288774\n1000.288757\n0.0\n1.239633\n1.239633\n0.0\n15.720075\n3.144015\n0.520309\n995.520325\n...\n0.0\n0.0\n0.0\n0.0\n6.216826\n0.000000\n6.128909\n1656.397217\n0.0\n0.0\n\n\n1998-01-01 03:00:00.001\n0.418453\n1000.418457\n0.0\n2.595429\n2.595429\n0.0\n15.389509\n3.077902\n3.000000\n998.000000\n...\n0.0\n0.0\n0.0\n0.0\n13.030855\n0.521967\n12.470544\n2796.561035\n0.0\n0.0\n\n\n1998-01-01 04:00:00.001\n0.567633\n1000.567627\n0.0\n4.645479\n4.645479\n0.0\n14.810841\n2.962168\n3.000000\n998.000000\n...\n0.0\n0.0\n0.0\n0.0\n24.252975\n4.511855\n19.521162\n3780.683594\n0.0\n0.0\n\n\n1998-01-01 05:00:00.001\n0.425047\n1000.425049\n0.0\n2.675368\n2.675368\n0.0\n14.338782\n2.867756\n3.000000\n998.000000\n...\n0.0\n0.0\n0.0\n0.0\n14.172027\n0.555154\n13.623661\n2913.430420\n0.0\n0.0\n\n\n\n\n5 rows × 298 columns\n\n\n\n\ndf = res.reaches['1'].SWMM_LINK_FLOW.read()\ndf.head()\n\n\n\n\n\n\n\n\nSWMM_LINK_FLOW:1\n\n\n\n\n1998-01-01 01:00:00.001\n0.000000\n\n\n1998-01-01 02:00:00.001\n1.235769\n\n\n1998-01-01 03:00:00.001\n2.593548\n\n\n1998-01-01 04:00:00.001\n4.638623\n\n\n1998-01-01 05:00:00.001\n2.675184",
    "crumbs": [
      "Home",
      "Examples",
      "SWMM - basic"
    ]
  },
  {
    "objectID": "examples/swmm_basic.html#plot-results",
    "href": "examples/swmm_basic.html#plot-results",
    "title": "SWMM - basic",
    "section": "Plot results",
    "text": "Plot results\n\nres.reaches['1'].SWMM_LINK_FLOW.plot()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(2)\nres.reaches['1'].SWMM_LINK_FLOW.plot(ax=ax[0])\nres.catchments['2'].SWMM_SUBCATCH_RUNOFF.plot(ax=ax[1])\n\nplt.tight_layout()",
    "crumbs": [
      "Home",
      "Examples",
      "SWMM - basic"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "MIKE IO 1D: input/output of MIKE 1D files in Python",
    "section": "Getting started",
    "text": "Getting started\n\nInstallation\npip install mikeio1d\n\n\n\n\n\n\nRequirements\n\n\n\n\n\n\nWindows, Linux\nPython x64 3.9 - 3.13\n(Windows) VC++ redistributables (already installed if you have MIKE)\n(Linux) .NET Runtime (not installed by default)\n\n\n\n\n\n\n\n\n\n\nUsing MIKE IO 1D with Linux?\n\n\n\n\n\nLinux users will need to install .NET runtime. If you’re on the development branch, you need .NET SDK. Ubuntu users can install these dependencies as follows:\nsudo apt install dotnet-runtime-8.0\nsudo apt install dotnet-sdk-8.0\n\n\n\n\n\nRead network results\nUse mikeio1d.open to create a Res1D object, then read its content into a DataFrame.\n\nimport mikeio1d\n\nres = mikeio1d.open(\"data/network.res1d\")\ndf = res.read()\ndf.head()\n\n\n\n\n\n\n\n\nWaterLevel:1\nWaterLevel:2\nWaterLevel:3\nWaterLevel:4\nWaterLevel:5\nWaterLevel:6\nWaterLevel:7\nWaterLevel:8\nWaterLevel:9\nWaterLevel:10\n...\nDischarge:99l1:22.2508\nWaterLevel:9l1:0\nWaterLevel:9l1:10\nDischarge:9l1:5\nWaterLevel:Weir:119w1:0\nWaterLevel:Weir:119w1:1\nDischarge:Weir:119w1:0.5\nWaterLevel:Pump:115p1:0\nWaterLevel:Pump:115p1:82.4281\nDischarge:Pump:115p1:41.214\n\n\n\n\n1994-08-07 16:35:00.000\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.625000\n193.675003\n193.764999\n193.774994\n193.804993\n...\n0.000002\n193.774994\n193.764999\n0.000031\n193.550003\n188.479996\n0.0\n193.304993\n195.005005\n0.0\n\n\n1994-08-07 16:36:01.870\n195.052994\n195.821701\n195.8815\n193.604996\n193.615005\n193.625320\n193.675110\n193.765060\n193.775116\n193.804993\n...\n0.000002\n193.775070\n193.765060\n0.000031\n193.550003\n188.479996\n0.0\n193.306061\n195.005005\n0.0\n\n\n1994-08-07 16:37:07.560\n195.052994\n195.821640\n195.8815\n193.604996\n193.615005\n193.625671\n193.675369\n193.765106\n193.775513\n193.804993\n...\n0.000002\n193.775391\n193.765106\n0.000033\n193.550034\n188.479996\n0.0\n193.307144\n195.005005\n0.0\n\n\n1994-08-07 16:38:55.828\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.626236\n193.675751\n193.765228\n193.776077\n193.804993\n...\n0.000002\n193.775894\n193.765228\n0.000037\n193.550079\n188.479996\n0.0\n193.308884\n195.005005\n0.0\n\n\n1994-08-07 16:39:55.828\n195.052994\n195.821503\n195.8815\n193.604996\n193.615005\n193.626556\n193.675949\n193.765335\n193.776352\n193.804993\n...\n0.000002\n193.776154\n193.765335\n0.000039\n193.550095\n188.479996\n0.0\n193.309860\n195.005005\n0.0\n\n\n\n\n5 rows × 495 columns\n\n\n\nRequest more specific data by using the Res1D object to select specific Locations.\n\ndf = res.reaches['100l1'].read()\ndf.head()\n\n\n\n\n\n\n\n\nWaterLevel:100l1:0\nWaterLevel:100l1:47.6827\nDischarge:100l1:23.8414\n\n\n\n\n1994-08-07 16:35:00.000\n195.441498\n194.661499\n0.000006\n\n\n1994-08-07 16:36:01.870\n195.441498\n194.661621\n0.000006\n\n\n1994-08-07 16:37:07.560\n195.441498\n194.661728\n0.000006\n\n\n1994-08-07 16:38:55.828\n195.441498\n194.661804\n0.000006\n\n\n1994-08-07 16:39:55.828\n195.441498\n194.661972\n0.000006\n\n\n\n\n\n\n\nSimilarly, select a specific Quantity that you can both read and plot.\n\nres.nodes['100'].WaterLevel.plot()\n\n\n\n\n\n\n\n\n\n\nRead cross section data\nUse mikeio1d.open to create an Xns11 object, then get a DataFrame overview of its content.\n\nxns = mikeio1d.open(\"data/mikep_cs_demo.xns11\")\nxns.to_dataframe()\n\n\n\n\n\n\n\n\n\n\ncross_section\n\n\nlocation_id\nchainage\ntopo_id\n\n\n\n\n\nbasin_left1\n2.004\n1\n&lt;CrossSection: basin_left1, 2.004, 1&gt;\n\n\n33.774\n1\n&lt;CrossSection: basin_left1, 33.774, 1&gt;\n\n\n80.945\n1\n&lt;CrossSection: basin_left1, 80.945, 1&gt;\n\n\n122.042\n1\n&lt;CrossSection: basin_left1, 122.042, 1&gt;\n\n\n166.107\n1\n&lt;CrossSection: basin_left1, 166.107, 1&gt;\n\n\n...\n...\n...\n...\n\n\ntributary\n250.000\ntributary\n&lt;CrossSection: tributary, 250.000, tributary&gt;\n\n\n300.000\ntributary\n&lt;CrossSection: tributary, 300.000, tributary&gt;\n\n\n400.000\ntributary\n&lt;CrossSection: tributary, 400.000, tributary&gt;\n\n\n450.000\ntributary\n&lt;CrossSection: tributary, 450.000, tributary&gt;\n\n\n500.000\ntributary\n&lt;CrossSection: tributary, 500.000, tributary&gt;\n\n\n\n\n103 rows × 1 columns\n\n\n\nSelect a specific CrossSection using sel, then plot it with plot.\n\nxs = xns.sel(location_id=\"basin_left1\", chainage=122.042, topo_id='1')\nxs.plot()"
  },
  {
    "objectID": "index.html#learn-more",
    "href": "index.html#learn-more",
    "title": "MIKE IO 1D: input/output of MIKE 1D files in Python",
    "section": "Learn more",
    "text": "Learn more\nContinue your learning journey with any of these resources:\n\nUser Guide: covers fundamentals with short code examples.\nExamples: various notebook examples.\n\nWe recommend starting with the User Guide, however, feel free to also hop directly into the examples."
  },
  {
    "objectID": "index.html#where-can-i-get-help",
    "href": "index.html#where-can-i-get-help",
    "title": "MIKE IO 1D: input/output of MIKE 1D files in Python",
    "section": "Where can I get help?",
    "text": "Where can I get help?\n\nNew ideas and feature requests - GitHub Discussions\nBugs - GitHub Issues"
  },
  {
    "objectID": "api/Xns11.html",
    "href": "api/Xns11.html",
    "title": "Xns11",
    "section": "",
    "text": "Xns11(self, file_path=None, *args, **kwargs)\nA class to read and write xns11 files.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfile_path\nstr | Path\nfull path and file name to the xns11 file.\nNone\n\n\n\n\n\n\nThe Xns11 class is a subclass of CrossSectionCollection. The main difference is that Xns11 has a file_path property to track where the file was last loaded from or saved to.\n\n\n\n# Open an existing file\n&gt;&gt;&gt; xns = Xns11(\"file.xns11\")\n\n# Overview of the cross sections\n&gt;&gt;&gt; xns.to_dataframe()\n\n# Read a specific cross section\n&gt;&gt;&gt; xs = xns.sel(location_id='basin_left1', chainage='122.042', topo_id='1')\n\n# Plot a cross section\n&gt;&gt;&gt; xs.plot()\n\n# Access cross section raw data\n&gt;&gt;&gt; xs.raw_data\n\n# Access cross section processed data\n&gt;&gt;&gt; xs.processed_data\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nchainages\nUnique chainages in the collection (as string with 3 decimals).\n\n\ncross_section_data\nThe DHI.Mike1D.CrossSectionModule.CrossSectionData object.\n\n\ndata\nThe DHI.Mike1D.CrossSectionModule.CrossSectionData object.\n\n\nfile_path\nFull path and file name to the xns11 file.\n\n\ninterpolation_type\nDefines how an interpolated cross section is interpolated.\n\n\nlocation_ids\nUnique location IDs in the collection.\n\n\ntopo_ids\nUnique topo IDs in the collection.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd\nAdd a cross section to the collection.\n\n\nfrom_cross_section_collection\nCreate a Xns11 object from a CrossSectionCollection.\n\n\nget_supported_file_extensions\nGet supported file extensions for Xns11.\n\n\nplot\nPlot all cross sections in the collection.\n\n\nremove\nRemove a cross section from the collection.\n\n\nsel\nSelect cross sections from the collection.\n\n\nto_dataframe\nConvert the collection to a DataFrame.\n\n\nto_geopandas\nConvert the collection to a GeoDataFrame.\n\n\nto_xns11\nSave the collection to an Xns11 file.\n\n\nwrite\nWrite cross section data to an xns11 file.\n\n\n\n\n\nXns11.add(cross_section)\nAdd a cross section to the collection.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncross_section\nCrossSection\nCross section to add.\nrequired\n\n\n\n\n\n\n\nXns11.from_cross_section_collection(xsections)\nCreate a Xns11 object from a CrossSectionCollection.\n\n\n\nXns11.get_supported_file_extensions()\nGet supported file extensions for Xns11.\n\n\n\nXns11.plot(*args, **kwargs)\nPlot all cross sections in the collection.\n\n\n\nXns11.remove(cross_section)\nRemove a cross section from the collection.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncross_section\nCrossSection\nCross section to remove.\nrequired\n\n\n\n\n\n\n\nXns11.sel(location_id=..., chainage=..., topo_id=...)\nSelect cross sections from the collection.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlocation_id\nstr\nLocation ID of the cross section.\n...\n\n\nchainage\nstr | float\nChainage of the cross section.\n...\n\n\ntopo_id\nstr\nTopo ID of the cross section.\n...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nCrossSection or list[CrossSection]\nProviding all arguments will return a CrossSection. Provinding partial arguments will always return a list, even if it only includes one CrossSection.\n\n\n\n\n\n\n\nXns11.to_dataframe()\nConvert the collection to a DataFrame.\n\n\n\nXns11.to_geopandas(mode='sections')\nConvert the collection to a GeoDataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmode\nstr\nMode of conversion. Options are “sections” and “markers”. Default is “sections”.\n'sections'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ngpd.GeoDataFrame\nGeoDataFrame with the cross sections or markers.\n\n\n\n\n\n\nThis method requires the geopandas package to be installed. Cross sections must have defined coordinates.\n\n\n\n\nXns11.to_xns11(file_name, **kwargs)\nSave the collection to an Xns11 file.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfile_name\nstr or Path\nPath to the file to save.\nrequired\n\n\n\n\n\n\n&gt;&gt;&gt; csc.to_xns11(\"cross_sections.xns11\")\n\n\n\n\nXns11.write(file_path=None)\nWrite cross section data to an xns11 file.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfile_path\nstr | Path\nFull file path of the xns11 file to be written. Default is the file_path used to open the file.\nNone"
  },
  {
    "objectID": "api/Xns11.html#parameters",
    "href": "api/Xns11.html#parameters",
    "title": "Xns11",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nfile_path\nstr | Path\nfull path and file name to the xns11 file.\nNone"
  },
  {
    "objectID": "api/Xns11.html#notes",
    "href": "api/Xns11.html#notes",
    "title": "Xns11",
    "section": "",
    "text": "The Xns11 class is a subclass of CrossSectionCollection. The main difference is that Xns11 has a file_path property to track where the file was last loaded from or saved to."
  },
  {
    "objectID": "api/Xns11.html#examples",
    "href": "api/Xns11.html#examples",
    "title": "Xns11",
    "section": "",
    "text": "# Open an existing file\n&gt;&gt;&gt; xns = Xns11(\"file.xns11\")\n\n# Overview of the cross sections\n&gt;&gt;&gt; xns.to_dataframe()\n\n# Read a specific cross section\n&gt;&gt;&gt; xs = xns.sel(location_id='basin_left1', chainage='122.042', topo_id='1')\n\n# Plot a cross section\n&gt;&gt;&gt; xs.plot()\n\n# Access cross section raw data\n&gt;&gt;&gt; xs.raw_data\n\n# Access cross section processed data\n&gt;&gt;&gt; xs.processed_data"
  },
  {
    "objectID": "api/Xns11.html#attributes",
    "href": "api/Xns11.html#attributes",
    "title": "Xns11",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nchainages\nUnique chainages in the collection (as string with 3 decimals).\n\n\ncross_section_data\nThe DHI.Mike1D.CrossSectionModule.CrossSectionData object.\n\n\ndata\nThe DHI.Mike1D.CrossSectionModule.CrossSectionData object.\n\n\nfile_path\nFull path and file name to the xns11 file.\n\n\ninterpolation_type\nDefines how an interpolated cross section is interpolated.\n\n\nlocation_ids\nUnique location IDs in the collection.\n\n\ntopo_ids\nUnique topo IDs in the collection."
  },
  {
    "objectID": "api/Xns11.html#methods",
    "href": "api/Xns11.html#methods",
    "title": "Xns11",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd\nAdd a cross section to the collection.\n\n\nfrom_cross_section_collection\nCreate a Xns11 object from a CrossSectionCollection.\n\n\nget_supported_file_extensions\nGet supported file extensions for Xns11.\n\n\nplot\nPlot all cross sections in the collection.\n\n\nremove\nRemove a cross section from the collection.\n\n\nsel\nSelect cross sections from the collection.\n\n\nto_dataframe\nConvert the collection to a DataFrame.\n\n\nto_geopandas\nConvert the collection to a GeoDataFrame.\n\n\nto_xns11\nSave the collection to an Xns11 file.\n\n\nwrite\nWrite cross section data to an xns11 file.\n\n\n\n\n\nXns11.add(cross_section)\nAdd a cross section to the collection.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncross_section\nCrossSection\nCross section to add.\nrequired\n\n\n\n\n\n\n\nXns11.from_cross_section_collection(xsections)\nCreate a Xns11 object from a CrossSectionCollection.\n\n\n\nXns11.get_supported_file_extensions()\nGet supported file extensions for Xns11.\n\n\n\nXns11.plot(*args, **kwargs)\nPlot all cross sections in the collection.\n\n\n\nXns11.remove(cross_section)\nRemove a cross section from the collection.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncross_section\nCrossSection\nCross section to remove.\nrequired\n\n\n\n\n\n\n\nXns11.sel(location_id=..., chainage=..., topo_id=...)\nSelect cross sections from the collection.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlocation_id\nstr\nLocation ID of the cross section.\n...\n\n\nchainage\nstr | float\nChainage of the cross section.\n...\n\n\ntopo_id\nstr\nTopo ID of the cross section.\n...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nCrossSection or list[CrossSection]\nProviding all arguments will return a CrossSection. Provinding partial arguments will always return a list, even if it only includes one CrossSection.\n\n\n\n\n\n\n\nXns11.to_dataframe()\nConvert the collection to a DataFrame.\n\n\n\nXns11.to_geopandas(mode='sections')\nConvert the collection to a GeoDataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmode\nstr\nMode of conversion. Options are “sections” and “markers”. Default is “sections”.\n'sections'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ngpd.GeoDataFrame\nGeoDataFrame with the cross sections or markers.\n\n\n\n\n\n\nThis method requires the geopandas package to be installed. Cross sections must have defined coordinates.\n\n\n\n\nXns11.to_xns11(file_name, **kwargs)\nSave the collection to an Xns11 file.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfile_name\nstr or Path\nPath to the file to save.\nrequired\n\n\n\n\n\n\n&gt;&gt;&gt; csc.to_xns11(\"cross_sections.xns11\")\n\n\n\n\nXns11.write(file_path=None)\nWrite cross section data to an xns11 file.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfile_path\nstr | Path\nFull file path of the xns11 file to be written. Default is the file_path used to open the file.\nNone"
  },
  {
    "objectID": "api/result_network.ResultQuantity.html",
    "href": "api/result_network.ResultQuantity.html",
    "title": "result_network.ResultQuantity",
    "section": "",
    "text": "result_network.ResultQuantity(\n    self,\n    result_location,\n    data_item,\n    res1d,\n    m1d_dataset=None,\n    element_index=0,\n)\nClass for wrapping a single ResultData data item quantity.\nResultQuantity objects are the last attributes assigned to a network. They have the ability to add a query.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nresult_location\nResultLocation\nResultLocation object, which could be node, catchment, grid point, or global data item.\nrequired\n\n\ndata_item\n\nMIKE 1D IDataItem object.\nrequired\n\n\nres1d\nRes1D\nRes1D object the quantity belongs to.\nrequired\n\n\nm1d_dataset\n\nIRes1DDataSet object the quantity is associated with.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nelement_index\nint\nAn integer giving an element index into the data item which gives the concrete time series for given location.\n\n\ntimeseries_id\nTimeSeriesId\nA unique TimeSeriesId object corresponding to the data item. This is unmutable and set when the ResultQuantity is added to a network. A value of None indicates that the ResultQuantity has not been added to a network.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd\nAdd a ResultQuantity to ResultNetwork.read_queue based on the data item.\n\n\nget_data_entry\nGet DataEntry corresponding to ResultQuantity.\n\n\nget_data_entry_net\nGet DataEntryNet corresponding to ResultQuantity.\n\n\nget_query\nGet query corresponding to ResultQuantity.\n\n\nplot\nPlot the time series data.\n\n\nprettify_quantity\nGet a pretty string representation of a ResultQuantity’s type and unit.\n\n\nread\nRead the time series data into a data frame.\n\n\nto_csv\nExtract time series data into a csv file.\n\n\nto_dataframe\nGet a time series as a data frame.\n\n\nto_dfs0\nExtract time series data into a dfs0 file.\n\n\nto_txt\nExtract time series data into a txt file.\n\n\n\n\n\nresult_network.ResultQuantity.add()\nAdd a ResultQuantity to ResultNetwork.read_queue based on the data item.\n\n\n\nresult_network.ResultQuantity.get_data_entry()\nGet DataEntry corresponding to ResultQuantity.\n\n\n\nresult_network.ResultQuantity.get_data_entry_net()\nGet DataEntryNet corresponding to ResultQuantity.\n\n\n\nresult_network.ResultQuantity.get_query()\nGet query corresponding to ResultQuantity.\n\n\n\nresult_network.ResultQuantity.plot(ax=None, **kwargs)\nPlot the time series data.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nax\nmatplotlib.axes.Axes\nAxes object to plot on.\nNone\n\n\n**kwargs\n\nAdditional keyword arguments passed to pandas.DataFrame.plot.\n{}\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nmatplotlib.axes.Axes\nAxes object with the plot.\n\n\n\n\n\n\n\nresult_network.ResultQuantity.prettify_quantity(quantity, latex_format=False)\nGet a pretty string representation of a ResultQuantity’s type and unit.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nquantity\nResultQuantity | IQuantity\nResultQuantity object or DHI.Mike1D.Generic.IQuantity object.\nrequired\n\n\nlatex_format\n\nIf True, the unit abbreviation will use LaTeX-formatted text.\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nstr\nA string representation of the quantity type and unit.\n\n\n\n\n\n\n\nresult_network.ResultQuantity.read(column_mode=None)\nRead the time series data into a data frame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects ‘str’ - column index of str representations of QueryData objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultQuantity.to_csv(file_path, time_step_skipping_number=1)\nExtract time series data into a csv file.\n\n\n\nresult_network.ResultQuantity.to_dataframe()\nGet a time series as a data frame.\n\n\n\nresult_network.ResultQuantity.to_dfs0(file_path, time_step_skipping_number=1)\nExtract time series data into a dfs0 file.\n\n\n\nresult_network.ResultQuantity.to_txt(file_path, time_step_skipping_number=1)\nExtract time series data into a txt file."
  },
  {
    "objectID": "api/result_network.ResultQuantity.html#parameters",
    "href": "api/result_network.ResultQuantity.html#parameters",
    "title": "result_network.ResultQuantity",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nresult_location\nResultLocation\nResultLocation object, which could be node, catchment, grid point, or global data item.\nrequired\n\n\ndata_item\n\nMIKE 1D IDataItem object.\nrequired\n\n\nres1d\nRes1D\nRes1D object the quantity belongs to.\nrequired\n\n\nm1d_dataset\n\nIRes1DDataSet object the quantity is associated with.\nNone"
  },
  {
    "objectID": "api/result_network.ResultQuantity.html#attributes",
    "href": "api/result_network.ResultQuantity.html#attributes",
    "title": "result_network.ResultQuantity",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nelement_index\nint\nAn integer giving an element index into the data item which gives the concrete time series for given location.\n\n\ntimeseries_id\nTimeSeriesId\nA unique TimeSeriesId object corresponding to the data item. This is unmutable and set when the ResultQuantity is added to a network. A value of None indicates that the ResultQuantity has not been added to a network."
  },
  {
    "objectID": "api/result_network.ResultQuantity.html#methods",
    "href": "api/result_network.ResultQuantity.html#methods",
    "title": "result_network.ResultQuantity",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd\nAdd a ResultQuantity to ResultNetwork.read_queue based on the data item.\n\n\nget_data_entry\nGet DataEntry corresponding to ResultQuantity.\n\n\nget_data_entry_net\nGet DataEntryNet corresponding to ResultQuantity.\n\n\nget_query\nGet query corresponding to ResultQuantity.\n\n\nplot\nPlot the time series data.\n\n\nprettify_quantity\nGet a pretty string representation of a ResultQuantity’s type and unit.\n\n\nread\nRead the time series data into a data frame.\n\n\nto_csv\nExtract time series data into a csv file.\n\n\nto_dataframe\nGet a time series as a data frame.\n\n\nto_dfs0\nExtract time series data into a dfs0 file.\n\n\nto_txt\nExtract time series data into a txt file.\n\n\n\n\n\nresult_network.ResultQuantity.add()\nAdd a ResultQuantity to ResultNetwork.read_queue based on the data item.\n\n\n\nresult_network.ResultQuantity.get_data_entry()\nGet DataEntry corresponding to ResultQuantity.\n\n\n\nresult_network.ResultQuantity.get_data_entry_net()\nGet DataEntryNet corresponding to ResultQuantity.\n\n\n\nresult_network.ResultQuantity.get_query()\nGet query corresponding to ResultQuantity.\n\n\n\nresult_network.ResultQuantity.plot(ax=None, **kwargs)\nPlot the time series data.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nax\nmatplotlib.axes.Axes\nAxes object to plot on.\nNone\n\n\n**kwargs\n\nAdditional keyword arguments passed to pandas.DataFrame.plot.\n{}\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nmatplotlib.axes.Axes\nAxes object with the plot.\n\n\n\n\n\n\n\nresult_network.ResultQuantity.prettify_quantity(quantity, latex_format=False)\nGet a pretty string representation of a ResultQuantity’s type and unit.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nquantity\nResultQuantity | IQuantity\nResultQuantity object or DHI.Mike1D.Generic.IQuantity object.\nrequired\n\n\nlatex_format\n\nIf True, the unit abbreviation will use LaTeX-formatted text.\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nstr\nA string representation of the quantity type and unit.\n\n\n\n\n\n\n\nresult_network.ResultQuantity.read(column_mode=None)\nRead the time series data into a data frame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects ‘str’ - column index of str representations of QueryData objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultQuantity.to_csv(file_path, time_step_skipping_number=1)\nExtract time series data into a csv file.\n\n\n\nresult_network.ResultQuantity.to_dataframe()\nGet a time series as a data frame.\n\n\n\nresult_network.ResultQuantity.to_dfs0(file_path, time_step_skipping_number=1)\nExtract time series data into a dfs0 file.\n\n\n\nresult_network.ResultQuantity.to_txt(file_path, time_step_skipping_number=1)\nExtract time series data into a txt file."
  },
  {
    "objectID": "api/result_network.ResultCatchments.html",
    "href": "api/result_network.ResultCatchments.html",
    "title": "result_network.ResultCatchments",
    "section": "",
    "text": "result_network.ResultCatchments(self, res1d)\nClass for wrapping ResultData catchments.\nBy itself it is also a dict, which contains mapping between catchment ID and IRes1DCatchment object.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nres1d\nRes1D\nRes1D object the catchments belong to.\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngroup\nThe TimeSeriesIdGroup associated with these locations.\n\n\nlocations\nA list of location objects (e.g. ).\n\n\nnames\nA list of location names (e.g. MUIDs).\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that these locations belong to.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nread\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\nto_geopandas\nConvert catchments to a geopandas.GeoDataFrame object.\n\n\n\n\n\nresult_network.ResultCatchments.read(column_mode=None, include_derived=False)\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse\n\n\n\n\n\n\n\nresult_network.ResultCatchments.to_dataframe(\n    column_mode=None,\n    include_derived=False,\n)\nRead the time series data for all quantities at these locations into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse\n\n\n\n\n\n\n\nresult_network.ResultCatchments.to_geopandas(agg=None, agg_kwargs={})\nConvert catchments to a geopandas.GeoDataFrame object.\nBy default, quantities are not included. To include quantities, use the agg and agg_kwargs parameters.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nagg\nstr or callable\nDefines how to aggregate the quantities in time and space. Accepts any str or callable that is accepted by pandas.DataFrame.agg.\nNone\n\n\n\n\n\n\n- 'mean'  : mean value of all quantities\n- 'max'   : maximum value of all quantities\n-  np.max : maximum value of all quantities\nagg_kwargs : dict, default {} Aggregation function for specific column levels (e.g. {time=‘min’, chainage=‘first’}).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ngdf\ngeopandas.GeoDataFrame\nA GeoDataFrame object with catchments as Polygon geometries."
  },
  {
    "objectID": "api/result_network.ResultCatchments.html#parameters",
    "href": "api/result_network.ResultCatchments.html#parameters",
    "title": "result_network.ResultCatchments",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nres1d\nRes1D\nRes1D object the catchments belong to.\nrequired"
  },
  {
    "objectID": "api/result_network.ResultCatchments.html#attributes",
    "href": "api/result_network.ResultCatchments.html#attributes",
    "title": "result_network.ResultCatchments",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngroup\nThe TimeSeriesIdGroup associated with these locations.\n\n\nlocations\nA list of location objects (e.g. ).\n\n\nnames\nA list of location names (e.g. MUIDs).\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that these locations belong to."
  },
  {
    "objectID": "api/result_network.ResultCatchments.html#methods",
    "href": "api/result_network.ResultCatchments.html#methods",
    "title": "result_network.ResultCatchments",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nread\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\nto_geopandas\nConvert catchments to a geopandas.GeoDataFrame object.\n\n\n\n\n\nresult_network.ResultCatchments.read(column_mode=None, include_derived=False)\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse\n\n\n\n\n\n\n\nresult_network.ResultCatchments.to_dataframe(\n    column_mode=None,\n    include_derived=False,\n)\nRead the time series data for all quantities at these locations into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse\n\n\n\n\n\n\n\nresult_network.ResultCatchments.to_geopandas(agg=None, agg_kwargs={})\nConvert catchments to a geopandas.GeoDataFrame object.\nBy default, quantities are not included. To include quantities, use the agg and agg_kwargs parameters.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nagg\nstr or callable\nDefines how to aggregate the quantities in time and space. Accepts any str or callable that is accepted by pandas.DataFrame.agg.\nNone\n\n\n\n\n\n\n- 'mean'  : mean value of all quantities\n- 'max'   : maximum value of all quantities\n-  np.max : maximum value of all quantities\nagg_kwargs : dict, default {} Aggregation function for specific column levels (e.g. {time=‘min’, chainage=‘first’}).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ngdf\ngeopandas.GeoDataFrame\nA GeoDataFrame object with catchments as Polygon geometries."
  },
  {
    "objectID": "api/index.html",
    "href": "api/index.html",
    "title": "API Reference",
    "section": "",
    "text": "open\nOpen a file type supported by MIKE IO 1D file.\n\n\nRes1D\nClass for reading data from 1D network result files.\n\n\nXns11\nA class to read and write xns11 files.\n\n\n\n\n\n\n\n\n\nresult_network.ResultLocation\nA base class for a network location (node, reach) or a catchment wrapper class.\n\n\nresult_network.ResultLocations\nA base class for a network locations (nodes, reaches) or a catchments wrapper class.\n\n\nresult_network.ResultNode\nClass for wrapping a single ResultData node.\n\n\nresult_network.ResultNodes\nClass for wrapping ResultData nodes.\n\n\nresult_network.ResultReach\nClass for wrapping a list of ResultData reaches having the same reach name.\n\n\nresult_network.ResultReaches\nClass for wrapping ResultData reaches.\n\n\nresult_network.ResultGridPoint\nClass for wrapping a single ResultData grid point.\n\n\nresult_network.ResultCatchment\nClass for wrapping a single ResultData catchment.\n\n\nresult_network.ResultCatchments\nClass for wrapping ResultData catchments.\n\n\nresult_network.ResultGlobalData\nClass for wrapping ResultData global data items.\n\n\nresult_network.ResultGlobalDatas\nClass for wrapping ResultData global data items.\n\n\n\n\n\n\n\n\n\nresult_network.ResultQuantity\nClass for wrapping a single ResultData data item quantity.\n\n\nresult_network.ResultQuantityCollection\nClass for dealing with a collection ResultQuantity objects.\n\n\n\n\n\n\n\n\n\ncross_sections.CrossSection\nA cross section in MIKE 1D, uniquely identified by a location ID, chainage, and topo ID.\n\n\ncross_sections.CrossSectionCollection\nA collection of CrossSection objects.",
    "crumbs": [
      "Home",
      "API Reference"
    ]
  },
  {
    "objectID": "api/index.html#main",
    "href": "api/index.html#main",
    "title": "API Reference",
    "section": "",
    "text": "open\nOpen a file type supported by MIKE IO 1D file.\n\n\nRes1D\nClass for reading data from 1D network result files.\n\n\nXns11\nA class to read and write xns11 files.",
    "crumbs": [
      "Home",
      "API Reference"
    ]
  },
  {
    "objectID": "api/index.html#locations",
    "href": "api/index.html#locations",
    "title": "API Reference",
    "section": "",
    "text": "result_network.ResultLocation\nA base class for a network location (node, reach) or a catchment wrapper class.\n\n\nresult_network.ResultLocations\nA base class for a network locations (nodes, reaches) or a catchments wrapper class.\n\n\nresult_network.ResultNode\nClass for wrapping a single ResultData node.\n\n\nresult_network.ResultNodes\nClass for wrapping ResultData nodes.\n\n\nresult_network.ResultReach\nClass for wrapping a list of ResultData reaches having the same reach name.\n\n\nresult_network.ResultReaches\nClass for wrapping ResultData reaches.\n\n\nresult_network.ResultGridPoint\nClass for wrapping a single ResultData grid point.\n\n\nresult_network.ResultCatchment\nClass for wrapping a single ResultData catchment.\n\n\nresult_network.ResultCatchments\nClass for wrapping ResultData catchments.\n\n\nresult_network.ResultGlobalData\nClass for wrapping ResultData global data items.\n\n\nresult_network.ResultGlobalDatas\nClass for wrapping ResultData global data items.",
    "crumbs": [
      "Home",
      "API Reference"
    ]
  },
  {
    "objectID": "api/index.html#quantities",
    "href": "api/index.html#quantities",
    "title": "API Reference",
    "section": "",
    "text": "result_network.ResultQuantity\nClass for wrapping a single ResultData data item quantity.\n\n\nresult_network.ResultQuantityCollection\nClass for dealing with a collection ResultQuantity objects.",
    "crumbs": [
      "Home",
      "API Reference"
    ]
  },
  {
    "objectID": "api/index.html#cross-sections",
    "href": "api/index.html#cross-sections",
    "title": "API Reference",
    "section": "",
    "text": "cross_sections.CrossSection\nA cross section in MIKE 1D, uniquely identified by a location ID, chainage, and topo ID.\n\n\ncross_sections.CrossSectionCollection\nA collection of CrossSection objects.",
    "crumbs": [
      "Home",
      "API Reference"
    ]
  },
  {
    "objectID": "api/result_network.ResultCatchment.html",
    "href": "api/result_network.ResultCatchment.html",
    "title": "result_network.ResultCatchment",
    "section": "",
    "text": "result_network.ResultCatchment(self, catchment, res1d)\nClass for wrapping a single ResultData catchment.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncatchment\nIRes1DCatchment\nMIKE 1D IRes1DCatchment object.\nrequired\n\n\nres1d\nRes1D\nRes1D object the catchment belongs to.\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\narea\nThe area of the catchment.\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngeometry\nA geometric representation of the catchment. Requires shapely.\n\n\ngroup\nThe TimeSeriesIdGroup assosciated with this location.\n\n\nid\nThe ID of the catchment.\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that this location belongs to.\n\n\nres1d_catchment\nDHI.Mike1D.ResultDataAccess.IRes1DCatchment corresponding to this result location.\n\n\ntype\nThe type of the catchment.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_query\nAdd a query to ResultNetwork.queries list.\n\n\nget_m1d_dataset\nGet IRes1DDataSet object associated with ResultCatchment.\n\n\nget_query\nGet a QueryDataCatchment for given data item.\n\n\nread\nRead the time series data for all quantities at this location into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\nresult_network.ResultCatchment.add_query(data_item)\nAdd a query to ResultNetwork.queries list.\n\n\n\nresult_network.ResultCatchment.get_m1d_dataset(m1d_dataitem=None)\nGet IRes1DDataSet object associated with ResultCatchment.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm1d_dataitem\nIDataItem\nIgnored for ResultCatchment.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nIRes1DDataSet\nIRes1DDataSet object associated with ResultCatchment.\n\n\n\n\n\n\n\nresult_network.ResultCatchment.get_query(data_item)\nGet a QueryDataCatchment for given data item.\n\n\n\nresult_network.ResultCatchment.read(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultCatchment.to_dataframe(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone"
  },
  {
    "objectID": "api/result_network.ResultCatchment.html#parameters",
    "href": "api/result_network.ResultCatchment.html#parameters",
    "title": "result_network.ResultCatchment",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ncatchment\nIRes1DCatchment\nMIKE 1D IRes1DCatchment object.\nrequired\n\n\nres1d\nRes1D\nRes1D object the catchment belongs to.\nrequired"
  },
  {
    "objectID": "api/result_network.ResultCatchment.html#attributes",
    "href": "api/result_network.ResultCatchment.html#attributes",
    "title": "result_network.ResultCatchment",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\narea\nThe area of the catchment.\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngeometry\nA geometric representation of the catchment. Requires shapely.\n\n\ngroup\nThe TimeSeriesIdGroup assosciated with this location.\n\n\nid\nThe ID of the catchment.\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that this location belongs to.\n\n\nres1d_catchment\nDHI.Mike1D.ResultDataAccess.IRes1DCatchment corresponding to this result location.\n\n\ntype\nThe type of the catchment."
  },
  {
    "objectID": "api/result_network.ResultCatchment.html#methods",
    "href": "api/result_network.ResultCatchment.html#methods",
    "title": "result_network.ResultCatchment",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd_query\nAdd a query to ResultNetwork.queries list.\n\n\nget_m1d_dataset\nGet IRes1DDataSet object associated with ResultCatchment.\n\n\nget_query\nGet a QueryDataCatchment for given data item.\n\n\nread\nRead the time series data for all quantities at this location into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\nresult_network.ResultCatchment.add_query(data_item)\nAdd a query to ResultNetwork.queries list.\n\n\n\nresult_network.ResultCatchment.get_m1d_dataset(m1d_dataitem=None)\nGet IRes1DDataSet object associated with ResultCatchment.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm1d_dataitem\nIDataItem\nIgnored for ResultCatchment.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nIRes1DDataSet\nIRes1DDataSet object associated with ResultCatchment.\n\n\n\n\n\n\n\nresult_network.ResultCatchment.get_query(data_item)\nGet a QueryDataCatchment for given data item.\n\n\n\nresult_network.ResultCatchment.read(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultCatchment.to_dataframe(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone"
  },
  {
    "objectID": "api/result_network.ResultQuantityCollection.html",
    "href": "api/result_network.ResultQuantityCollection.html",
    "title": "result_network.ResultQuantityCollection",
    "section": "",
    "text": "result_network.ResultQuantityCollection(self, result_quantities, res1d)\nClass for dealing with a collection ResultQuantity objects.\nResultQuantityCollection objects are the attributes assigned to a network type like nodes, catchments, etc. For example, res1d.nodes.WaterLevel They have the ability to add queries.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nresult_quantities\n\nA list of ResultQuantity objects having the same quantity id.\nrequired\n\n\nres1d\nRes1D\nRes1D object the quantity belongs to.\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nname\nName of the quantity id assosciated with collection.\n\n\ntimeseries_id\nTimeSeriesId corresponding to ResultQuantity.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd\nAdd queries to ResultNetwork.queries from a list of result quantities.\n\n\nget_data_entry\nGet DataEntry corresponding to ResultQuantity.\n\n\nget_data_entry_net\nGet DataEntryNet corresponding to ResultQuantity.\n\n\nget_query\nGet queries corresponding to ResultQuantityCollection.\n\n\nget_timeseries_ids\nGet TimeSeriesId objects corresponding to ResultQuantityCollection.\n\n\nplot\nPlot the time series data.\n\n\nprettify_quantity\nGet a pretty string representation of a ResultQuantity’s type and unit.\n\n\nread\nRead the time series data into a data frame.\n\n\nto_csv\nExtract time series data into a csv file.\n\n\nto_dataframe\nRead the time series data into a data frame.\n\n\nto_dfs0\nExtract time series data into a dfs0 file.\n\n\nto_txt\nExtract time series data into a txt file.\n\n\n\n\n\nresult_network.ResultQuantityCollection.add()\nAdd queries to ResultNetwork.queries from a list of result quantities.\n\n\n\nresult_network.ResultQuantityCollection.get_data_entry()\nGet DataEntry corresponding to ResultQuantity.\n\n\n\nresult_network.ResultQuantityCollection.get_data_entry_net()\nGet DataEntryNet corresponding to ResultQuantity.\n\n\n\nresult_network.ResultQuantityCollection.get_query()\nGet queries corresponding to ResultQuantityCollection.\n\n\n\nresult_network.ResultQuantityCollection.get_timeseries_ids()\nGet TimeSeriesId objects corresponding to ResultQuantityCollection.\n\n\n\nresult_network.ResultQuantityCollection.plot(ax=None, **kwargs)\nPlot the time series data.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nax\nmatplotlib.axes.Axes\nAxes object to plot on.\nNone\n\n\n**kwargs\n\nAdditional keyword arguments passed to pandas.DataFrame.plot.\n{}\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nmatplotlib.axes.Axes\nAxes object with the plot.\n\n\n\n\n\n\n\nresult_network.ResultQuantityCollection.prettify_quantity(\n    quantity,\n    latex_format=False,\n)\nGet a pretty string representation of a ResultQuantity’s type and unit.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nquantity\nResultQuantity | IQuantity\nResultQuantity object or DHI.Mike1D.Generic.IQuantity object.\nrequired\n\n\nlatex_format\n\nIf True, the unit abbreviation will use LaTeX-formatted text.\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nstr\nA string representation of the quantity type and unit.\n\n\n\n\n\n\n\nresult_network.ResultQuantityCollection.read(column_mode=None)\nRead the time series data into a data frame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects ‘str’ - column index of str representations of QueryData objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultQuantityCollection.to_csv(\n    file_path,\n    time_step_skipping_number=1,\n)\nExtract time series data into a csv file.\n\n\n\nresult_network.ResultQuantityCollection.to_dataframe(column_mode=None)\nRead the time series data into a data frame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects ‘str’ - column index of str representations of QueryData objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultQuantityCollection.to_dfs0(\n    file_path,\n    time_step_skipping_number=1,\n)\nExtract time series data into a dfs0 file.\n\n\n\nresult_network.ResultQuantityCollection.to_txt(\n    file_path,\n    time_step_skipping_number=1,\n)\nExtract time series data into a txt file."
  },
  {
    "objectID": "api/result_network.ResultQuantityCollection.html#parameters",
    "href": "api/result_network.ResultQuantityCollection.html#parameters",
    "title": "result_network.ResultQuantityCollection",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nresult_quantities\n\nA list of ResultQuantity objects having the same quantity id.\nrequired\n\n\nres1d\nRes1D\nRes1D object the quantity belongs to.\nrequired"
  },
  {
    "objectID": "api/result_network.ResultQuantityCollection.html#attributes",
    "href": "api/result_network.ResultQuantityCollection.html#attributes",
    "title": "result_network.ResultQuantityCollection",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nname\nName of the quantity id assosciated with collection.\n\n\ntimeseries_id\nTimeSeriesId corresponding to ResultQuantity."
  },
  {
    "objectID": "api/result_network.ResultQuantityCollection.html#methods",
    "href": "api/result_network.ResultQuantityCollection.html#methods",
    "title": "result_network.ResultQuantityCollection",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd\nAdd queries to ResultNetwork.queries from a list of result quantities.\n\n\nget_data_entry\nGet DataEntry corresponding to ResultQuantity.\n\n\nget_data_entry_net\nGet DataEntryNet corresponding to ResultQuantity.\n\n\nget_query\nGet queries corresponding to ResultQuantityCollection.\n\n\nget_timeseries_ids\nGet TimeSeriesId objects corresponding to ResultQuantityCollection.\n\n\nplot\nPlot the time series data.\n\n\nprettify_quantity\nGet a pretty string representation of a ResultQuantity’s type and unit.\n\n\nread\nRead the time series data into a data frame.\n\n\nto_csv\nExtract time series data into a csv file.\n\n\nto_dataframe\nRead the time series data into a data frame.\n\n\nto_dfs0\nExtract time series data into a dfs0 file.\n\n\nto_txt\nExtract time series data into a txt file.\n\n\n\n\n\nresult_network.ResultQuantityCollection.add()\nAdd queries to ResultNetwork.queries from a list of result quantities.\n\n\n\nresult_network.ResultQuantityCollection.get_data_entry()\nGet DataEntry corresponding to ResultQuantity.\n\n\n\nresult_network.ResultQuantityCollection.get_data_entry_net()\nGet DataEntryNet corresponding to ResultQuantity.\n\n\n\nresult_network.ResultQuantityCollection.get_query()\nGet queries corresponding to ResultQuantityCollection.\n\n\n\nresult_network.ResultQuantityCollection.get_timeseries_ids()\nGet TimeSeriesId objects corresponding to ResultQuantityCollection.\n\n\n\nresult_network.ResultQuantityCollection.plot(ax=None, **kwargs)\nPlot the time series data.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nax\nmatplotlib.axes.Axes\nAxes object to plot on.\nNone\n\n\n**kwargs\n\nAdditional keyword arguments passed to pandas.DataFrame.plot.\n{}\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nmatplotlib.axes.Axes\nAxes object with the plot.\n\n\n\n\n\n\n\nresult_network.ResultQuantityCollection.prettify_quantity(\n    quantity,\n    latex_format=False,\n)\nGet a pretty string representation of a ResultQuantity’s type and unit.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nquantity\nResultQuantity | IQuantity\nResultQuantity object or DHI.Mike1D.Generic.IQuantity object.\nrequired\n\n\nlatex_format\n\nIf True, the unit abbreviation will use LaTeX-formatted text.\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nstr\nA string representation of the quantity type and unit.\n\n\n\n\n\n\n\nresult_network.ResultQuantityCollection.read(column_mode=None)\nRead the time series data into a data frame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects ‘str’ - column index of str representations of QueryData objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultQuantityCollection.to_csv(\n    file_path,\n    time_step_skipping_number=1,\n)\nExtract time series data into a csv file.\n\n\n\nresult_network.ResultQuantityCollection.to_dataframe(column_mode=None)\nRead the time series data into a data frame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects ‘str’ - column index of str representations of QueryData objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultQuantityCollection.to_dfs0(\n    file_path,\n    time_step_skipping_number=1,\n)\nExtract time series data into a dfs0 file.\n\n\n\nresult_network.ResultQuantityCollection.to_txt(\n    file_path,\n    time_step_skipping_number=1,\n)\nExtract time series data into a txt file."
  },
  {
    "objectID": "api/result_network.ResultLocations.html",
    "href": "api/result_network.ResultLocations.html",
    "title": "result_network.ResultLocations",
    "section": "",
    "text": "result_network.ResultLocations(self)\nA base class for a network locations (nodes, reaches) or a catchments wrapper class.\n\n\n\n\n\nName\nDescription\n\n\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngroup\nThe TimeSeriesIdGroup associated with these locations.\n\n\nlocations\nA list of location objects (e.g. ).\n\n\nnames\nA list of location names (e.g. MUIDs).\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that these locations belong to.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nread\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\n\n\n\nresult_network.ResultLocations.read(column_mode=None, include_derived=False)\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse\n\n\n\n\n\n\n\nresult_network.ResultLocations.to_dataframe(\n    column_mode=None,\n    include_derived=False,\n)\nRead the time series data for all quantities at these locations into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse"
  },
  {
    "objectID": "api/result_network.ResultLocations.html#attributes",
    "href": "api/result_network.ResultLocations.html#attributes",
    "title": "result_network.ResultLocations",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ngroup\nThe TimeSeriesIdGroup associated with these locations.\n\n\nlocations\nA list of location objects (e.g. ).\n\n\nnames\nA list of location names (e.g. MUIDs).\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that these locations belong to."
  },
  {
    "objectID": "api/result_network.ResultLocations.html#methods",
    "href": "api/result_network.ResultLocations.html#methods",
    "title": "result_network.ResultLocations",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nread\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\n\n\n\nresult_network.ResultLocations.read(column_mode=None, include_derived=False)\nRead the time series data for all quantities at these locations into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse\n\n\n\n\n\n\n\nresult_network.ResultLocations.to_dataframe(\n    column_mode=None,\n    include_derived=False,\n)\nRead the time series data for all quantities at these locations into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\ninclude_derived\nbool\nInclude derived quantities.\nFalse"
  },
  {
    "objectID": "api/cross_sections.CrossSectionCollection.html",
    "href": "api/cross_sections.CrossSectionCollection.html",
    "title": "cross_sections.CrossSectionCollection",
    "section": "",
    "text": "cross_sections.CrossSectionCollection(self, cross_sections=None)\nA collection of CrossSection objects.\nThe collection is a dict-like object where the keys are tuples of location ID, chainage and topo ID.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncross_sections\nCollection[CrossSection] | CrossSectionData | Path | str\nIf Collection[CrossSection], the collection will be initialized from the list of CrossSection objects. If CrossSectionData, the collection will be initialized from a .NET DHI.Mike1D.CrossSectionModule.CrossSectionData object. If Path or str, the collection will be initialized from an xns11 file.\nNone"
  },
  {
    "objectID": "api/cross_sections.CrossSectionCollection.html#parameters",
    "href": "api/cross_sections.CrossSectionCollection.html#parameters",
    "title": "cross_sections.CrossSectionCollection",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ncross_sections\nCollection[CrossSection] | CrossSectionData | Path | str\nIf Collection[CrossSection], the collection will be initialized from the list of CrossSection objects. If CrossSectionData, the collection will be initialized from a .NET DHI.Mike1D.CrossSectionModule.CrossSectionData object. If Path or str, the collection will be initialized from an xns11 file.\nNone"
  },
  {
    "objectID": "api/cross_sections.CrossSectionCollection.html#attributes",
    "href": "api/cross_sections.CrossSectionCollection.html#attributes",
    "title": "cross_sections.CrossSectionCollection",
    "section": "Attributes",
    "text": "Attributes\n\n\n\nName\nDescription\n\n\n\n\nchainages\nUnique chainages in the collection (as string with 3 decimals).\n\n\ncross_section_data\nThe DHI.Mike1D.CrossSectionModule.CrossSectionData object.\n\n\ndata\nThe DHI.Mike1D.CrossSectionModule.CrossSectionData object.\n\n\ninterpolation_type\nDefines how an interpolated cross section is interpolated.\n\n\nlocation_ids\nUnique location IDs in the collection.\n\n\ntopo_ids\nUnique topo IDs in the collection."
  },
  {
    "objectID": "api/cross_sections.CrossSectionCollection.html#methods",
    "href": "api/cross_sections.CrossSectionCollection.html#methods",
    "title": "cross_sections.CrossSectionCollection",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\nadd\nAdd a cross section to the collection.\n\n\nplot\nPlot all cross sections in the collection.\n\n\nremove\nRemove a cross section from the collection.\n\n\nsel\nSelect cross sections from the collection.\n\n\nto_dataframe\nConvert the collection to a DataFrame.\n\n\nto_geopandas\nConvert the collection to a GeoDataFrame.\n\n\nto_xns11\nSave the collection to an Xns11 file.\n\n\n\n\nadd\ncross_sections.CrossSectionCollection.add(cross_section)\nAdd a cross section to the collection.\n\nParameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncross_section\nCrossSection\nCross section to add.\nrequired\n\n\n\n\n\n\nplot\ncross_sections.CrossSectionCollection.plot(*args, **kwargs)\nPlot all cross sections in the collection.\n\n\nremove\ncross_sections.CrossSectionCollection.remove(cross_section)\nRemove a cross section from the collection.\n\nParameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncross_section\nCrossSection\nCross section to remove.\nrequired\n\n\n\n\n\n\nsel\ncross_sections.CrossSectionCollection.sel(\n    location_id=...,\n    chainage=...,\n    topo_id=...,\n)\nSelect cross sections from the collection.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlocation_id\nstr\nLocation ID of the cross section.\n...\n\n\nchainage\nstr | float\nChainage of the cross section.\n...\n\n\ntopo_id\nstr\nTopo ID of the cross section.\n...\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nCrossSection or list[CrossSection]\nProviding all arguments will return a CrossSection. Provinding partial arguments will always return a list, even if it only includes one CrossSection.\n\n\n\n\n\n\nto_dataframe\ncross_sections.CrossSectionCollection.to_dataframe()\nConvert the collection to a DataFrame.\n\n\nto_geopandas\ncross_sections.CrossSectionCollection.to_geopandas(mode='sections')\nConvert the collection to a GeoDataFrame.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmode\nstr\nMode of conversion. Options are “sections” and “markers”. Default is “sections”.\n'sections'\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\ngpd.GeoDataFrame\nGeoDataFrame with the cross sections or markers.\n\n\n\n\n\nNote:\nThis method requires the geopandas package to be installed. Cross sections must have defined coordinates.\n\n\n\nto_xns11\ncross_sections.CrossSectionCollection.to_xns11(file_name, **kwargs)\nSave the collection to an Xns11 file.\n\nParameters\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfile_name\nstr or Path\nPath to the file to save.\nrequired\n\n\n\n\n\nExamples\n&gt;&gt;&gt; csc.to_xns11(\"cross_sections.xns11\")"
  },
  {
    "objectID": "api/result_network.ResultNode.html",
    "href": "api/result_network.ResultNode.html",
    "title": "result_network.ResultNode",
    "section": "",
    "text": "result_network.ResultNode(self, node, res1d)\nClass for wrapping a single ResultData node.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nnode\nIRes1DNode\nMIKE 1D IRes1DNode object.\nrequired\n\n\nres1d\nRes1D\nRes1D object the node belongs to.\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nbottom_level\nBottom level of the node.\n\n\ncritical_level\nCritical level of the node.\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ndiameter\nDiameter of the node.\n\n\ngeometry\nA geometric representation of the node. Requires shapely.\n\n\nground_level\nGround level of the node.\n\n\ngroup\nThe TimeSeriesIdGroup assosciated with this location.\n\n\nid\nNode ID.\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that this location belongs to.\n\n\nres1d_node\nDHI.Mike1D.ResultDataAccess.IRes1DNode corresponding to this result location.\n\n\ntype\nNode type.\n\n\nxcoord\nX coordinate of the node.\n\n\nycoord\nY coordinate of the node.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_query\nAdd a query to ResultNetwork.queries list.\n\n\nget_m1d_dataset\nGet IRes1DDataSet object associated with ResultNode.\n\n\nget_query\nGet a QueryDataNode for given data item.\n\n\nread\nRead the time series data for all quantities at this location into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\nresult_network.ResultNode.add_query(data_item)\nAdd a query to ResultNetwork.queries list.\n\n\n\nresult_network.ResultNode.get_m1d_dataset(m1d_dataitem=None)\nGet IRes1DDataSet object associated with ResultNode.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm1d_dataitem\nIDataItem\nIgnored for ResultNode.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nIRes1DDataSet\nIRes1DDataSet object associated with ResultNode.\n\n\n\n\n\n\n\nresult_network.ResultNode.get_query(data_item)\nGet a QueryDataNode for given data item.\n\n\n\nresult_network.ResultNode.read(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultNode.to_dataframe(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone"
  },
  {
    "objectID": "api/result_network.ResultNode.html#parameters",
    "href": "api/result_network.ResultNode.html#parameters",
    "title": "result_network.ResultNode",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nnode\nIRes1DNode\nMIKE 1D IRes1DNode object.\nrequired\n\n\nres1d\nRes1D\nRes1D object the node belongs to.\nrequired"
  },
  {
    "objectID": "api/result_network.ResultNode.html#attributes",
    "href": "api/result_network.ResultNode.html#attributes",
    "title": "result_network.ResultNode",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nbottom_level\nBottom level of the node.\n\n\ncritical_level\nCritical level of the node.\n\n\nderived_quantities\nA list of available derived quantities.\n\n\ndiameter\nDiameter of the node.\n\n\ngeometry\nA geometric representation of the node. Requires shapely.\n\n\nground_level\nGround level of the node.\n\n\ngroup\nThe TimeSeriesIdGroup assosciated with this location.\n\n\nid\nNode ID.\n\n\nquantities\nA list of available quantities.\n\n\nres1d\nThe Res1D instance that this location belongs to.\n\n\nres1d_node\nDHI.Mike1D.ResultDataAccess.IRes1DNode corresponding to this result location.\n\n\ntype\nNode type.\n\n\nxcoord\nX coordinate of the node.\n\n\nycoord\nY coordinate of the node."
  },
  {
    "objectID": "api/result_network.ResultNode.html#methods",
    "href": "api/result_network.ResultNode.html#methods",
    "title": "result_network.ResultNode",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd_query\nAdd a query to ResultNetwork.queries list.\n\n\nget_m1d_dataset\nGet IRes1DDataSet object associated with ResultNode.\n\n\nget_query\nGet a QueryDataNode for given data item.\n\n\nread\nRead the time series data for all quantities at this location into a DataFrame.\n\n\nto_dataframe\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\nresult_network.ResultNode.add_query(data_item)\nAdd a query to ResultNetwork.queries list.\n\n\n\nresult_network.ResultNode.get_m1d_dataset(m1d_dataitem=None)\nGet IRes1DDataSet object associated with ResultNode.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nm1d_dataitem\nIDataItem\nIgnored for ResultNode.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nIRes1DDataSet\nIRes1DDataSet object associated with ResultNode.\n\n\n\n\n\n\n\nresult_network.ResultNode.get_query(data_item)\nGet a QueryDataNode for given data item.\n\n\n\nresult_network.ResultNode.read(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone\n\n\n\n\n\n\n\nresult_network.ResultNode.to_dataframe(column_mode=None)\nRead the time series data for all quantities at this location into a DataFrame.\nAlias for read() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumn_mode\nstr | ColumnMode(optional)\nSpecifies the type of column index of returned DataFrame. ‘all’ - column MultiIndex with levels matching TimeSeriesId objects. ‘compact’ - same as ‘all’, but removes levels with default values. ‘timeseries’ - column index of TimeSeriesId objects\nNone"
  }
]