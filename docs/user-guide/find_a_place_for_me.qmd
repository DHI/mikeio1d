## What types of files can I read?

Any result file related to MIKE collection system, water distribution, and river modelling. Specific file extensions supported include:

-   MIKE 1D network and catchment .res1d files
-   MIKE 1D Long Term Statistics .res1d files
-   MOUSE legacy .PRF and .CRF files
-   EPANET .res and .resx files generated by MIKE+
-   SWMM .out files

::: callout-note
EPANET, SWMM, and MOUSE result files are read the same way as res1d files. No special syntax or alternative API is required.
:::

Additionally, support is available for cross section data stored in .xns11 files.

## Basics of the network structure

Working with MIKE IO 1D requires a conceptual understanding of the network structure. All result data lives somewhere on the network. There's four main elements of every network:

-   Nodes
-   Reaches (also consisting of grid points)
-   Catchments
-   Global data

When you first open a result file, you'll see how many of these elements types exist in the file.

```{python}
from mikeio1d import Res1D
res = Res1D('../data/network.res1d')
res.info()
```

::: callout-tip
The network structure is generic and applies to different domains (e.g. collection systems, water distribution, rivers). Here's a few examples of result types mapped onto this structure.
:::

```{list-table}
:widths: 15 30
:header-rows: 1

*   - Network Element
    - Result Type
*   - Nodes
    -
        - Various water levels (e.g. manhole, basin, outlet, junction)
        - Pump discarge in structure
*   - Reaches
    -
        - Various link discharges (e.g. pipes, pumps, weirs)
        - Water level at various chainages along a river reach
*   - Catchments
    -
        - Catchment discharge
        - Total Runoff
*   - Global data
    -
        - Water balance
        - User defined variable types
```

## Reading and plotting data

There's various ways to read data into dataframes and make plots.

### Read everything

```{python}
df = res.read()
df.head()
```

### Read a specific result

```{python}
df = res.nodes['101'].WaterLevel.read()
df.head()
```

### Read a group of results

```{python}
df = res.nodes.WaterLevel.read()
df.head()
```

### Combine various results into one dataframe

```{python}
res.nodes['101'].WaterLevel.add()
res.reaches['100l1'].Discharge.add()
df = res.read()
df.head()
```

### Use plot() instead of read()

```{python}
res.nodes['101'].WaterLevel.plot()
```

::: callout-hint
Think of add() as in 'add this to some collection of results I eventually want to read to a dataframe'.
:::

::: callout-add
The add() workflow may change to something more intuitive. Join the discussion on GitHub to share your opinion :)'.
:::

## Inspect network elements

You can easily see what static and dynamic data is associated with a network element within a jupyter notebook.

### Descriptive html representations

```{python}
node = res.nodes['101']
node
```

### Descriptive string representations

```{python}
node = res.nodes['101']
str(node)
```

### Accessing static data

```{python}
node = res.nodes['101']
node.id, node.type, node.ground_level
```